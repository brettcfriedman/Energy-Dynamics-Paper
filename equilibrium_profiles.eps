%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: equilibrium_profiles.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Troy Carter
%%CreationDate: 8/6/12
%%BoundingBox: 0 0 217 217
%%HiResBoundingBox: 0 0 217 217
%%CropBox: 0 0 217 217
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 7448 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD27FFA87D527D527D%527D527D527D7D7D527D527D527D527D527D527D527D7D7D527D527D527D%527D527D527D527D527D527D527D527D527D527D527D527D527D527D7D7D%527D527D527D527D527D527D527D527D527D527D527D527D527D527D527D%527D527DA8FD1BFFA8F8FD095227FD115227FD1152277DFD3252F87DFD1B%FF7D52FD09FFA8FD23FFA8FD10FFA8FD11FFA8FD10FF7D52FD14FF7DFFFF%FFA8A8FF7D27FD09FFA8FD11FFA8FD11FFA8FD10FFA8A8FD0FFFA8FD11FF%527DFD13FFA852A8FFFF7D52A87D52FD61FF7D52FD14FF7DA8FFA852A852%A8F85858A8FD5CFFA8A8277DFD14FF7DA8FFA87D52A8A8012F8383FFFFFF%83AEFD4EFF7DFF7DA8FD07FF5252FD14FF7DFD05A8FF7D282B7FFFFFFFAE%83333358FD4BFFA827A87DA8FD07FF527DFD1BFF7D76A92BA9FD05FFA8AE%FFFFAE83AEFD36FF7F5555555BFD0455A9FD06FFA87D52A8FD08FF7D52FD%1BFF7D52FF5B2BFD0AFF583333A8FD34FFFD057F857F7F7FFD07FF7DFF27%7DA87DFD06FF527DFD1BFF7D52FFFF5555FD0BFF83A8FD43FFA87DFFA8A8%A852A8FD05FF5252FD1BFF7D27FFFFFF2A7FFD0EFF7D3383FD43FF7D7DA8%FD05FF527DFD1BFF7D52FD04FF2B85FD0EFFA85833FD43FFA8FD06FF7D52%FD1BFF7D27FD04FFA9F9A9FD5AFF527DFD1BFF7D52FD05FFA909FD13FF33%5FFD45FF7D52FD1BFF7D27FD06FF7F09FD12FFAE343383FD37FF7DA87DA8%FD08FF527DFD1BFF7D52FD07FF7F2BFD13FFA8FD37FF7DA8527D7DFD08FF%7D52FD1BFF7D52FD08FF552BFD16FF5EA8FD23FFA85E585EA8FFFFA858FD%07FFA852FD0AFF527DFD1BFF7D52FD09FF552BFD15FF833358FD22FFAE58%835EFFFFFFA883FD07FF7D52FFFFFF7DFD06FF5252FD1BFF7D27FD0AFF31%30FD15FFA85883FD27FFAEFD09FF527DFFA87D7D7DFD05FF527DFD1BFF7D%52FD0BFF3155FD4BFF527D7D7DFD05FF7D52FD14FFA8FFFFFFA8FFFF7D27%FD0BFFA92B55FD18FF5858FD2FFFFD05A8FD05FF527DFD13FF7D527DFFA8%7D52FF7D52FD0DFF315BFD17FFA83333FD38FF7D52FD12FFA852A852FFFF%2752A8A827A8A8FD0BFFA92B55FD18FF5E83FD35FFA8A8277DFD13FF52A8%52FF7D7D52FF7D52FD0EFFA92B55FD50FF527DFD13FFA852A87DFF7D7DFF%7D52FD0FFFA92B55FD1AFF3358FD33FF527DFD1BFF7D52FD10FFA92B55FD%19FFAE5833FD32FF5252FD1BFF7D27FD11FFA92B54FD1AFF8384FD31FF52%7DFD1BFF7D52FD13FF315BFD1DFFA8FD2EFF7D52FD1BFF7D27FD13FFA931%55FD1BFFAE3358FD2DFF527DFD1BFF7D52FD15FF3155FD1CFF5E33FD2CFF%7D52FD1BFF7D27FD15FFA92B31FD1CFF83A8FD2BFF527DFD1BFF7D52FD17%FF5555FD1FFF83FD28FF7D52FD1BFF7D52FD18FF312BFD1DFFAE3333AEFD%26FF527DFD1BFF7D52FD19FF312BFD1EFF8311AEFD25FF5252FD1BFF7D27%FD1AFF312AFD1FFFA8FD25FF527DFD1BFF7D52FD1BFF5B2BFD21FF5883FD%21FF7D52FD1BFF7D27FD1CFF552BFD20FFA8333383FD1FFF527DFD1BFF7D%52FD1DFF7F2BFD21FF83AEFD1FFF7D52FD14FFA8FFA8FD04FF7D27FD1EFF%7F09FD24FF8333AEFD1AFF527DFD13FF7D7D7DFFFF7D7DFF7D52FD1FFF7F%2BFD23FFA85E335EFD19FF7D52FD13FF52A852FFA8277DFFA827A8A8FD1E%FF7FF9A9FD24FF83FFFFFFA8FD13FFA8FF277DFD13FF52A852FF7D7D52A8%7D52A8FD20FF7F09A9FD27FF5E335FA8FD11FFA85252FD13FFA852A87DA8%7D7DFF7D27FD22FFA903A9FD27FFAE5883FFFFAEAEAEFD0DFF527DFD1BFF%7D52FD23FFA909A9FD2CFF335858AEFD0BFF7D52FD1BFF7D27FD24FFA909%7FFD2CFFA88383FFFFAE588383FD05FF527DFD1BFF7D52FD25FFA9097FFD%30FFAE83583483FD04FF7D52FD1BFF7D27FD27FF095BFD38FF527DFD1BFF%7D52FD28FF2B5BFD37FF7D52FD1BFF7D52FD29FF2B55FD36FF527DFD1BFF%7D52FD2AFF2B55FD35FF5252FD1BFF7D27FD2BFF2A2BA9FD33FF527DFD1B%FF7D52FD2CFF552BA9FD32FF7D52FD1BFF7D27FD2DFF5B2BA9FD31FF527D%FD1BFF7D52FD2EFF7F2B7FFD30FF7D52FD1BFF7D27FD2FFF7F097EFD2FFF%527DFD1BFF7D52FD30FFA92B5BFD2EFF7D52FD1BFF7D52FD31FFA93131FD%2DFF527DFD13FFA87DA8FFFFA87DFF7D52FD33FF552BFD2CFF5252FD13FF%527D52FFFF277DFF7D27FFA8FD32FF5B09A9FD28FFA8FF527DFD13FF52FF%52FF7D5252FF7D52A8FD34FF8509A9FD28FFA85252FD13FF7D52A87DFF52%52FF7D27FD36FFA9097FFD28FF527DFD19FFA8FF7D52FD38FF2B55FD27FF%7D52FD1BFF7D27FD39FF542BA9FD25FF527DFD1BFF7D52FD3AFF7F2B7FFD%24FF7D52FD1BFF7D52FD3BFFA92B2BFD23FF527DFD1BFF7D52FD3DFF5B09%A9FD21FF5252FD1BFF7D27FD3EFFA90855FD20FF527DFD1BFF7D52FD40FF%552B7FFD1EFF7D52FD1BFF7D27FD41FF7F2B2BFD1DFF527DFD1BFF7D52FD%43FF5B097FFD1BFF7D52FD1BFF7D27FD44FFA92A2B7FFD19FF527DFD1BFF%7D52FD46FF7F312BA9FD17FF7D52FD1BFF7D52FD48FF7F2B317FFD15FF52%7DFD1BFF7D52FD4AFF7F312BA9FD13FF5252FD1BFF7D27FD4CFF7F2B2B54%FD11FF527DFD14FFA8FFFFFFA8A8FF7D52FD4EFFA95B2B557FFD0EFF7D52%FD13FF7D527DFFA87D52A87D27FD51FF7F312B557FFD09FFA8FF527DFD13%FF52FF52FFFFFF7DFF7D52A8FD53FF7F552B5555A9FD06FFA8527DFD13FF%7D527DA8A82752A8A852FD57FF7F552A2B317F85FFFFFF527DFD14FFA8FF%FFA8A87DFF7D52FD5AFFA97F555555FFFF7D52FD1BFF7D52FD61FF527DFD%1BFF7D52FD61FF5252FD1BFF7D27FD61FF527DFD1BFF7D52FD61FF7D52FD%1BFF7D27FD61FF527DFD1BFF7D52FD61FF7D52FD1BFF7D27FD61FF527DFD%1BFF7D52FD61FF7D52FD1BFF7D52FD61FF527DFD1BFF7D52FD61FF5252FD%1BFF7D27FD61FF527DFD1BFF7D52FD61FF7D52FD1BFF7D27FD61FF527DFD%14FFA8FFFFFFA8A8FF7D52FD1BFFA8FD22FFA8FD11FFA8FD10FF7D52FD13%FF7D527DFFA85252A87D27FFA8FFA8FFA8FFA8FF7DFFFFFFA8FFA8FFA8FF%A8FFA8FFA8FFA8FF7DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA87DFFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFFFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FF2752FD13FF52FF52FF7DA87D%A8A827275227272752FD0727522727275227272752272727522727275227%2727522727275227272752FD072752272727522727275227272752272727%5227272752272727522727275227272752272727522727275227272752FD%04277DFD13FF7D7D7DA8A8527DA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD14FFA8A8FF%A8FFA8A8FD0BFFA8FFFFA8A8FD0DFFA8FD10FFA8FFFFA8FD0DFFA8A8FFFF%A8FD0DFFA8FFFFFFA8FD34FFA827A8A827A8FD0CFF52527D7D52A8FD0BFF%A8527D7D527DFD0CFF7D527D7D527DFD0BFFA87D52A8527DA8FD0CFF527D%A8527DFD23FF52FFA8A87DFD0DFF7DA852FF52FD0DFF7DFF7D7DFD0DFF7D%527DFF52FD0DFF52A8A87DFD0CFF7D52A852FF52FD23FF52A8A8A852A8FD%0BFF5252FD047DFD0CFF527D7DA852A8FD0BFFA87D52527D52FD0BFFA8A8%527DA87D7DFD0BFF7D52527D5252A8FD22FF7DA8A87DA8FD0CFF7D7DA8A8%7DFD0CFFA87D7DA87DA8FD0CFF7D7DA8FF7DFD0DFF7D7DA87D7DFD0DFF7D%A8FF7DA8FDFCFFFD4CFFA8A8FD08FF7DFD70FFA87D7DFFFF7D7DFF7DA87D%A8A8A8FF7D7DFD70FF277DA8FF52FF52A8A8FD04527DA852FD70FF52FFFF%FF52A852A8FF52A87D7D52FF52FD70FF52A8FFFF7D7DA87DA8FD047DA87D%A8FD75FFA8FDFCFFFDFCFFFDC7FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2012-08-06T12:01:10-07:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVk&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>217.000000</stDim:w>
            <stDim:h>217.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -217 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 217 li
217 217 li
217 0 li
cp
clp
.5 216.5 mo
216.5 216.5 li
216.5 .5 li
.5 .5 li
.5 216.5 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
.5 216.5 mo
216.5 216.5 li
216.5 .5 li
.5 .5 li
.5 216.5 li
@
27.5 184.1 mo
194.9 184.1 li
194.9 22.1001 li
27.5 22.1001 li
27.5 184.1 li
f
gsave
27.5 184.1 mo
194.9 184.1 li
194.9 22.1001 li
27.5 22.1001 li
27.5 184.1 li
cp
clp
1.5 lw
27.5 29.814 mo
31.1968 34.7178 li
36.1255 40.832 li
41.0547 46.5571 li
47.2158 53.2949 li
53.3765 59.6992 li
62.0024 68.3062 li
74.3247 80.228 li
91.5757 96.5908 li
102.666 106.859 li
111.291 114.572 li
118.685 120.896 li
124.846 125.898 li
131.007 130.608 li
135.936 134.139 li
140.865 137.435 li
145.794 140.483 li
150.722 143.273 li
155.651 145.798 li
160.58 148.061 li
165.509 150.068 li
170.438 151.838 li
175.367 153.396 li
181.528 155.097 li
188.921 156.908 li
188.921 156.908 li
.883665 .769161 0 0 cmyk
@
0 lc
[6 6 ] 0 dsh
27.5 29.814 mo
33.6611 30.9731 li
39.8223 32.3481 li
45.9834 33.9688 li
52.1445 35.8638 li
57.0732 37.5928 li
62.0024 39.5239 li
66.9312 41.6611 li
71.8599 44.0059 li
76.7891 46.5562 li
82.9502 50.0117 li
89.1113 53.73 li
96.5044 58.458 li
123.613 76.1592 li
129.775 79.7861 li
135.936 83.1338 li
140.865 85.5898 li
145.794 87.8389 li
150.722 89.8799 li
155.651 91.7158 li
160.58 93.356 li
166.741 95.146 li
172.902 96.6729 li
179.064 97.9648 li
185.225 99.0498 li
188.921 99.6138 li
188.921 99.6138 li
.873045 .242161 1 .129244 cmyk
@
grestore
.5 lw
0 lc
45.4355 22.1001 mo
45.4355 26.1001 li
45.4355 184.1 mo
45.4355 180.1 li
0 0 0 1 cmyk
@
42.1958 193.94 mo
42.1958 193.524 li
43.2119 193.524 li
43.2119 188.676 li
42.0361 189.436 li
42.0361 188.924 li
43.46 188.004 li
43.9961 188.004 li
43.9961 193.524 li
45.0122 193.524 li
45.0122 193.94 li
42.1958 193.94 li
42.1958 193.94 li
cp
ef
50.3638 188.108 mo
50.3638 188.748 li
47.6919 188.748 li
47.6919 190.42 li
47.8198 190.324 47.98 190.26 48.1641 190.212 cv
48.3398 190.164 48.5479 190.14 48.772 190.14 cv
49.396 190.14 49.8921 190.316 50.2598 190.668 cv
50.6279 191.02 50.812 191.492 50.812 192.092 cv
50.812 192.716 50.6279 193.196 50.2598 193.532 cv
49.8921 193.876 49.3721 194.044 48.708 194.044 cv
48.436 194.044 48.1641 194.012 47.8838 193.948 cv
47.5962 193.892 47.3081 193.796 47.02 193.66 cv
47.02 192.524 li
47.46 192.524 li
47.4839 192.9 47.604 193.188 47.812 193.38 cv
48.02 193.572 48.3242 193.668 48.708 193.668 cv
49.1162 193.668 49.4282 193.532 49.6519 193.26 cv
49.876 192.988 49.9878 192.604 49.9878 192.092 cv
49.9878 191.588 49.876 191.204 49.6602 190.932 cv
49.436 190.66 49.124 190.524 48.708 190.524 cv
48.4678 190.524 48.2598 190.572 48.084 190.652 cv
47.9082 190.732 47.748 190.86 47.6118 191.036 cv
47.2759 191.036 li
47.2759 188.108 li
50.3638 188.108 li
50.3638 188.108 li
cp
ef
75.3286 22.1001 mo
75.3286 26.1001 li
75.3286 184.1 mo
75.3286 180.1 li
@
71.8438 189.5 mo
71.4038 189.5 li
71.4038 188.46 li
71.6758 188.316 71.9561 188.204 72.2441 188.124 cv
72.5239 188.044 72.8042 188.004 73.0762 188.004 cv
73.6841 188.004 74.1641 188.156 74.5161 188.444 cv
74.8682 188.74 75.0439 189.14 75.0439 189.644 cv
75.0439 190.22 74.644 190.9 73.8438 191.692 cv
73.7798 191.756 73.7402 191.796 73.708 191.828 cv
72.2358 193.3 li
74.668 193.3 li
74.668 192.58 li
75.124 192.58 li
75.124 193.94 li
71.3643 193.94 li
71.3643 193.516 li
73.1318 191.748 li
73.5161 191.364 73.7959 191.004 73.9639 190.676 cv
74.1318 190.348 74.2202 190.004 74.2202 189.644 cv
74.2202 189.252 74.1162 188.948 73.9082 188.724 cv
73.7002 188.5 73.4199 188.388 73.0679 188.388 cv
72.6919 188.388 72.4038 188.484 72.2041 188.668 cv
71.9961 188.852 71.876 189.132 71.8438 189.5 cv
71.8438 189.5 li
cp
ef
78.4038 194.044 mo
77.7642 194.044 77.2681 193.78 76.916 193.252 cv
76.564 192.724 76.3882 191.988 76.3882 191.028 cv
76.3882 190.076 76.564 189.332 76.916 188.804 cv
77.2681 188.276 77.7642 188.004 78.4038 188.004 cv
79.0361 188.004 79.5322 188.276 79.8838 188.804 cv
80.2358 189.332 80.4199 190.076 80.4199 191.028 cv
80.4199 191.988 80.2358 192.724 79.8838 193.252 cv
79.5322 193.78 79.0361 194.044 78.4038 194.044 cv
78.4038 194.044 li
cp
78.4038 193.668 mo
78.8042 193.668 79.1001 193.452 79.2998 193.012 cv
79.4922 192.58 79.5962 191.916 79.5962 191.028 cv
79.5962 190.148 79.4922 189.484 79.2998 189.044 cv
79.1001 188.612 78.8042 188.388 78.4038 188.388 cv
78.0039 188.388 77.7002 188.612 77.5078 189.044 cv
77.3081 189.484 77.2119 190.148 77.2119 191.028 cv
77.2119 191.916 77.3081 192.58 77.5078 193.012 cv
77.7002 193.452 78.0039 193.668 78.4038 193.668 cv
ef
105.221 22.1001 mo
105.221 26.1001 li
105.221 184.1 mo
105.221 180.1 li
@
101.844 189.5 mo
101.404 189.5 li
101.404 188.46 li
101.676 188.316 101.956 188.204 102.244 188.124 cv
102.524 188.044 102.804 188.004 103.076 188.004 cv
103.684 188.004 104.164 188.156 104.516 188.444 cv
104.868 188.74 105.044 189.14 105.044 189.644 cv
105.044 190.22 104.644 190.9 103.844 191.692 cv
103.78 191.756 103.74 191.796 103.708 191.828 cv
102.236 193.3 li
104.668 193.3 li
104.668 192.58 li
105.124 192.58 li
105.124 193.94 li
101.364 193.94 li
101.364 193.516 li
103.132 191.748 li
103.516 191.364 103.796 191.004 103.964 190.676 cv
104.132 190.348 104.22 190.004 104.22 189.644 cv
104.22 189.252 104.116 188.948 103.908 188.724 cv
103.7 188.5 103.42 188.388 103.068 188.388 cv
102.692 188.388 102.404 188.484 102.204 188.668 cv
101.996 188.852 101.876 189.132 101.844 189.5 cv
101.844 189.5 li
cp
ef
109.884 188.108 mo
109.884 188.748 li
107.212 188.748 li
107.212 190.42 li
107.34 190.324 107.5 190.26 107.684 190.212 cv
107.86 190.164 108.068 190.14 108.292 190.14 cv
108.916 190.14 109.412 190.316 109.78 190.668 cv
110.148 191.02 110.332 191.492 110.332 192.092 cv
110.332 192.716 110.148 193.196 109.78 193.532 cv
109.412 193.876 108.892 194.044 108.228 194.044 cv
107.956 194.044 107.684 194.012 107.404 193.948 cv
107.116 193.892 106.828 193.796 106.54 193.66 cv
106.54 192.524 li
106.98 192.524 li
107.004 192.9 107.124 193.188 107.332 193.38 cv
107.54 193.572 107.844 193.668 108.228 193.668 cv
108.636 193.668 108.948 193.532 109.172 193.26 cv
109.396 192.988 109.508 192.604 109.508 192.092 cv
109.508 191.588 109.396 191.204 109.18 190.932 cv
108.956 190.66 108.644 190.524 108.228 190.524 cv
107.988 190.524 107.78 190.572 107.604 190.652 cv
107.428 190.732 107.268 190.86 107.132 191.036 cv
106.796 191.036 li
106.796 188.108 li
109.884 188.108 li
109.884 188.108 li
cp
ef
135.114 22.1001 mo
135.114 26.1001 li
135.114 184.1 mo
135.114 180.1 li
@
131.356 188.355 mo
131.66 188.244 131.948 188.156 132.228 188.092 cv
132.508 188.036 132.772 188.004 133.02 188.004 cv
133.588 188.004 134.036 188.132 134.356 188.372 cv
134.676 188.62 134.836 188.964 134.836 189.396 cv
134.836 189.748 134.724 190.044 134.5 190.276 cv
134.276 190.516 133.964 190.676 133.564 190.756 cv
134.044 190.828 134.412 191.004 134.676 191.284 cv
134.94 191.564 135.076 191.924 135.076 192.364 cv
135.076 192.908 134.892 193.324 134.524 193.612 cv
134.156 193.9 133.636 194.044 132.948 194.044 cv
132.644 194.044 132.34 194.012 132.052 193.948 cv
131.764 193.892 131.476 193.796 131.188 193.66 cv
131.188 192.524 li
131.628 192.524 li
131.652 192.908 131.78 193.188 132.004 193.38 cv
132.228 193.572 132.548 193.668 132.964 193.668 cv
133.364 193.668 133.676 193.556 133.908 193.324 cv
134.132 193.092 134.252 192.771 134.252 192.372 cv
134.252 191.916 134.132 191.572 133.892 191.332 cv
133.652 191.1 133.308 190.98 132.852 190.98 cv
132.484 190.98 li
132.484 190.58 li
132.676 190.58 li
133.132 190.58 133.476 190.492 133.7 190.3 cv
133.924 190.108 134.044 189.828 134.044 189.444 cv
134.044 189.108 133.948 188.844 133.764 188.66 cv
133.572 188.484 133.308 188.388 132.956 188.388 cv
132.604 188.388 132.324 188.476 132.132 188.644 cv
131.94 188.812 131.828 189.06 131.796 189.38 cv
131.356 189.38 li
131.356 188.355 li
131.356 188.355 li
cp
ef
138.164 194.044 mo
137.524 194.044 137.028 193.78 136.676 193.252 cv
136.324 192.724 136.148 191.988 136.148 191.028 cv
136.148 190.076 136.324 189.332 136.676 188.804 cv
137.028 188.276 137.524 188.004 138.164 188.004 cv
138.796 188.004 139.292 188.276 139.644 188.804 cv
139.996 189.332 140.18 190.076 140.18 191.028 cv
140.18 191.988 139.996 192.724 139.644 193.252 cv
139.292 193.78 138.796 194.044 138.164 194.044 cv
138.164 194.044 li
cp
138.164 193.668 mo
138.564 193.668 138.86 193.452 139.06 193.012 cv
139.252 192.58 139.356 191.916 139.356 191.028 cv
139.356 190.148 139.252 189.484 139.06 189.044 cv
138.86 188.612 138.564 188.388 138.164 188.388 cv
137.764 188.388 137.46 188.612 137.268 189.044 cv
137.068 189.484 136.972 190.148 136.972 191.028 cv
136.972 191.916 137.068 192.58 137.268 193.012 cv
137.46 193.452 137.764 193.668 138.164 193.668 cv
ef
165.007 22.1001 mo
165.007 26.1001 li
165.007 184.1 mo
165.007 180.1 li
@
161.356 188.355 mo
161.66 188.244 161.948 188.156 162.228 188.092 cv
162.508 188.036 162.772 188.004 163.02 188.004 cv
163.588 188.004 164.036 188.132 164.356 188.372 cv
164.676 188.62 164.836 188.964 164.836 189.396 cv
164.836 189.748 164.724 190.044 164.5 190.276 cv
164.276 190.516 163.964 190.676 163.564 190.756 cv
164.044 190.828 164.412 191.004 164.676 191.284 cv
164.94 191.564 165.076 191.924 165.076 192.364 cv
165.076 192.908 164.892 193.324 164.524 193.612 cv
164.156 193.9 163.636 194.044 162.948 194.044 cv
162.644 194.044 162.34 194.012 162.052 193.948 cv
161.764 193.892 161.476 193.796 161.188 193.66 cv
161.188 192.524 li
161.628 192.524 li
161.652 192.908 161.78 193.188 162.004 193.38 cv
162.228 193.572 162.548 193.668 162.964 193.668 cv
163.364 193.668 163.676 193.556 163.908 193.324 cv
164.132 193.092 164.252 192.771 164.252 192.372 cv
164.252 191.916 164.132 191.572 163.892 191.332 cv
163.652 191.1 163.308 190.98 162.852 190.98 cv
162.484 190.98 li
162.484 190.58 li
162.676 190.58 li
163.132 190.58 163.476 190.492 163.7 190.3 cv
163.924 190.108 164.044 189.828 164.044 189.444 cv
164.044 189.108 163.948 188.844 163.764 188.66 cv
163.572 188.484 163.308 188.388 162.956 188.388 cv
162.604 188.388 162.324 188.476 162.132 188.644 cv
161.94 188.812 161.828 189.06 161.796 189.38 cv
161.356 189.38 li
161.356 188.355 li
161.356 188.355 li
cp
ef
169.644 188.108 mo
169.644 188.748 li
166.972 188.748 li
166.972 190.42 li
167.1 190.324 167.26 190.26 167.444 190.212 cv
167.62 190.164 167.828 190.14 168.052 190.14 cv
168.676 190.14 169.172 190.316 169.54 190.668 cv
169.908 191.02 170.092 191.492 170.092 192.092 cv
170.092 192.716 169.908 193.196 169.54 193.532 cv
169.172 193.876 168.652 194.044 167.988 194.044 cv
167.716 194.044 167.444 194.012 167.164 193.948 cv
166.876 193.892 166.588 193.796 166.3 193.66 cv
166.3 192.524 li
166.74 192.524 li
166.764 192.9 166.884 193.188 167.092 193.38 cv
167.3 193.572 167.604 193.668 167.988 193.668 cv
168.396 193.668 168.708 193.532 168.932 193.26 cv
169.156 192.988 169.268 192.604 169.268 192.092 cv
169.268 191.588 169.156 191.204 168.94 190.932 cv
168.716 190.66 168.404 190.524 167.988 190.524 cv
167.748 190.524 167.54 190.572 167.364 190.652 cv
167.188 190.732 167.028 190.86 166.892 191.036 cv
166.556 191.036 li
166.556 188.108 li
169.644 188.108 li
169.644 188.108 li
cp
ef
194.9 22.1001 mo
194.9 26.1001 li
194.9 184.1 mo
194.9 180.1 li
@
194.612 193.94 mo
191.956 193.94 li
191.956 193.524 li
192.892 193.524 li
192.892 192.38 li
190.348 192.38 li
190.348 191.956 li
192.9 188.004 li
193.676 188.004 li
193.676 191.964 li
194.788 191.964 li
194.788 192.38 li
193.676 192.38 li
193.676 193.524 li
194.612 193.524 li
194.612 193.94 li
194.612 193.94 li
cp
192.892 191.964 mo
192.892 188.86 li
190.9 191.964 li
192.892 191.964 li
ef
197.924 194.044 mo
197.284 194.044 196.788 193.78 196.436 193.252 cv
196.084 192.724 195.908 191.988 195.908 191.028 cv
195.908 190.076 196.084 189.332 196.436 188.804 cv
196.788 188.276 197.284 188.004 197.924 188.004 cv
198.556 188.004 199.052 188.276 199.404 188.804 cv
199.756 189.332 199.94 190.076 199.94 191.028 cv
199.94 191.988 199.756 192.724 199.404 193.252 cv
199.052 193.78 198.556 194.044 197.924 194.044 cv
197.924 194.044 li
cp
197.924 193.668 mo
198.324 193.668 198.62 193.452 198.82 193.012 cv
199.012 192.58 199.116 191.916 199.116 191.028 cv
199.116 190.148 199.012 189.484 198.82 189.044 cv
198.62 188.612 198.324 188.388 197.924 188.388 cv
197.524 188.388 197.22 188.612 197.028 189.044 cv
196.828 189.484 196.732 190.148 196.732 191.028 cv
196.732 191.916 196.828 192.58 197.028 193.012 cv
197.22 193.452 197.524 193.668 197.924 193.668 cv
ef
102.002 201.26 mo
102.002 202.43 li
101.534 202.43 li
101.516 202.196 101.453 202.025 101.345 201.908 cv
101.228 201.8 101.057 201.737 100.841 201.737 cv
100.445 201.737 100.139 201.881 99.9229 202.151 cv
99.707 202.43 99.6079 202.826 99.6079 203.339 cv
99.6079 205.472 li
100.544 205.472 li
100.544 205.94 li
98.0688 205.94 li
98.0688 205.472 li
98.7979 205.472 li
98.7979 201.728 li
98.0239 201.728 li
98.0239 201.269 li
99.6079 201.269 li
99.6079 202.097 li
99.7607 201.773 99.959 201.539 100.211 201.377 cv
100.463 201.224 100.769 201.143 101.129 201.143 cv
101.255 201.143 101.399 201.161 101.543 201.179 cv
101.687 201.197 101.84 201.224 102.002 201.26 cv
102.002 201.26 li
cp
ef
107.771 207.335 mo
107.051 207.011 106.511 206.507 106.151 205.823 cv
105.791 205.139 105.611 204.266 105.611 203.222 cv
105.611 202.178 105.791 201.314 106.151 200.621 cv
106.511 199.928 107.051 199.424 107.771 199.1 cv
107.771 199.532 li
107.321 199.847 106.997 200.288 106.799 200.846 cv
106.601 201.413 106.502 202.205 106.502 203.222 cv
106.502 204.248 106.601 205.04 106.799 205.598 cv
106.997 206.156 107.321 206.588 107.771 206.903 cv
107.771 207.335 li
107.771 207.335 li
cp
ef
112.886 204.536 mo
112.769 205.04 112.553 205.418 112.229 205.67 cv
111.905 205.931 111.482 206.057 110.969 206.057 cv
110.285 206.057 109.745 205.841 109.331 205.391 cv
108.917 204.941 108.71 204.347 108.71 203.6 cv
108.71 202.862 108.917 202.268 109.331 201.818 cv
109.745 201.368 110.285 201.143 110.969 201.143 cv
111.257 201.143 111.554 201.179 111.851 201.251 cv
112.139 201.323 112.436 201.422 112.733 201.557 cv
112.733 202.754 li
112.265 202.754 li
112.202 202.349 112.067 202.052 111.86 201.863 cv
111.653 201.674 111.356 201.575 110.978 201.575 cv
110.537 201.575 110.204 201.746 109.988 202.088 cv
109.763 202.43 109.655 202.934 109.655 203.6 cv
109.655 204.284 109.763 204.788 109.988 205.13 cv
110.204 205.472 110.537 205.634 110.978 205.634 cv
111.32 205.634 111.599 205.544 111.806 205.364 cv
112.013 205.184 112.157 204.905 112.238 204.536 cv
112.886 204.536 li
112.886 204.536 li
cp
ef
117.962 202.178 mo
118.115 201.836 118.313 201.584 118.556 201.404 cv
118.799 201.233 119.078 201.143 119.402 201.143 cv
119.888 201.143 120.257 201.296 120.5 201.602 cv
120.734 201.908 120.86 202.358 120.86 202.97 cv
120.86 205.472 li
121.589 205.472 li
121.589 205.94 li
119.348 205.94 li
119.348 205.472 li
120.05 205.472 li
120.05 203.06 li
120.05 202.592 119.978 202.25 119.834 202.043 cv
119.69 201.845 119.465 201.737 119.141 201.737 cv
118.781 201.737 118.502 201.881 118.313 202.151 cv
118.124 202.421 118.034 202.817 118.034 203.339 cv
118.034 205.472 li
118.736 205.472 li
118.736 205.94 li
116.522 205.94 li
116.522 205.472 li
117.224 205.472 li
117.224 203.033 li
117.224 202.565 117.152 202.232 117.008 202.034 cv
116.864 201.836 116.639 201.737 116.315 201.737 cv
115.955 201.737 115.676 201.881 115.487 202.151 cv
115.298 202.421 115.208 202.817 115.208 203.339 cv
115.208 205.472 li
115.91 205.472 li
115.91 205.94 li
113.669 205.94 li
113.669 205.472 li
114.398 205.472 li
114.398 201.728 li
113.624 201.728 li
113.624 201.269 li
115.208 201.269 li
115.208 202.097 li
115.352 201.791 115.541 201.548 115.775 201.386 cv
116.009 201.224 116.27 201.143 116.567 201.143 cv
116.927 201.143 117.224 201.233 117.467 201.413 cv
117.71 201.593 117.872 201.854 117.962 202.178 cv
117.962 202.178 li
cp
ef
122.579 207.335 mo
122.579 206.903 li
123.029 206.588 123.353 206.156 123.551 205.598 cv
123.749 205.04 123.848 204.248 123.848 203.222 cv
123.848 202.205 123.749 201.413 123.551 200.846 cv
123.353 200.288 123.029 199.847 122.579 199.532 cv
122.579 199.1 li
123.29 199.424 123.83 199.928 124.19 200.621 cv
124.55 201.314 124.739 202.178 124.739 203.222 cv
124.739 204.266 124.55 205.139 124.19 205.823 cv
123.83 206.507 123.29 207.011 122.579 207.335 cv
122.579 207.335 li
cp
ef
194.9 184.1 mo
190.9 184.1 li
27.5 184.1 mo
31.5 184.1 li
@
14.3242 187.084 mo
13.6841 187.084 13.188 186.82 12.8359 186.292 cv
12.4839 185.764 12.3081 185.028 12.3081 184.068 cv
12.3081 183.116 12.4839 182.372 12.8359 181.844 cv
13.188 181.316 13.6841 181.044 14.3242 181.044 cv
14.9561 181.044 15.4521 181.316 15.8042 181.844 cv
16.1563 182.372 16.3398 183.116 16.3398 184.068 cv
16.3398 185.028 16.1563 185.764 15.8042 186.292 cv
15.4521 186.82 14.9561 187.084 14.3242 187.084 cv
14.3242 187.084 li
cp
14.3242 186.708 mo
14.7241 186.708 15.02 186.492 15.2202 186.052 cv
15.4121 185.62 15.5161 184.956 15.5161 184.068 cv
15.5161 183.188 15.4121 182.524 15.2202 182.084 cv
15.02 181.652 14.7241 181.428 14.3242 181.428 cv
13.9238 181.428 13.6201 181.652 13.4282 182.084 cv
13.228 182.524 13.1318 183.188 13.1318 184.068 cv
13.1318 184.956 13.228 185.62 13.4282 186.052 cv
13.6201 186.492 13.9238 186.708 14.3242 186.708 cv
ef
17.5718 186.572 mo
17.5718 186.428 17.6201 186.308 17.7158 186.204 cv
17.812 186.108 17.9399 186.052 18.0918 186.052 cv
18.2358 186.052 18.356 186.108 18.46 186.204 cv
18.5562 186.308 18.6118 186.428 18.6118 186.572 cv
18.6118 186.716 18.5562 186.844 18.46 186.94 cv
18.356 187.036 18.2358 187.084 18.0918 187.084 cv
17.9399 187.084 17.812 187.036 17.7158 186.94 cv
17.6201 186.844 17.5718 186.724 17.5718 186.572 cv
17.5718 186.572 li
cp
ef
22.0039 187.084 mo
21.3638 187.084 20.8682 186.82 20.5161 186.292 cv
20.1641 185.764 19.9878 185.028 19.9878 184.068 cv
19.9878 183.116 20.1641 182.372 20.5161 181.844 cv
20.8682 181.316 21.3638 181.044 22.0039 181.044 cv
22.6357 181.044 23.1318 181.316 23.4839 181.844 cv
23.8359 182.372 24.02 183.116 24.02 184.068 cv
24.02 185.028 23.8359 185.764 23.4839 186.292 cv
23.1318 186.82 22.6357 187.084 22.0039 187.084 cv
22.0039 187.084 li
cp
22.0039 186.708 mo
22.4038 186.708 22.7002 186.492 22.8999 186.052 cv
23.0918 185.62 23.1958 184.956 23.1958 184.068 cv
23.1958 183.188 23.0918 182.524 22.8999 182.084 cv
22.7002 181.652 22.4038 181.428 22.0039 181.428 cv
21.604 181.428 21.2998 181.652 21.1079 182.084 cv
20.9082 182.524 20.812 183.188 20.812 184.068 cv
20.812 184.956 20.9082 185.62 21.1079 186.052 cv
21.2998 186.492 21.604 186.708 22.0039 186.708 cv
ef
194.9 153.243 mo
190.9 153.243 li
27.5 153.243 mo
31.5 153.243 li
@
14.564 156.364 mo
13.9238 156.364 13.4282 156.1 13.0762 155.572 cv
12.7241 155.044 12.5479 154.308 12.5479 153.348 cv
12.5479 152.396 12.7241 151.652 13.0762 151.124 cv
13.4282 150.596 13.9238 150.324 14.564 150.324 cv
15.1958 150.324 15.6919 150.596 16.0439 151.124 cv
16.396 151.652 16.5801 152.396 16.5801 153.348 cv
16.5801 154.308 16.396 155.044 16.0439 155.572 cv
15.6919 156.1 15.1958 156.364 14.564 156.364 cv
14.564 156.364 li
cp
14.564 155.988 mo
14.9639 155.988 15.2598 155.771 15.46 155.332 cv
15.6519 154.9 15.7559 154.236 15.7559 153.348 cv
15.7559 152.468 15.6519 151.804 15.46 151.364 cv
15.2598 150.932 14.9639 150.708 14.564 150.708 cv
14.1641 150.708 13.8599 150.932 13.668 151.364 cv
13.4678 151.804 13.3721 152.468 13.3721 153.348 cv
13.3721 154.236 13.4678 154.9 13.668 155.332 cv
13.8599 155.771 14.1641 155.988 14.564 155.988 cv
ef
17.812 155.852 mo
17.812 155.708 17.8599 155.588 17.9561 155.484 cv
18.0518 155.388 18.1802 155.332 18.332 155.332 cv
18.4761 155.332 18.5962 155.388 18.7002 155.484 cv
18.7959 155.588 18.8521 155.708 18.8521 155.852 cv
18.8521 155.996 18.7959 156.124 18.7002 156.22 cv
18.5962 156.316 18.4761 156.364 18.332 156.364 cv
18.1802 156.364 18.0518 156.316 17.9561 156.22 cv
17.8599 156.124 17.812 156.004 17.812 155.852 cv
17.812 155.852 li
cp
ef
20.7241 151.82 mo
20.2842 151.82 li
20.2842 150.78 li
20.5562 150.636 20.8359 150.524 21.124 150.444 cv
21.4038 150.364 21.6841 150.324 21.9561 150.324 cv
22.564 150.324 23.0439 150.476 23.396 150.764 cv
23.748 151.06 23.9238 151.46 23.9238 151.964 cv
23.9238 152.54 23.5239 153.22 22.7241 154.012 cv
22.6602 154.076 22.6201 154.116 22.5879 154.148 cv
21.1162 155.62 li
23.5479 155.62 li
23.5479 154.9 li
24.0039 154.9 li
24.0039 156.26 li
20.2441 156.26 li
20.2441 155.836 li
22.0122 154.068 li
22.396 153.684 22.6758 153.324 22.8438 152.996 cv
23.0122 152.668 23.1001 152.324 23.1001 151.964 cv
23.1001 151.572 22.9961 151.268 22.7881 151.044 cv
22.5801 150.82 22.2998 150.708 21.9482 150.708 cv
21.5718 150.708 21.2842 150.804 21.084 150.988 cv
20.876 151.172 20.7559 151.452 20.7241 151.82 cv
20.7241 151.82 li
cp
ef
194.9 122.386 mo
190.9 122.386 li
27.5 122.386 mo
31.5 122.386 li
@
14.3242 125.404 mo
13.6841 125.404 13.188 125.14 12.8359 124.612 cv
12.4839 124.084 12.3081 123.348 12.3081 122.388 cv
12.3081 121.436 12.4839 120.692 12.8359 120.164 cv
13.188 119.636 13.6841 119.364 14.3242 119.364 cv
14.9561 119.364 15.4521 119.636 15.8042 120.164 cv
16.1563 120.692 16.3398 121.436 16.3398 122.388 cv
16.3398 123.348 16.1563 124.084 15.8042 124.612 cv
15.4521 125.14 14.9561 125.404 14.3242 125.404 cv
14.3242 125.404 li
cp
14.3242 125.028 mo
14.7241 125.028 15.02 124.812 15.2202 124.372 cv
15.4121 123.94 15.5161 123.276 15.5161 122.388 cv
15.5161 121.508 15.4121 120.844 15.2202 120.404 cv
15.02 119.972 14.7241 119.748 14.3242 119.748 cv
13.9238 119.748 13.6201 119.972 13.4282 120.404 cv
13.228 120.844 13.1318 121.508 13.1318 122.388 cv
13.1318 123.276 13.228 123.94 13.4282 124.372 cv
13.6201 124.812 13.9238 125.028 14.3242 125.028 cv
ef
17.5718 124.892 mo
17.5718 124.748 17.6201 124.628 17.7158 124.524 cv
17.812 124.428 17.9399 124.372 18.0918 124.372 cv
18.2358 124.372 18.356 124.428 18.46 124.524 cv
18.5562 124.628 18.6118 124.748 18.6118 124.892 cv
18.6118 125.036 18.5562 125.164 18.46 125.26 cv
18.356 125.355 18.2358 125.404 18.0918 125.404 cv
17.9399 125.404 17.812 125.355 17.7158 125.26 cv
17.6201 125.164 17.5718 125.044 17.5718 124.892 cv
17.5718 124.892 li
cp
ef
23.7319 125.3 mo
21.0762 125.3 li
21.0762 124.884 li
22.0122 124.884 li
22.0122 123.74 li
19.4678 123.74 li
19.4678 123.316 li
22.02 119.364 li
22.7959 119.364 li
22.7959 123.324 li
23.9082 123.324 li
23.9082 123.74 li
22.7959 123.74 li
22.7959 124.884 li
23.7319 124.884 li
23.7319 125.3 li
23.7319 125.3 li
cp
22.0122 123.324 mo
22.0122 120.22 li
20.02 123.324 li
22.0122 123.324 li
ef
194.9 91.5288 mo
190.9 91.5288 li
27.5 91.5288 mo
31.5 91.5288 li
@
14.3242 94.4438 mo
13.6841 94.4438 13.188 94.1802 12.8359 93.6519 cv
12.4839 93.124 12.3081 92.3882 12.3081 91.4277 cv
12.3081 90.4761 12.4839 89.7319 12.8359 89.2041 cv
13.188 88.6758 13.6841 88.4038 14.3242 88.4038 cv
14.9561 88.4038 15.4521 88.6758 15.8042 89.2041 cv
16.1563 89.7319 16.3398 90.4761 16.3398 91.4277 cv
16.3398 92.3882 16.1563 93.124 15.8042 93.6519 cv
15.4521 94.1802 14.9561 94.4438 14.3242 94.4438 cv
14.3242 94.4438 li
cp
14.3242 94.0679 mo
14.7241 94.0679 15.02 93.8521 15.2202 93.4121 cv
15.4121 92.98 15.5161 92.3159 15.5161 91.4277 cv
15.5161 90.5479 15.4121 89.8838 15.2202 89.4438 cv
15.02 89.0117 14.7241 88.7881 14.3242 88.7881 cv
13.9238 88.7881 13.6201 89.0117 13.4282 89.4438 cv
13.228 89.8838 13.1318 90.5479 13.1318 91.4277 cv
13.1318 92.3159 13.228 92.98 13.4282 93.4121 cv
13.6201 93.8521 13.9238 94.0679 14.3242 94.0679 cv
ef
17.5718 93.9321 mo
17.5718 93.7881 17.6201 93.668 17.7158 93.564 cv
17.812 93.4678 17.9399 93.4121 18.0918 93.4121 cv
18.2358 93.4121 18.356 93.4678 18.46 93.564 cv
18.5562 93.668 18.6118 93.7881 18.6118 93.9321 cv
18.6118 94.0762 18.5562 94.2041 18.46 94.2998 cv
18.356 94.396 18.2358 94.4438 18.0918 94.4438 cv
17.9399 94.4438 17.812 94.396 17.7158 94.2998 cv
17.6201 94.2041 17.5718 94.084 17.5718 93.9321 cv
17.5718 93.9321 li
cp
ef
20.8042 91.1318 mo
20.98 90.9399 21.1802 90.7881 21.4038 90.6919 cv
21.6279 90.5962 21.876 90.5479 22.1641 90.5479 cv
22.7402 90.5479 23.2041 90.7241 23.54 91.0762 cv
23.876 91.4277 24.0439 91.8999 24.0439 92.5 cv
24.0439 93.0918 23.8599 93.564 23.5 93.916 cv
23.1318 94.2681 22.6519 94.4438 22.0439 94.4438 cv
21.3882 94.4438 20.876 94.2041 20.5239 93.7158 cv
20.1719 93.228 19.9961 92.5239 19.9961 91.6118 cv
19.9961 90.5962 20.2041 89.8037 20.6201 89.2441 cv
21.0361 88.6841 21.6279 88.4038 22.396 88.4038 cv
22.604 88.4038 22.8198 88.4277 23.0439 88.46 cv
23.2681 88.5 23.5 88.5562 23.7402 88.6357 cv
23.7402 89.5962 li
23.2998 89.5962 li
23.2681 89.3398 23.1641 89.1401 22.9961 88.9961 cv
22.8281 88.8599 22.604 88.7881 22.3159 88.7881 cv
21.8042 88.7881 21.4282 88.98 21.1802 89.3638 cv
20.9321 89.748 20.8042 90.3398 20.8042 91.1318 cv
20.8042 91.1318 li
cp
22.0762 94.0679 mo
22.4438 94.0679 22.7241 93.9399 22.9238 93.668 cv
23.1162 93.396 23.2202 93.0117 23.2202 92.5 cv
23.2202 91.9961 23.1162 91.6118 22.9238 91.3398 cv
22.7241 91.0679 22.4438 90.9321 22.0762 90.9321 cv
21.7002 90.9321 21.4121 91.0679 21.2202 91.3242 cv
21.0278 91.5879 20.9321 91.9639 20.9321 92.4521 cv
20.9321 92.9722 21.0278 93.3721 21.228 93.6519 cv
21.4199 93.9321 21.708 94.0679 22.0762 94.0679 cv
ef
194.9 60.6709 mo
190.9 60.6709 li
27.5 60.6709 mo
31.5 60.6709 li
@
14.3242 63.7241 mo
13.6841 63.7241 13.188 63.46 12.8359 62.9321 cv
12.4839 62.4038 12.3081 61.668 12.3081 60.708 cv
12.3081 59.7559 12.4839 59.0117 12.8359 58.4839 cv
13.188 57.9561 13.6841 57.6841 14.3242 57.6841 cv
14.9561 57.6841 15.4521 57.9561 15.8042 58.4839 cv
16.1563 59.0117 16.3398 59.7559 16.3398 60.708 cv
16.3398 61.668 16.1563 62.4038 15.8042 62.9321 cv
15.4521 63.46 14.9561 63.7241 14.3242 63.7241 cv
14.3242 63.7241 li
cp
14.3242 63.3481 mo
14.7241 63.3481 15.02 63.1318 15.2202 62.6919 cv
15.4121 62.2598 15.5161 61.5957 15.5161 60.708 cv
15.5161 59.8281 15.4121 59.1641 15.2202 58.7241 cv
15.02 58.292 14.7241 58.0679 14.3242 58.0679 cv
13.9238 58.0679 13.6201 58.292 13.4282 58.7241 cv
13.228 59.1641 13.1318 59.8281 13.1318 60.708 cv
13.1318 61.5957 13.228 62.2598 13.4282 62.6919 cv
13.6201 63.1318 13.9238 63.3481 14.3242 63.3481 cv
ef
17.5718 63.2119 mo
17.5718 63.0679 17.6201 62.9478 17.7158 62.8438 cv
17.812 62.748 17.9399 62.6919 18.0918 62.6919 cv
18.2358 62.6919 18.356 62.748 18.46 62.8438 cv
18.5562 62.9478 18.6118 63.0679 18.6118 63.2119 cv
18.6118 63.356 18.5562 63.4839 18.46 63.5801 cv
18.356 63.6758 18.2358 63.7241 18.0918 63.7241 cv
17.9399 63.7241 17.812 63.6758 17.7158 63.5801 cv
17.6201 63.4839 17.5718 63.3638 17.5718 63.2119 cv
17.5718 63.2119 li
cp
ef
23.0278 59.1958 mo
23.0278 58.8438 22.9321 58.564 22.7559 58.3638 cv
22.5718 58.1719 22.3242 58.0679 22.0039 58.0679 cv
21.6841 58.0679 21.4282 58.1719 21.252 58.3638 cv
21.0679 58.564 20.98 58.8438 20.98 59.1958 cv
20.98 59.5562 21.0679 59.8359 21.252 60.0278 cv
21.4282 60.228 21.6841 60.3242 22.0039 60.3242 cv
22.3242 60.3242 22.5718 60.228 22.7559 60.0278 cv
22.9321 59.8359 23.0278 59.5562 23.0278 59.1958 cv
23.0278 59.1958 li
cp
22.604 60.5161 mo
23.0439 60.5801 23.3882 60.7397 23.6357 61.0039 cv
23.8838 61.2759 24.0122 61.6118 24.0122 62.0278 cv
24.0122 62.5718 23.8359 62.9961 23.4922 63.2842 cv
23.1401 63.5801 22.644 63.7241 22.0039 63.7241 cv
21.356 63.7241 20.8599 63.5801 20.5161 63.2842 cv
20.1641 62.9961 19.9961 62.5718 19.9961 62.0278 cv
19.9961 61.6118 20.1162 61.2759 20.3638 61.0039 cv
20.6118 60.7397 20.9561 60.5801 21.4038 60.5161 cv
21.0039 60.4521 20.708 60.2998 20.5 60.0679 cv
20.292 59.8438 20.188 59.5479 20.188 59.1958 cv
20.188 58.7319 20.3481 58.3638 20.668 58.0918 cv
20.9878 57.8198 21.436 57.6841 22.0039 57.6841 cv
22.564 57.6841 23.0122 57.8198 23.332 58.0918 cv
23.6519 58.3638 23.8198 58.7319 23.8198 59.1958 cv
23.8198 59.5479 23.708 59.8438 23.5 60.0679 cv
23.292 60.2998 22.9878 60.4521 22.604 60.5161 cv
23.188 62.0278 mo
23.188 61.6118 23.084 61.292 22.876 61.0601 cv
22.668 60.8281 22.3721 60.708 22.0039 60.708 cv
21.6279 60.708 21.3398 60.8281 21.1318 61.0601 cv
20.9238 61.292 20.8198 61.6118 20.8198 62.0278 cv
20.8198 62.4438 20.9238 62.772 21.1318 63.0039 cv
21.3398 63.2358 21.6279 63.3481 22.0039 63.3481 cv
22.3721 63.3481 22.668 63.2358 22.876 63.0039 cv
23.084 62.772 23.188 62.4438 23.188 62.0278 cv
ef
194.9 29.814 mo
190.9 29.814 li
27.5 29.814 mo
31.5 29.814 li
@
13.396 32.6602 mo
13.396 32.2441 li
14.4121 32.2441 li
14.4121 27.396 li
13.2358 28.1558 li
13.2358 27.644 li
14.6602 26.7241 li
15.1958 26.7241 li
15.1958 32.2441 li
16.2119 32.2441 li
16.2119 32.6602 li
13.396 32.6602 li
13.396 32.6602 li
cp
ef
18.0518 32.252 mo
18.0518 32.1079 18.1001 31.9878 18.1958 31.8838 cv
18.292 31.7881 18.4199 31.7319 18.5718 31.7319 cv
18.7158 31.7319 18.8359 31.7881 18.9399 31.8838 cv
19.0361 31.9878 19.0918 32.1079 19.0918 32.252 cv
19.0918 32.396 19.0361 32.5239 18.9399 32.6201 cv
18.8359 32.7158 18.7158 32.7642 18.5718 32.7642 cv
18.4199 32.7642 18.292 32.7158 18.1958 32.6201 cv
18.1001 32.5239 18.0518 32.4038 18.0518 32.252 cv
18.0518 32.252 li
cp
ef
22.4839 32.7642 mo
21.8438 32.7642 21.3481 32.5 20.9961 31.9722 cv
20.644 31.4438 20.4678 30.708 20.4678 29.748 cv
20.4678 28.7959 20.644 28.0518 20.9961 27.5239 cv
21.3481 26.9961 21.8438 26.7241 22.4839 26.7241 cv
23.1162 26.7241 23.6118 26.9961 23.9639 27.5239 cv
24.3159 28.0518 24.5 28.7959 24.5 29.748 cv
24.5 30.708 24.3159 31.4438 23.9639 31.9722 cv
23.6118 32.5 23.1162 32.7642 22.4839 32.7642 cv
22.4839 32.7642 li
cp
22.4839 32.3882 mo
22.8838 32.3882 23.1802 32.1719 23.3799 31.7319 cv
23.5718 31.2998 23.6758 30.6357 23.6758 29.748 cv
23.6758 28.8682 23.5718 28.2041 23.3799 27.7642 cv
23.1802 27.332 22.8838 27.1079 22.4839 27.1079 cv
22.084 27.1079 21.7798 27.332 21.5879 27.7642 cv
21.3882 28.2041 21.292 28.8682 21.292 29.748 cv
21.292 30.6357 21.3882 31.2998 21.5879 31.7319 cv
21.7798 32.1719 22.084 32.3882 22.4839 32.3882 cv
ef
1.5 lw
2 lc
27.5 184.1 mo
27.5 22.1001 li
27.5 184.1 mo
194.9 184.1 li
194.9 184.1 mo
194.9 22.1001 li
27.5 22.1001 mo
194.9 22.1001 li
@
146.9 35.1938 mo
160.9 35.1938 li
.883665 .769161 0 0 cmyk
@
172.33 38.4199 mo
172.26 38.4199 172.23 38.3799 172.23 38.29 cv
172.23 38.27 172.24 38.2397 172.25 38.2002 cv
172.26 38.1602 172.27 38.1299 172.29 38.1099 cv
172.31 38.0898 172.33 38.0698 172.36 38.0698 cv
173 38.0698 173.37 37.8701 173.47 37.46 cv
174.83 31.9897 li
174.64 31.96 174.35 31.9399 173.95 31.9399 cv
173.88 31.9399 173.85 31.8999 173.85 31.8101 cv
173.85 31.79 173.86 31.7598 173.87 31.7197 cv
173.88 31.6802 173.89 31.6499 173.91 31.6299 cv
173.93 31.6099 173.95 31.5898 173.98 31.5898 cv
175.71 31.5898 li
175.75 31.5898 175.78 31.6099 175.8 31.6499 cv
178.02 36.9399 li
179.13 32.5098 li
179.14 32.4399 179.15 32.3901 179.15 32.3599 cv
179.15 32.0801 178.89 31.9399 178.38 31.9399 cv
178.31 31.9399 178.28 31.8999 178.28 31.8101 cv
178.3 31.73 178.32 31.6699 178.33 31.6401 cv
178.34 31.6099 178.38 31.5898 178.45 31.5898 cv
180.59 31.5898 li
180.65 31.5898 180.69 31.6401 180.69 31.7197 cv
180.68 31.7397 180.67 31.77 180.66 31.8101 cv
180.65 31.8501 180.64 31.8901 180.62 31.9102 cv
180.6 31.9302 180.58 31.9399 180.56 31.9399 cv
179.92 31.9399 179.55 32.1499 179.45 32.5498 cv
178.01 38.3301 li
177.99 38.3901 177.95 38.4199 177.91 38.4199 cv
177.79 38.4199 li
177.74 38.4199 177.71 38.3999 177.7 38.3501 cv
175.15 32.2998 li
175.13 32.2397 li
175.11 32.23 175.11 32.2197 175.11 32.21 cv
173.79 37.5 li
173.78 37.52 173.77 37.5498 173.77 37.5698 cv
173.77 37.5898 173.76 37.6201 173.76 37.6499 cv
173.76 37.8301 173.83 37.9399 173.98 37.9897 cv
174.13 38.0498 174.32 38.0698 174.54 38.0698 cv
174.6 38.0698 174.64 38.1201 174.64 38.2002 cv
174.61 38.2998 174.59 38.3599 174.58 38.3799 cv
174.56 38.4102 174.53 38.4199 174.47 38.4199 cv
172.33 38.4199 li
172.33 38.4199 li
cp
0 0 0 1 cmyk
ef
181.77 41.0322 mo
182.029 41.0322 182.225 40.8989 182.351 40.6328 cv
182.477 40.3672 182.554 40.0728 182.582 39.751 cv
182.61 39.4287 182.631 39.0791 182.631 38.7148 cv
182.631 38.3647 182.61 38.043 182.582 37.749 cv
182.554 37.4551 182.477 37.1821 182.351 36.9438 cv
182.225 36.7061 182.029 36.5801 181.77 36.5801 cv
181.504 36.5801 181.308 36.7061 181.182 36.9438 cv
181.056 37.1821 180.972 37.4551 180.944 37.749 cv
180.916 38.043 180.902 38.3647 180.902 38.7148 cv
180.902 38.981 180.902 39.2261 180.916 39.4502 cv
180.93 39.6812 180.965 39.9189 181.021 40.1641 cv
181.077 40.4092 181.161 40.6118 181.287 40.7798 cv
181.406 40.9478 181.567 41.0322 181.77 41.0322 cv
181.77 41.0322 li
cp
181.77 41.207 mo
181.196 41.207 180.804 40.9761 180.601 40.5068 cv
180.391 40.0381 180.293 39.478 180.293 38.8271 cv
180.293 38.4209 180.328 38.043 180.405 37.686 cv
180.475 37.3291 180.622 37.0278 180.846 36.7759 cv
181.063 36.5239 181.371 36.3979 181.77 36.3979 cv
182.078 36.3979 182.33 36.4751 182.526 36.6221 cv
182.722 36.7759 182.869 36.9648 182.974 37.2031 cv
183.072 37.4409 183.142 37.7002 183.184 37.9731 cv
183.219 38.2461 183.24 38.5332 183.24 38.8271 cv
183.24 39.2329 183.198 39.604 183.128 39.9541 cv
183.051 40.3037 182.904 40.605 182.688 40.8428 cv
182.47 41.0811 182.162 41.207 181.77 41.207 cv
ef
0 lc
[6 6 ] 0 dsh
146.9 50.7871 mo
160.9 50.7871 li
.873045 .242161 1 .129244 cmyk
@
172.32 53.8901 mo
172.32 53.8701 172.32 53.8398 172.34 53.7998 cv
172.35 53.7598 172.36 53.73 172.38 53.71 cv
172.4 53.6899 172.42 53.6699 172.46 53.6699 cv
173.03 53.6699 173.41 53.6602 173.6 53.6201 cv
173.78 53.5801 173.88 53.48 173.92 53.3301 cv
175.29 47.8398 li
175.31 47.7598 175.33 47.6899 175.33 47.6201 cv
175.33 47.5698 175.21 47.54 174.98 47.54 cv
174.4 47.54 li
173.95 47.54 173.6 47.6099 173.36 47.75 cv
173.12 47.8901 172.94 48.0698 172.83 48.29 cv
172.71 48.5098 172.57 48.8799 172.39 49.3901 cv
172.37 49.4502 172.33 49.48 172.29 49.48 cv
172.2 49.48 li
172.13 49.48 172.1 49.4399 172.1 49.3501 cv
172.81 47.2798 li
172.82 47.2197 172.85 47.1899 172.91 47.1899 cv
178.82 47.1899 li
178.88 47.1899 178.92 47.2397 178.92 47.3198 cv
178.59 49.3901 li
178.59 49.4102 178.57 49.4302 178.55 49.4502 cv
178.53 49.4697 178.51 49.48 178.49 49.48 cv
178.4 49.48 li
178.33 49.48 178.3 49.4399 178.3 49.3501 cv
178.37 48.8799 178.41 48.5498 178.41 48.3501 cv
178.41 48.1201 178.36 47.9399 178.26 47.8198 cv
178.16 47.7002 178.03 47.6299 177.88 47.5898 cv
177.72 47.5601 177.52 47.54 177.27 47.54 cv
176.68 47.54 li
176.5 47.54 176.38 47.5601 176.32 47.5898 cv
176.26 47.6299 176.2 47.7197 176.16 47.8799 cv
174.79 53.3701 li
174.78 53.3901 174.78 53.3999 174.78 53.4102 cv
174.78 53.4302 174.77 53.4399 174.77 53.46 cv
174.77 53.5498 174.82 53.6001 174.92 53.6201 cv
175.09 53.6602 175.46 53.6699 176.03 53.6699 cv
176.09 53.6699 176.13 53.7197 176.13 53.7998 cv
176.1 53.8999 176.08 53.96 176.07 53.98 cv
176.05 54.0098 176.02 54.02 175.96 54.02 cv
172.42 54.02 li
172.35 54.02 172.32 53.98 172.32 53.8901 cv
172.32 53.8901 li
cp
0 0 0 1 cmyk
ef
178.614 54.875 mo
178.88 54.875 179.132 54.8682 179.363 54.8398 cv
179.594 54.812 179.804 54.749 179.993 54.6509 cv
180.175 54.5527 180.273 54.3921 180.273 54.1748 cv
180.273 54.0908 180.245 54.0142 180.196 53.9512 cv
180.147 53.8882 180.084 53.8389 180.014 53.8037 cv
179.938 53.769 179.86 53.748 179.776 53.748 cv
179.58 53.748 179.398 53.8037 179.244 53.9092 cv
179.083 54.021 178.95 54.1611 178.852 54.3291 cv
178.747 54.5039 178.67 54.686 178.614 54.875 cv
178.614 54.875 li
cp
179.027 56.73 mo
178.803 56.73 178.607 56.6738 178.439 56.562 cv
178.271 56.4502 178.145 56.2891 178.061 56.0928 cv
177.97 55.897 177.928 55.6938 177.928 55.4697 cv
177.928 55.1411 178.012 54.8262 178.18 54.5322 cv
178.348 54.2378 178.572 54.0068 178.859 53.832 cv
179.146 53.6567 179.454 53.5659 179.783 53.5659 cv
179.979 53.5659 180.154 53.6221 180.308 53.7271 cv
180.455 53.832 180.532 53.979 180.532 54.168 cv
180.532 54.4409 180.42 54.644 180.21 54.77 cv
179.993 54.9028 179.748 54.9868 179.482 55.0151 cv
179.216 55.043 178.915 55.0571 178.593 55.0571 cv
178.572 55.0571 li
178.495 55.3369 178.46 55.5752 178.46 55.771 cv
178.46 55.981 178.502 56.1631 178.6 56.3169 cv
178.698 56.478 178.845 56.5552 179.041 56.5552 cv
179.321 56.5552 179.587 56.4922 179.846 56.3662 cv
180.098 56.2397 180.308 56.0581 180.469 55.834 cv
180.483 55.8198 180.497 55.813 180.525 55.813 cv
180.546 55.813 180.567 55.8271 180.595 55.855 cv
180.616 55.8828 180.63 55.9038 180.63 55.9248 cv
180.63 55.9458 180.623 55.96 180.616 55.9668 cv
180.448 56.2051 180.217 56.394 179.93 56.5269 cv
179.636 56.6602 179.335 56.73 179.027 56.73 cv
ef
182.73 56.6318 mo
182.989 56.6318 183.185 56.499 183.311 56.2329 cv
183.438 55.9668 183.514 55.6729 183.542 55.3511 cv
183.57 55.0288 183.591 54.6787 183.591 54.3149 cv
183.591 53.9648 183.57 53.6431 183.542 53.3491 cv
183.514 53.0552 183.438 52.7822 183.311 52.5439 cv
183.185 52.3062 182.989 52.1802 182.73 52.1802 cv
182.464 52.1802 182.268 52.3062 182.142 52.5439 cv
182.016 52.7822 181.932 53.0552 181.904 53.3491 cv
181.876 53.6431 181.862 53.9648 181.862 54.3149 cv
181.862 54.5811 181.862 54.8262 181.876 55.0498 cv
181.89 55.2808 181.925 55.519 181.981 55.7642 cv
182.037 56.0088 182.121 56.2119 182.247 56.3799 cv
182.366 56.5479 182.527 56.6318 182.73 56.6318 cv
182.73 56.6318 li
cp
182.73 56.8071 mo
182.156 56.8071 181.764 56.5762 181.561 56.1069 cv
181.351 55.6382 181.253 55.0781 181.253 54.4268 cv
181.253 54.021 181.288 53.6431 181.365 53.2861 cv
181.435 52.9287 181.582 52.6279 181.806 52.376 cv
182.023 52.124 182.331 51.998 182.73 51.998 cv
183.038 51.998 183.29 52.0752 183.486 52.2222 cv
183.682 52.376 183.829 52.5649 183.934 52.8027 cv
184.032 53.041 184.102 53.2998 184.144 53.5728 cv
184.179 53.8462 184.2 54.1328 184.2 54.4268 cv
184.2 54.833 184.158 55.2041 184.088 55.5537 cv
184.011 55.9038 183.864 56.2051 183.647 56.4429 cv
183.43 56.6812 183.122 56.8071 182.73 56.8071 cv
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 16.0.0%%For: (Troy Carter) ()%%Title: (equilibrium_profiles.eps)%%CreationDate: 8/6/12 12:01 PM%%Canvassize: 16383%AI9_DataStream%Gb!9skB\U>cS59f!9X>R84\BtbbS1db=Z"'#t[\)$3:3=htMSK]Z:"C/i0*A:tAk%^,?"Oa-("*Q=\67Vi0r7en_&R?>TXc,q3'o%UgiJMR]IfX8P>l.4,q^8Da9_2qrR"AhWg_TgFr5+YLIHu]=jJ?l/,YpH!#EK-ai#X^"I6%-Wt9:?9T%e_QNl?D)CS/G5&&g:Wc:1%6D1DB(4R7If;"tAkB_=uBp]6ZeONO!71\[8C@OB;o8gLj!'.+Sq`l)CKK@PX_s;`5%Y/0_\tmF:f>q0NWKJotU+#NMP%6pQAo:E1%mu:Yg>O+6%Xo!BuZeOnqe[hBdJ0s=JoD2Od=mOZG;cH?7l:KM]nC.3Y8jZ0"lgj*;I-?k'TD?.Bb;_Vcs3mqHB-k)eYJ&N!PZ<ET%s/b`TcurR@,`-uu-`92RHM=/akQ@*'<u0oJ@JdIhK_"j6eRjfFM#8V^T<uCZXnuGn6Vk1\5KJJBUrb>V?Q@SpX^d./'Z"dehE#R^%&h95J>u'Mk$S%??3M4O]>#I(Gom%39Wf9la5?Ys-%9C>]cU7/l5^si!)t/d;$7hHmh!R(,SNb=L8X"UbWj8Mk^W$5NF@)2grHaCL%%C/tp'P'YT*hH43k8tgaX]bi&V3p=n'5/hH9XMsMILVBRRL(#*hdl97I_D(=9CP_Wn^B2]e$AJL<8p_S`P8F1:K8.%W[`F#XlA+-%/]5A%L4R)J"%sL9Q84D6Q.K_Q=N7YNN!97ND9KdoQA)1))h)7q;@-!]9)*"tKMP2d/5r\1dq[DenEjs*T3&)c*D/&_QdS5Ud\lje%J$,f.1k&m_C_M8,.;TZ9.=Hq&_G;_8/](;"2s1<l(YaV8p^:;ZT3)cg'<N-VKV-n7r/4Bf'B5hCV"h2/[L5=)9XTa3hEOOkjY>j@%jV!$j2egGaoosVl)o[i%o02.[kW^VPmDD`$M=r'/217r@%0'ccC`i+Saqab*[LYUm(Uf@t5CQMQ&V?WW$JU?.Zko^+:qfj*Lloj\%;U4BZpDKfgEZIeM^2^m6Q;d(2E_7.e95E\g78*-"=9`!M,njL<Dpqb9Vq=32`)9RKZ$hiaoNhC51>'0+RS,Qj*QgC"JP%kf@4j'8%g5p>).9%(m?LU.TI&GIkY#DutDb)nW&`,E<4-nmYC$kP@qOIP[PZ,i&dS0P.nqP^l-3'qA3nd?d8Yio*3h"%`jN'NMDD([Dr8HCj%$uo!cHC8j-km+#?Et[AR\A;n@oQ%UO?M^NM9B72oV,gH*rtL/NEW4C93-*tBk:ce#8F&<j3.L2-I%L=\rmH:n8Um3Va)/,3K`Z\^%r2'FN7Jbd79E-<djYDNLJ*F^?L&Q8pdXRGYO4n[A48boQ8q6G>oImRId7Tj6/Q\(,"$Vut[9>9UAR2#0j4hj4r(m7XrSRM-rUqrF%j+!i=mD`EcX(AhtmAe#^ajLo;AQb><^\MoXX=CeZ2=[/@7#AjkYrm<<XJkcp/?usqo:)&12>fphNmHW4r'h[=%f78LX:)dOBCR@6%EqiB`l3c*0ER:;VQ4;N,'2-]83kAeI:*'>OqXbE>5[,Y&VY(Zt8VT^8VTPaS<""t+=f]oX;!pmt'tPTrYq5.@Ff&'\doWT($GMN"%FEg;#**;]eaf0o5(Z3FU"\U9[/?FcV=@')u/X-;OoK?PmW`XpPR]_k&L-n-%1-$]pBj*0;YNeO[h^H9!64fG^23`#NcNA7Z<W%p+%KWS4h"%4V1b7$>#=C7??!RCaTP1haX;F.jO4D4<M2Q)G6pW5Xr5k#AgWlT$T"%kSfc/3SNKbhRQ78p,Q!=!3Fa%Ya9Eqm)&MnB-s%ZB/"2+eVTk[0?+lU^Jb-!6S[i\3)c/&cRuW$MK@W;7b:?PmX"$1B7fKWF?sjN*?2reSY-uo%_&QhSZpHnfIKk`R-c\!YSe4RXgpD%rg*+Sl<-o0Bs?s8FR1k7PmV5`DPErl'dgC:[Yr90m;431L9E6:-5F1><MK.1/bh6/Rh^ZXTlNH$R(mQ:^Src`1.i9r$Fb;f[%lB_%`V_C;5^8=#"knTIbK)KV&OJP/9G+0pl_?9kSoYs<#n=s#_FlZTQW77f8C'*(6EPm'VcEomRc*^6;B[fi]<%$MZlj7DfgS3GH!cn+%ROMQXKCG't$aGp9,PD?+=&nod!3r].,Zk;0p,m&_ipU#ZPHhJalNNa`hc(Id,&UK,Wm/".)]^DW%3hpY:g+.,7A<4M$HiJ"l<GCk%'(QY!<(^IK+nb,b;P9#6V%uWO#1SLX_JC#FUe2o_FAkfGR>>)+mAUYd=[B2>IVW%T:9r:_XAbFiXQ$R6`%hpQ;$n"%TejL4iAYMX%($%=$.)7D>n?g-A>*6>5@VMq"Y@H3'C59#G3j-P(YC7'Denba0_K02^'TH9+nm9/7;,f$UFKuhT2ekq3Z!/^3)8\1"G.:!r%B2Db%,a2(:P`]'eMVkiBgmV:"HKAfTf5JN=M:ulG:S(1C/pJJ>Y67RpDq!8[-]"n3,aHu3g-_hg<:E+e59-hI8L5st)!2I];"-q(e67*D%<7,Anj>efQp6amfl1`!`;.3rP^.0_0nJsm42=cJ;J.%6ds&Z!S/qA!'D36s,qmAhsaA\Z+-38$$m,rgNJEWn/TH9/-XW1,8@BrU"%-iqhaWKrY/19JA1rCIG5.dtFj<=5[u8nB2RU#0]_e#l!u2RDVVC#lfuD&V+LORod4@T20IHUd?2e^iB9bnZN(VW/$6JioNN0`,*c%&k"TV^k;+FZ%UV.jYDl\SuIY:3V^,a9^Oig$[I>Pae_OJn5,1:\&%,gM\Q">ZAPEk7XHK'^8V:6?[uoq!+4D=at8CPL,.irGa]DS%OrjEsa[dnLKM'?nK19I3fFpf0*&(]518U.p"5Xq/C%OQN$;s6A/o*kA;9DH:.nE;ii`G.7JLuudoLq%i*NDeJd=XnrXl-3Jp%(O$%n^cnBd1Y-0`oU8^]rVeUU5$M>htGWhL[FZ,\1AdE?07BU[k,#$OqCfis"i!LQ<.@gEu]R/SD?01::Z+*Kjt8Y]oZ8Xce^3L5/Ae$%r,]?/cU/^i`&U-"iq'0be^&Z]k*%Ko@Sf"=SW`D]mePMnP!S3B\AP9SU2b#)+VMYd#]sScNWH*6Sl83HHC1LI?c2l8q@@H\RD&Ji%H"#_4c9*rID6[&>/c9Hl2Z/&h6H9R74,Oa!\!9'>a%ol6Er?LJM_g9a-h1q:HTi9:(^?@!C5teQ4ZfZV4B<*f5Lm#9s8V!U2R<je%[+Ot07o"kQa!KK+#mR6@akOIum@gPUG3[?3-^8#655.l&/fHJ'nNpE:8,a@$kZD"0`M7QQ=ehf--ATgf&UJ,\J\]rWk,#Ckbj2O+%;l_BGiOl@mr&Ki-J@$$$SWPc.(8]fH!njq:+,</G*16"!Dkg6gq<^kNm'p2t>3-Ag7mX+BCZeP3YtVRjZr=cXg.e4")`69LQ0eK^%Drr?P[lCj:oUFFI9;:"aZ&Wm^`9@ue"/H?d*:UKG/PgA*0%4hEPN0%)V)c&ZPYPd`N)uA:[.\U<onk8soNS<nKe(k?^6X)nD)^5<%oU5ZK4?9J:Il_[OR/DCqC.%5T$eK,,8*#O&GgcM@8))kn:M700ekT`_YO1M!o!88CDg*0#;h%L_5Q?9Vo>qEo(Q^cJem>!NphcA>%ef(+TaQfeM>.:*!&)g7RPQ)[$G.IV'mX@1";eW$#:VGHL#h@Xj>3e'A]@Q?XY54qsCXp!f!k2r/B`%s.C;;9rD?grPdX&CS!ToJF%8.cAaL]YGg(l2r*O(>LuDnYl2]'3!Li=n2[^9\V\g[?JIh4NOoo"<drg=<bVfsNUiJR\HT4)g^O(L"j2arinq<ksWmd-^j?LBU;*%@t9@72qMB924KU"DQWNXGR6\JnD)#OT+*#Is*d,?RuQ9k,>SC%Ut4ol?CLPnIs_.j=7"4,<aH_Qj?h?UZHV!OCAjK[K>quAenrn]%[1>@WXjMFufg#@Jo]m!>g0YlU-'g[jW-.C$)?#UG.=#N,W'>mu(QJ=_EjXB+kS)bOeGm!\mj3#OXnI6Jj@=5:OgtXJ>Pi..n)onF%UY8d4\Wk1+282,e4]XsC*[`4A'9\luWWD$70mHn>IHdbni#AQOa1q+R&&.rBd!q4aPWVXrhFksl!+29D8G00C*4<kgM.@+[K>43.%cuc0+".=.,CY#3*#jj"cZ)RD6AL"=kqO`FZMqc?HihU7O_6FHu)$a!/fE8igOohEN\h)6!<%G2As,V`)+qHB'E^hS:<C`UC`uP*g%Jq:ZT0?B,VpL!Jq9'1<U;$J_r8\68<9p,ahf)#t='drAYlHGDf*]FEA](K6XN.pn,Y0cRerXD8*9$i"UTd=cXoigs_%<M\3R3?qQ%kjCAgJo[X<C"E8HXE?bl"#OoAm996A.>-PcZl1Ub=-.[b^j@hhH9dD1'EdQ.iKQZJ"!_\oF>0?<S*00;MNq"XddAuS>k1j&'j5h;%pDEcbfu@A%K*_HYNt]a5`M%::IG.C>N3h87hhV2)G/12$PJ+uf:Qrl(NIphkQ)nu&]\j8jqHOW(KCH?r*Ur)m0E3BV]8]mjm=,rj%\tUWcBO+1Uq:tn)>P,U5YI@u,mFGWY8OM*04hRRA&2:>e5et1@2?C+WJm@l0>l77&ej$S!RE[,4kn6gUPA\'8mt,>"?N4r9$nesN%7^LKTrKiY+XH\u87(I,_(3Z`CbpKXm&mRuk8pEs8:mJ\UB/Bn^-11b]4Dh`\oXCBW8Q"T,J]nHPHHI+u9=DD7PrnELCkB,idj*%:%CG5?Ilb-FC<;N9ejst8&dXf#AJW4%IqR+l^.rWRrOu,$jnX:-[gLpJRXe<<_jaf(ue2UlF%*.2EN.^)b'=Lm>gTS'jQURd-75`oF%CE^d"c$$]L84AaGOg:!X$nN;a1.XElA130VLCoFR'55ojbEO6/\qN,<?joB,R#B5j9mV0Pe[^ot8oL]cCmMm$@g1E03jG>f6^2OF%GArl)DXGqN>hg+M>P.jN%NfIL"0?8,l8uE*=3j_6<U5'Z9NeRJmX%RV^_`oA4NIKUBk3Vo1'j8o/g&$I*[V7ZrH@b=#$uZ.DQ>IE%a[Yi\mRW+QX9QC2'!Tl3rc4/uY5Qgf2Hoca*t2tuP2PB.5O/@#b/m`QdsSUX0;%_8N"g-FRgCRukd<.e!J[4-8HE7crV!JpgA(J9%3[k1*ISV61OfI+<PJO#d'\jEn/o[aMXMZ<AZ]gb/!?7@bf,Mapr=1Y6qOQEliP?*;)<dPU8,i7`fn.8f5\@Lqr6si1'Ks%B>f?j2%(J;Ag1n(URDKNBJo;DB2[oFk5gZgs$;sX-XKgAooqG5?o8d*uY.G#1P4C3!ks*=%>g9#Z0`\]uncm0.a$njUa_&TjgcOHW'Ef@GX%E.B-2V&e>TZ1N^\InWVYOdq6Xr^I?U@3!**fW5$*.Jh1OYuMg&rZ@G>Cu3?2YM]?U5ASC?SfFp*C)H-Na9JSF>]K]-H?"[Wj8V!4%r#]Rp=1qsfKe=:1%Vna!VR]&18'6P&e2(@\\YBm';`q0l>iqY>R6Os->)hAD?kI"?VP_3u'pD#jeV)44/pGichB:)H,No!cNQXep%5sl2Ch%cj/H#)m`fr=/Ih%<5>43)Lo.(9"\I)J&SbZ_uCim\RY^q?Ma@j"P?L?"m>H/*8Mf)L(tIqcAuLO5rQkk54R+efS*9jt6Y%bo*^+m:o,W>PihUfB2[F]WT4'JpLH-RF?;'I'*?C^"^@'G;&fHQY*"VHthWVnD@ccrXRs?ImXjcgYs_h10[r]LFeQ8T5..K['Y_X%H"hJ0l`^;EFu"9km^jP3+o)+QjO)c=Eki[Ns!ft63G0bbrFnK/8XjM?-4a>SglgYKhQ6mPH?H<u)dO*=mS-o=1B+8R[lc%2>ALqL%N386,g3[*R32giEV0\bnc80RbV\!ScTiYK.g1rq5\m,lY)iN*Pr-3,O^M507Y.:i$],$<KhS27\0YGtDgM_#`B;,ec9GLa$S>5!o%*n4YCjZgG)\c#FET046?&6A]Qq@*81:)Mqn%e8NDopaW9=sN8A/iNl#!afI!SWP_R4.XtV4IMlXS#FVJm)l<BCVLJ2eX]I%'oV8W%.)W9qDO$L&NeMNRBtX.(puiDql9bj?a_"YS#&`/:2Shf$/(njIaH^XWd3ZC7qRdkA,qUVSBEi"Ld/qR<r\n!JJe@H@G66@ToPC2k%]Qgq%?:\U16re(I;B&K$VjO[:8L^r1(2Z!;lb1;b93?^CU5[h_mKaY+,:V8oCNu0`JurUF)QMG5gXR>D<]@WneApbci!Vj&pG#>]%d2"9I&(AjLbRKaq-*VLc2;@OWn7Wf.\IC+b#,D#b]DFfdgd=\VfEuGZ/.eoOfgt(3Ac<;>L>Yrm>T;[F%4q6LF;oQ[S`\,1iDtf$%H"hPP9Q-=_pkLt(*Ss!DVe3%eQk-9'"RTa8K'<r-=]'>Y9D*7&6nHG+`MoDO'I1mb+S,J#hc?STU5'6#@,c1>^hnuR`o@)2?FoOL%J0O1m28EE6:ol0`<#L?'(U9TJh-NK6\igC5G_o;-0/RB>=^d8Gi<D;Q`$fGc&YlEm7Z\D![JJS.B!f[TANJYVFt:_l@Bn\81Y5,S%W/l8Od!t<m%PEujDP40OdF#XDX8ZFH[ap*G_H@EEYJ"VK_/_6b[%cl$b#hlm?IoVRs'E/.JS0)T,IiD\l@#1>[=C0)&V7@#9BCfm%r-pe2f*kB=Jri<uY1JpdMebU)hZKDJTQ4i_F;?'QqU6l`QQ`+s_QXf4&f4-])Q@DtK*o%K0+h6='^/!X3%=@n_e0g+Q8Un08%TWm%D<q]Q,=nfCT@QYgPgD1%m`m+i^q`4lWO5oWOZRgE8kKP])SCG(mS`0kH^7D*Y!4:,D4!r1-LW^&^Q21Yk*,fn""%Yfi6;Q\?]Yd)%AT2rAL.Hp=n-I.Zf>!piNe(-5h>aF3X7l6d]"j43PA,#2>^'5S:E'882c&_p\,)"IJ9+cgVg\nmVadRe0=\n8Ft)<$Ro[eG$L]M9%dJhHej0e<mB-gc!-U*c2Zq1*"IDL6*5RWMB9!YZ?[4q(+`.0oiE;)]8V3td\MUY_E:fN:*U/#!f-u[LC[WUO[D!Q\Re@BFIo$5N=%>(j'Vk@hFsZ7&mKfi.Oq'2]^m,ro*g3K)31/3JGY[)R?LU1FRMb$?Qc<O>F^?Es@>iC@mc#3G#k\+Y^.)3WB6[r+TNet=Z:+Ha0X%+($4=#e_n%0i;\?77H*kJSTcK(RiUT3_#CE'jpXSf:9P2m]FN##2PH$W;3bf%cJT7@s3R4ddF9;Qg8<LZ.?l'r@,LkH23toEf5^r%Mjkf:'u)3Og927AIdkP[7NSY2S*0`Zq9@XmgmL?3YEe"@lOE`jZFG?uI&,oTSb:KQDXK?D:+^@2Y,19ADQM@97fseq]k(-#5:^BG%V8K?SC0<SsUtkfhL7m-sV>4J%:[&l$ETKu5oD!#e/Xi\Rg_aBWCWfN(G5es#]fJrcS]?%*Om[BOet3=CSYNm#IB0hcm]?B4<nfRe%AYj`t,F*2IfB:]W_YT2':rp*_(3O6!V?+_Nj18MJ[<25KRp%_:c.(`Gp'b/:,-6r2H@47Ao8V(.C;+%k@+48WVJ/]$poOgTg_E@9%2QWI;5>HhDC!re`l@,n;b\^%=4b^2PT"1t>:@C<\cg@V%3dY/pbrFp0];rWgmTn;sQZCdtAZEWqGVacEDZ.^g!6a]09K7%YoNV((%['5fq&'UZbNU>5sdh)_^eil64Kctm.hEQIZH'%U*R+pq&qY*<H$:O_ugmj$@h3i.EkAGm6Y,-#_e!JZ6J0hG%^XhR+<_BiJ5tDen%?aR3PUrN'!jirqU6&JbM>4)/UWYUTS5bq?/5NYX4>s/K\.TPA4G!_>:.b]$!BOsG5[Hgn.Hb4VFgsYK^Ki0s]`]hr,^-8+b>%'rt%k2lqIJq`ltg:b^Y&>UG3cP:Z-hKJA2QR@T2hChLT^"1M9/-dEem-H%H*jcDTj%*@E%R^*@I5'c`@&-;XL$<O9kKlM`83:L3e"'r*%%-c'7dZSO#O_XL>MlY*\UHkVReXE(#HdIY`])SfJK%-/_l__B6K(Sn:Wj^7"*Mh$t!U]U)qWpNHj!#'!p+Q"m[&(+PW@[Aab2$^\%V)2-BM0*ZRCT3)&(OU)UH2QZjRdYK`*pas(1SiXG),EosH8^-1+9`VrgNle_%_dDRK9>RsrKmiA04l?Tj(<]e'PSc)TDe1/"h.LD%?'NVE^41`sm]-j'e`p`r&F'".A(O!RrSg:nG%dC1Kcr$@QdUL$N:^M'qY^#+@5S<>=I@9eoj2<90/N:A:)MDHl1aa\0a)3%nb8@&%/J4e8[(!.r9BQhZ8H2AS*u%)(hAOaim:e9\.EL/kd7*):-%3-7aP_i/X2e&4mJ:GW4UgSKoMdh!';R$d?<t7+Vlom2G(Ym"]1:&n%%-b)ZmnoNBCS@J#Up[3$[Y#:-Mm_&,pI?f,Lj$mqoQWOjrD:&Y!i5-fmmse5^0Y8>5HP)"de);]e/L]2#E)m2]5@^j.TMLH[h7l1%h\7+`o9#p"pTh8+q3.XG2`$^F#:\<d>YkBeHX1/_8Y'!5mCQ)$I<"(*\j`DT5>i^h[=5fq"%`/a*i(6]Gl0jh@_]#Bb'Me<VnHF4%Ue!Et%M%8]3Ulgi8"0p*da$<58URQ1^J`3Hle1mZ*g)_[fp)@0eHp\/Rg5eCd-G+9]-%N;NKC'V];VeO=6O__Y^Ec0*Gh\^H0R?X%2k/73l)#6iZlgC%mMk5$+s$0c,TWb2Rpg5:UuRfte$,a2dTPh@ms43n0Xj^'g#[<*jR(^'FM;mb$%&[F(THk>nC+e0"T%\Qb-U8[%9=6!M?DQ0:;n&L[dllsdI<dX8l%/JR`[Yqfq4Aa#^Pti7m-PJNAibD`p@ODfIs&*UH0TA8/hc&\H!:W$qp(?G/lpN,Vd%TEnS!V=%II':)Z4$PUaR`S)[[r`$OJgFREcLfH)YWeshZ#I@(Ws"L[X@_H1d^&JSX6P[m*>l#eK7uXX)%['0TITqPLSCc*q?3b0U'WF\9,;`%87d"R2X")Cj\u$#e=*i?-hsZ!Ig6a$9mQaRpABAZD>!3oGZn9W3+Xm0Y\4uHbj5(6Z/%L9en\d/P8:$-Q+M@)=\I*%N**o6G>h7T%jna%plM5&kRS5?W2jLd%^nb_ER!gEKMRi[SGjVTM?@,:'OW'ME'/34_F2T$TqkDQ1Mb`lpZ(&9kZS_u/aK$C<h#ZR4[V!igVfRjj%kBYFiW<u=B<_co>\iZb4Xe.09aj0FMCYVFe*3&qBOBtSfK99p#=5c]JWinDn;AdAhZr6S0paZIr36'!u_cdo*V[0*QbEcr!J"<.$%G*$lo.uQP0WTlfbmV#ZD#HJj/G14FeWJlX44.Ag;*OOXp-TN-'PXo!a;OC1qbi(/kWHN\_Ak=1M(PBJe:o%Xi&;h07%^-@?BT!78%4WLGHo]mtH.Jb9_lqO;',C']5lRuVK:9Q3'o]-sTo9JN[BOP#beQ=\DG6dZ\c(E@'BJ#%dIpfc26n[#lrkLXEm^C'0^NNd+rZ=!M%S?n6qDokWgnrirkbPHqg'J)T#&bYC&Z%Z2J$DFthPM%jWLVE]>Q=uWsrLTTUP7R$*hsS#l6Z?kj;oY58Pn`6Qp,6'XC&?lmIa4hD%8+!>C3;K-_*>H4>bE_t]2N>VY"q)\p<7:,Cl**mm6[aE$Nh$r9"I<:$'_u(ZIFQGSOC\+g,.T/i7MB>L#pF#^Z:$no5@kulkfd?^%dskg\SU@[8OZ@\pqbC$aqoDn(CSC]H.SbNrq@@u?_a47qpk,mu7Qd4RGs\-&W9d8#[Jqr37pEL73$biIKjf,G;jA@HM%]Pj@Gefe%6q`gj=&b@#,tiQJVljNK5+:q"mK;VWM.peN=d=U6cMD*+ZeVE*g\.&,l_TULJ_bXN5*6n`2_*I=D4q<+A=)PKT-[AQVNob+rD7eW%+^j'H#NHg2\d%Z,Ed-cq9$qS_CF,PH">jsohEQhDZp`Ws3*4RpVk]_N5O'WLfo=;T=so]XgF$?bFP(QnZtbo8.Tk=F.T3tSq)c/R%M88!=a:9(4C`:f23T&\cp%[gHN'Tt!F-C"UA,%G]D5m7_E_LXm8Z)*K^ri6qTp:=4-&fo_]otNA]mEeoA$e6elWcV<cr7mpe8@Z]%55rcWYBRKegSDVr3@J.5.ec.rZH/ii#^f0uiWg^"#-n-4!UXs_5Z^rY`=*oHbU`n>(.0O7hFcJUO@C;k$M)'(hPD35GDZ%\l]P&M%)a220RiZP`K2u:N_?Ql&T@*$\3k`/mZ)U2Bh#gUBrdEUgCGU#n0t\mS]9%X\<fpNcC(R`&T/4k?iCk5I;MmEa?8,6b2](W)\Oi6M%(b;0&M_TGV5<id)*K0._5/5a&"'iD\q@DsqmI=X@PtCX5ouj#.8A>R=R<q1:9UB-=I?hLjI:#^-@fuY?@2esMP.?tta#k,S=H9Z-%(6?B*2nhEg=/C07&8Hm2hQc)[;etWpp3jtEcpp+'_#s<>Y0QB%g+h!k%eLL/6(_'hd`NS86eNPnU-'OGPOCSiZoYP)IkVX^##G+/%K=UT@N?(IoDbI$3(o!K@"(s1q+c/1S%'fp:$,P0$X%-`;SqO+,+XE3DcOEsiK86E)7PA5X$^qrr,u$9j,!g)j5kan(,g$F+"$M-W%_$\[AnI`9_)D3,o^=Psd@m7aDjNk!Lm;UDH"qp#AWBVET!4[7/pf)-T1'W82r]e$b%7#%4qMTD\m=VhUc1F;nJlcQl[Vbir;S/>G%pZ7+gTBZR5fDAAah_JN>1Ls5j1S4!GmndF`Uk`G\Ul#C3Mq!@KA3[DT<,i_\g^9WaUR4]n^\6G4*\p;+(gU$P<i2bR6qAM3$"&#k%o/qLn<nO22(GqNa$3gY8#)?`/6sc#=`XJ&YmAZSAkD,a*9>h-UW&*#61er:JlM_i4\SR>_+Rb[I`*f@8FKTN8qf,j4fPr!QHpPd9%_o4l-i\c(SGYP[n:BsB.gog;3b":LN8unEtl'-u!I#ha41[XX`cMgWp1Y]dVKkg3GNXc,:4lNVRE1[PkCoiR&DT;1!48\GSE&<!r%]NCdJ8'Zr:GP8_f?d*2j.-E+q;XSO#BM]ln/a70+d7,qmJrK*o`k)fk!3jEuclktskA\L=(ZNU^GME;VJ8kk"E,RXBW1*n5drWB(%/:8rK/Fta/c%=N#7MW)O7U2Ps>IAnM-*/E3)=Jd/<EPY0DiN85)"CY*/6_jYfjn&#H/)Lap=ao6;bQTuhr&erL8$#69q9_>30@5J%50R.%/B=D1&S'lHQ"@uQ6p'hm[SQMdr[HsZq:I2+NeN&,4S,_<LE!&4[HJ9BNA$N]YHpikFf9u:!KFBu0Qke+4VeK7.l#hhBj;Mn%i(70ZN,?tH?bic`b(Gb\BM_]Z7ADpgL0[)sb(d38_4D:ZV:Dhn*uEoQ-D:88h%-272R&c42C,jLZ9NUlNqjMc9eLNcO#->"i]<DM%?Xt[[_\T#5K\4]rIcMIj`>-"X!utAWSF\:V2g#-P:.N7UF&df^]:j#d0g2kD9?5-EZ#\oZ>c;JCO\NbOZ^5ZU56RAl>PGV1441D!%(p5^[2><uF:^](`Sl"$&ZkiC<C"G0/('n*%4e[m@Gop-agl4g\^]DY`fk@X*B.O`@]lPmsDD-<+_qNU+N&f.5=Z)W;?2^@JIt&9K%CVf_a@ul@@=epNh1_tha@'R!LrHkeFjXGTjUKDBuE$D%oe2.*f6S]boa50*MW!O!aM0n1cf-?'2L='L>J;',`QA6Ok,K@Tc%.:Os%NeT'P+_MB1RfH)HaDIQqpBPN+EjfD0)PNEipiMb)1(g1@@B4<#=W#Q8ouHl"AOC6W-s]6M,GPTC[ar\X,J#69EPng/Q^;^)bb3Kb%@E*L+)7g=8:)?B_+;(cdj^@`gR\VCOX6X?CYiOIt&LX.i3_?rD)OA=4CLG0ap9&\q?bH7)#,6lN/ls%TXcsh[2i>4U$EMT"qIQVU%)m!k+&BBin.)kMOfjS+omiFk_P-7HI/T,,Cb5U0(g3i3o&S5G0`^iEoGZ`V!>c_9p0d'=F54H(Ll=6JHZT]MbEZ<%@gWdpq@sRqD%Vc'p7[N;I3)^cA`6'k,<-AQIn14r?C(`Fo[:>A8!c_(qI#oG%F/inX1aVGjLLJC)QO?k8\*$-Vc/inV[bSD0GLFtW?/g=M=W#WD4%$p$+IE1@oZkR9Lr[c$@0FO:tJF;,ZYLFtW?%OHB53HWXdFL3X;jj:Os,Y+ZDfl7&,qDQEu$dZWbN^6R%81tN3B]Jep45)]m]*QR9%8H-]"@;j>,moLAOdX*`.e6__8287hN42`rWT6O\12p94Ue'']2MFtaDglE8Y`YVM*TRBocmITJ!`5nI,h*,c<C(-t(7]2)@P%%ud%%Z4L[OOS:IahoIM%:O#n.[^/kB(QXj5OM$["ed`1(n3f@j/gL^Se>bmf^UG)g>0-6Bn<m6"t$qk]+lT!^5pBR6V!+6%4Z#Nc&r8W%]>`Y7&o'"L0`db07[f(),fe0VMR*J%j&p)C>R1rl*g$17cXo<j5D(.*Z'.js;iak04!HAt1a%i4.YVl@^_t-7Q&%u7.ngQg3-,<7%dF2BALInq:/J\$JN\OG\_FHL-.kOdCR+WSB:(39*p[Bt<`^rQ>T?Hg5bi;n=K3$s1C%]gu(p>GQ?k<0Ye/nDF;`h9IT`8+8hk3.%%nalMWGDM/;mmH1+Gp8W.KRrKG#d8&0Jk]L]a;k"2I*I'&7LhO,@$o*R="d&$fRWU`iAd]p;jf`:995E]D0-uT:BRn8@em;khO(K2%A&qO@Gkl@lefpmkm$C#%4egd'5jS?^'/\AMfEW@*ZIdtROT4;7c;"Q2N1p75m-n#b.bNrV!CropB<QJSL[enOU0L5"#p/GnDe12'%)A\cW(T=KSh&j^uf^X["f_D*j3T'<AijiHL1f&aOHUlo@X/N/uR<$oK'mnhbmg$+&aK]d_OWfkr6g%9SMg</))iu1$_!6Sc7!Wtf%NU2`)faZJV8(A9X1`lE+>?umT+ZV=OB6UlT:.463HPHcR^cS`Y.0>,Xj'3k_-\;O82,lsjJgB+`0c>7oMTFF_G/Y\@\;6)VQK4)+%Y4oUA),*U?-R.Tlf[o!4&K,_',r62kNtX*=b\=uOn.D)8q>T"&fF]!7R[+9;h%;j\/S7Btl9$AUL,Np;#*[D5:IaUT&Xg<L&Xc&"%r4MNT9W[:pm_^/kL.]dKga/*S36OG)C-WhT/8'5mFG%Lc3Jf9$#'=><gq^D^9&7/$a%.51EGjFCZZA$@:N*>3c,Z)FN/n-8k^LaX%$\QmJE9fiLCr([JFb>Zi,">mESG^c*`?gq5&Ri..)ajhsKS;\IOrU@6Sum<H,Nl`*VuR2A#%;/ri5LJ6oASJG0qJt9l$U!\cQA(3%%l[&!-Bes1:X\iH`!p'LF?Wt-*NJ/\_[1dtO:aG9I(4_TJkdR5/n-aRG;Ub0%k$4E'VL0ob(la=i4U"JPKnpkal8h05$[_b/8SI%%qm&A9b^(8e#4*Xs]dFGmP2lA(1%n"%A]b-t+8C7"A&TqE%1m\L?;/5,+LUuf"qSJc9BpLmSd/.,'Sdk)N1FHSC10^_N0V7(btpKn%6dG`Bg&iF4a"o^7)[ft0XPB)8)+aMp`DFJ<YmuKLEQbi%6)UTuhjQ\%mF@`CFt@`No%\HUFOG,H]G.`\@;%s=SBP]_Un0kbbJ]d]%P'Vj^_n].9E[#7C)*/OfT;E@7c2,k4,k.JUck[j%CP;EWFql0:kQuB&7VZf*2"Ue.\.&9uac+a,PKZSr4dh8Y]C-&:UrlWZ'?Ne!%H7"f;MY2q#Oc$P?+sRi/f*3<!mFg)-R_K"5&ohT"XA)1P)fre[psnl=4*Fke=r8D#DX8B,6)eh_-l-GcO1UNoVsT,_Jt>@[S>2?#%)=F](_Mp[]*%D[Ur!];kVS^_$&HgH+a%h=5B;e!^O!QODB@"7f_aHUh_&1*`Hua.e(jmO?I90T;s*B_A*r/&Yb-CEN"e_Oka@KAs%d(^O9LUm+"1-Bf$+Z(,YPLs=qiC'6^Ml&U,L:jb'f>5SR*g/W5ICgdlfEE;/#M!hHMr\E0!.<e6kaBnfHtqp+cP^&HIZR+\"lbTB%L&G"3[8]?gN>IDCi<A6(WJ0qqJ_s5,A1=q!s/8T$X3WmIN7QaU,0;t,jM!7,k$eYg8lr=Q8PTo/m)hEUc-<W7b>[6=DOK[Ue'G6,%4)OsL.bX2t3><pQ<'(5^0hp)j_DCO"U6=>1H8ng8<80mBqX<GPcT>?(h+(_Ep1rtn5jGm4%^2<2c*5Y](:JZFFM^qkY+q09hB`\1%pO.G`45h'#l-J/HEu<>/"O_.$-1X76pV#ffUoCt?j!'Gq92QRM;q9],:TpM(/edm<)pcJ"H&YhlGe3>"di2>.l?GH,UW2`Jj/7,5%2n%CZ7.'ad='^&t.H;:BULM8r\(pgBfTXuAmm_S@7!5<T*dWlI-T(<,*&S&;a(d-oW92Gi=5g,A"7Kpn07F)DqSp-=c:u`JB;b^(%DNYCm\sQ@)PI[Z4Z6>c0mqm@>N?bTSI1]PKH*<;K*/,?k'"QB_%DMRRct+GAg)"jsg;k_AEUF^$bObfo0uVZ[l0UaJMo@%ujr&UK%SNZ#&=>jI3oO>m$9T3f!TQre1'Q1!g\tE<>_<8]ERnX\5'252LSP9ob98E@!fke5Ba[o/gRk?O44je)WTT(57S.H;dRr6Ro`Q;Z>%"g-5VYJ#s[:$:qCRS+I21,<T&?1?S6UpK=&F%.LE9c*DkX"gsFKT5_L/m[D8kZHM[6%`%O'dT;;2I-kc_J8asZKZs]klPbH))Ia7%W;l3?+X`RM(K;,RiLO@7>u3.Z5gIH<flX!0Cq+;m!?@S*2I0-3h2iV7O\HXV9,Eb$2+BK0OQYlQXWB]r0$)t\mnK0;2I4[E$(4ji%1n2cr_<diJl\O5962_e71,<l.S_-;WBdI59))7U5G[;91NY/V^"D6;hA9]HQW7c8Y%2-r/$?Jh%W%fZMA:8s(k=a[RPR"c:;$g^%%L-N:\!pD\IER_q)J_%^*>tj7l\cL[,K^Pnq#e6uhaLd8KVh$e]$:7?/MW+<H%8;M;-N\PTn=Z7a(ZKSn8,-I2\C3Y,G.Bn?cj#Zo%gYIEK`DPf#,k2aa9FDNM-R6?Z$(V[-1Y-3a4X8\PcA;D1O1[c_OP@(r(Yt(<Zf]2a_tM!dFNJ$!F-h[r0cp4\3tf.BFO=C<7(N\p%SitX^G@D>#kXB^ce!*2%\Jm;u38uf>JIt?>7<_,].f$9Yo:6"*FOAnMRlt.a&FO!Lopi)]$0GB4p*Xob2tkG;YH`.op7q@kfK15]%-IN(b4WJLG2>6ju=6/_'meuhH<#KpH?2,b,\63P,DRol'gZ!&o6f-m68TO#(>HS-kq2BftN1"pnJPM_n%CP&FU&!>t>nO]tJP[pZ%,!Nq_.,shoAiCFGr?#7`JDY?)6H.#nSA8#.WQ!u'#5!AgHA3=.6?dT]4X4[6Y83MB%aGcKEG7J5/Gs>#(cS[G'5RWt1VUf]5P9SC%8b!J/rmYF`q&A8Lq0-pJAIGc%R4rf<ZLY(c=?5/bY>Iqci2ug!:g_X<Dkh6mN"c%<q0%dWQC2bJaVtXA-?k+$KdW!k7,>Uo&*:Q]%B0Ir.j%_SA7.0=[VOm<R$)$sMG$D@irdsf2C`+./Y::qk5U+)_/%jeeq:-$a!Jq407,USFi@Zh!noAP('WRVW^"%aQ\;TO0O*ed8%OSK`<a5)iF2^(-8NHA+Ud.p'Q2s$%"L7T@P,1#G5OWP5)L:]iuA_tAZO`%[eH`Ho8h=oQY?$JuJ4>l%bMti.:nl4P[;*91ZIU]EA%2;BeJTp^u7(qCFb1EUmcq`*bDOa:J*Z_I2!Oa>#?X<k99Z#]c\g>A%U_JS763D=n6Df\XSlgdFc`gb!/hctg0>8PZh=C>AaptiIc%2&nB.l&)Q!KoTWYBhVAqC<tkT4*Fq;gke*lp(:fHTQf*2XHcW8B+1o$Oi2?1k3eG$=$Cf&-h,u<A]U7GP0$2[AK9nNHD1a3<+Hor%Y`@Zu?#TCD!U(fSDSuCZ=5e[OmnJ)Fk.$__iVVs];rBY@4sD4fS>3'2*1PT'O3]t%!B)^B3ee/Db3!2mRPAa']6]Ec$Y\0r'"O-B%@b3aE8Ps,E`6N@F[!+l%C^&g.4`Jd6G*W&#,0c;Cp8i&RmQ8IMXjl?'Fq<'u8gLl!WubA!G1Xub36&\C;U`3?3Seh>U*RA>@@L.q%XPeK9[Ahj+I(8Uj;`6`E&$W,an(p.h(7fg)!cHVrZc$aU1B7?pmeMbgp[@M5//7?M]_D16L@d>[2(asYR7G4PTrmb4[,1FF4Y.]#%gtDIoq6F5iabQ?%P47hMdKBcX/"oM1W[/[>+>p$/:;<$K+JaiN[P]8fE2qX@_NA^h4^EddSZ?Do+&:n>Rtd8h6@(=%MR;-MfLQ/h%9r)Lkhq%bs\Z8ft(.V07Z&Y2)h7S3U.JN?'eIjH-84d=fqk8%Q4Kq<RK?5,Q-8@sOY2F:\SK/<104.\TqU5lqU?mF``jSH"'+\1U%\h-_=&qVma[ArX0X$KsE+tfO0q7K#&R)L@$mRBnM6C2B]U#2ltkOHL`FN^7pDSXLJYp2iLjaibk3'/:Yq)$=HWW?7:$_c%MiNgnK%G%c3Il&?ub6giA0h:mSL)n77YDUoj'h3%OH5O34&DRRIp7"l_-1Shad7bgU3WU]G:F\f+A%`9PNInaB%;2IJs2J*BkHDs,(E6H5*%b2$Y$<g^D_es2)nnm!hDNuoIE9]FhsbQ6eY48QM=j@6hM!DOIQ%F"qoE+!=k*5L5&@Y88EQ,m67Z/T9]9d?rnD<G'tNc&oC$WF*$%DN=Xr:;uIR(jYVYWC+L(q0(R&H.Wic/)ht)*h]3pp$nb+T4Z,jXc,3S(ugV';eQAI[t3]X@e=.VOuY%LYM7HrgCT3Pk)X0Q(amAh%H,)EF::Q6bbOFl,n8f(KGiPNrj9p2BRgLS9T4^/=."=I).d+T/Dg_L"[^YGKljc_=M(K.l(jDgqY:MM;e\5C,R*(/Lp]ulhbiK^s%A!8rp"=adb\K$<5&IE0cFCEc.mtb+sEP4a6?"q2g!P5Zo49mRu</i',!8TJbk5]hr7ijDn0Q%@CZi$LqTWfo#]2:4h?#5<J^^sH-%b5mR7,B[B0i8C:TA?WjH=b%[no]6'Bj]I5BA*=m)K'13pZN0%J!/Ad]O"Z)h2:A=K,MpL"jJ@6t)6":_P]&fd@7$=O-/ol'0eVSZ%fWi25.3FP0Nd:e6ge7Hf'^kErb(ha,7/bq7q1cZ!Eg05m!i$)n<'B_K:#\65C'L4<-/Ro7hI8C"Z_;thoc#rU/*($O&^H+LiEj:G%VG5ub.-FpOEV:j#^Xk,"lYZc:6]l`o`]kClcFn\3nghbpf?`DN:adPRP"3+8D^4gR^I1,;bAMAKr*I.s1:]lff?YrZmT]Y&4&nb`%f.X^LOnVoeEN`aAXaXd;!5e0sMf)@#6ML<cg7^QqHi9Zl_FgVZfQ.gJY@"[1Ec9a&IPgE)IaJ7g`uc8r?9d$W-/YhRA"5gG]%8T]%lVq=[p\G?Ek*X*#IaPY$%<in$pq;-oh8_J>]mfBQ]XR`kSCBUl]meqpaXEIsh!5ciTL/%uq"OVRVPfN(j-.Uu$bt6<S+eu/]meAp%1cXo!ia0C`%G.9kWC,P.(R>4OX<rmopAgHf0HQ)GGn9SHHi;sir]'ZKfn'uaX5Aa-nI9c$8*GAKj6&Q2\,))Lc#F=Vp%BpKa4bAL%j'KLaNNIC'^9*-bh<Pl*SqhA?cZo3\fdU!RM:#eP;#Kr1s1Nl6mFW]Poo$Q7D_h(W%GITipHH<R&(>N1Y7nFtO4P",QQGSe#62Ac%"0^\l[kK&^lPGh&EVE2jQ/gcf(FWV`Xa];BV8[LsK_<Kmme)K]F+hd6Z0q:+\/gff43Du!_e7q_grD?k1s9s@hg"nc`Qc8ZfQ.dH%YMZ;#n15r,m!J\9C?W:[O'nBk]m`)3/bi@2C<+?/f.VHF'CfHXE3EX@[%22Q@Q@6#\,+()>IliW^"72`H0%lsqM!TfHE5qVFq9n5%DtW^l2F$cGIaPY$-.4MQ6RSFA`.ZdY&UB%VrM"6')rQdr:Pb"CePCuLNchP_#X6H<p\KU;,[%p>SR">8?GAJs/]YWX07%TQkbr]M%W;$6S)Sj2p#<"40G'qqn?09$qD\joaDeKqp&I(FFj1RNkO^rM=o$m3JYb6&48rhW;<`^)A+q$r1J=QaARqe3*5G9S$%\h!iWS?5g%D/A>1CO66<r-bHdD+p3d&^70,=ZepJF]7P:`Rtq0Jl6Y#4!1HgqObXalGg<@\@-^0]m/E/CeL&9T:AmVZb.J^pO<pnnlOS*")7Y!%[4E?b*^*+#?Z5D]EO5WfSK4_rFM?M>PV.8(DpkK3Db??,lT`hdji`U)ZZIoTh*4[U9+MP7Dpm[Fg6\D\X#]G/0_;@"m8e8`hHbK9%q]iR&'C"r2URCAkj_)se3:13nkM1+<Fm"#4aElUP]YA_f/^1)q:1h`#Ahe^S[_4WsnX5u;Z>rI'l/kWb=0lM"TDr/]f+rTT@-VC(%UE)L[/g73,M0,ao4[2_81\Fh"T!ST:#jW:i?eXgS3pAqF\Tk4_=$X'<"BUI%AeA&Ea0pK"BY]Y#Ds;!'@D:JZ>$c=)l>*@WJ$le`%c>?/'idOb)^:il)gW)fk^$,d^))G>m%,]'KAT?Ng\s7<d`tZcir$>>qo8ht$5:Le]?h-0\DY8!Tg%Ua,EoO2fe""h+*qsBGm;-Nd%m79l%kN4BOj0kJH.@[ltdeqZ3_Y-lc^S[#FmIgf-Co3L+l>(/!n7j>Yn3%44XaQ[4VWmcAas,Qa)0qo$Y9q\o7P,ut],nF^%oQ]]%3Rs"-BYq6bNkG#`^&d+D^WEihb'd#rakQ*>p!oD)9K#CiU/B.=Dh%$[nA`a9`V2:b]h%d,B9<3q1<]H6RJf7p=;>3IqN[DnDbJ7;%]2IUgIF'M2s8IEW<hO@c1,ndqc3)Jrra6bN#`i^VV02d9[-TnOMDl?@r5!9rGlYS1H\"C@QL+nfcsc19PhTMO+>CT_:_EGFBuqeV%@c#td!l(';?mrWkKR0NYQ2BF1+*_`SPFq.&71+L8Cb=9S4;&GBHiKnQKS:2WbH;Y<2*k/SJi,\F_&sacf:EuF0XA>Z#%%(M6)n4`%SWc.G<HEq.T.7L#%a:POS&V@aJ0=_8jfT,["cb`c/5OX_`m&Na='M/"H#Lr5<7`VR+2MJcK=ZL(9:WN_fde.k%kMTRT1nVM8^th`%.\Ug1chq@BgXWF:qK[A\FZm_+Q-cZaREP'0Z<1F*s&:d9]=Z45o5U4Uf6'fo)dX2slhPcC=gS<*c*uWo7?36'o9CRc+7.9_^HCDr%eEb@B5:@K%Y0r&C23iZ<eOUFVCHkTdNQYl-L7_O-p?q+G`4nGpde4+0kJ;nTQ(P7[nE;$l5#rcgDtfNp_s]EtbNG3Xm#"t'<HGSI%0`P2M0WN14VE&K#Tpgu+:Ql4!ZpF>+;u3$hs*21Ob4VsD2UWBg/H#fFhNkW+n?"&/Dm,$s%L2,qBOCe#k+N"5ntGe2WseM<X80s#%WPe#M@G2p#W]L%0b=d3:M`UL\]s1\M]\4h$?V/]KL2Z3Q*3?[EO1Ab!jPo-Pqs"\%,?K-/E!;3[n#Ot9d7oAKc(>_kcgVFsd`qC5%I&"67>&O;M6X+:/*F-D3/9:(.eC]?#'J`)<f[L='-7`!k7Or]="WhI#X@sCY55)O#m`aW*fPe-_Mp,Aa4f'cHH/6bTh/g`o<pH8u%4?AKqjR=4XFft,o)HZkgNFk&6<YgOu%!J_X(DPS'2_U6cID(]&/c\PYlSG\3"i.9]P4t<!`C<')gTmGUgrNjjPb(&HY:cl%+A)G$%5/nrCAS@"(Jb"!SgORRp5DDZu$[2F0BnA>[5-UjtL)6CX$VKb4bg68&Ro?Gh]X(k.Yl`UX)8*\Sbu:uj^D8s%CH@#cL=V@WNoTQe%NgK$kj4F+>]$:!Ib5KGU<S0$b/[1O&``fYBF>SD6!%YDCnk+2=^9h,??*'Z9]q*?Qn5MEK>1<=;eXALH/`#kin#ZN$K1hie\sK)G%$esGG^emN^bOBQVE\l@Q=aI.8Qcn%+b\XC\^@,+P;YdS:?@',^m$oonXm\TZ:u;.coW%#M>\*8S<c2k8Y'7gE0G&UBL=Eb4R%a0t%SaKJn)`Jjmo?6%Ie[j<0/=c[754[SmV[&JjD(]&'H(FdSC'Iea+0';Ep3d7<M4AfWHZXo=R"$XJCj,2ios'!"DlrGUSjkZ*`06_r%>>pG!5I2fb/<D7m#457Ap:f0V&(S]hU9fm)18\+_:4_0m7e&9uq;l!ZU^+1D0Q4+3b`7L)Fap99#?\FDf09Z+AbCC`VCP:/>2G7T%nd3H@IkIeh'^+7m;VPC+:Y$?0=u'fmgf;++LNcbS4R[3R)V*O/f&b];pJuX=HX2&)g6jQ5^TSXX$ac>mgTTH_dD]GWI]b68VH[WY%b*?=/5PsU?6h*5j[hEJ,h[And1n!&Gjd5#PTVde&E3M$9Rm)S"-.5.<4fI=STpmOd'7:]Io<!q))H)V6?!CP$YEaTPgBV+UcOO>$%]t%M&d8O=)T&m:f7G6A".d"oPV>ILfY^1B;g=U:L?JRo0>:G]kb4Re;UkLE[@6A,q83E=1q3?@Z1Xde<MP"sl]5feof-<EY]cU2+%a0BKsZ,$kjgU8EV0cD%c>S+9f$rJ8_5M<Pk>c7d6VC*<YW0:rNUU=nr4h?BCfU-86L9:QCEQrfg0g*1/3MZB=R)t;*nkMi:;/@e]%-'6O@cBNm]*i?Js5pPD_XB(D2k!V7$Zc84aT=:+WO).lgi2lXCN=$*f%@k:<Gl$2gQ5hhb9J%^D,PlJ1Tr=cQmj_s0`B1lgh**r'%mUAHJN5j)7aAQd+>^gY<p`qE'8Z."1Hi[f;7EsuY&RXlaYJV+[?C!$Odeo%Q8\K/FG^Qf>?S1U?;rN,s:StdOC[=?*A>Zfd2QKtB%,5gj#5jflQlGEIqEd)/A>9+gWAUWlbIsi.0i&k"b16+SNr$ZU^SD0T:^R6,XWUfViYdJfOnQ=).5'9M:l`K?;4q&Y.3"\N):Db5m%_f:WLcVaGsNSUkQVZ:Uue`r:m*Oj;RNFKeM8g2+9Gj&Ea#7ku%r^/O)7!eWR_XR8AU,2>h_F(Y>:X(X)haa7a%41@#^3Br$EDVRL%!<gWbQ2[k`BOof6`H2Lj?&N?F"U#4"b,5T,)DI?0A@?H)Bkl2Jdc9X7!i4>oGNUnjAm,$h[>H3MEGGL;c"+)ua&eNIL&..UQVe1l%R+oR:RBFOK?cL&iWBF6F[p%\"-U<0-%HC+ZTs_T+^NFoAG%;iXrh'Hc2A[pgj\.Zq(rQ%s9J@<97fC7]Z6am\JROuGX8Fm1R77GX%)-HD!(t<N5nfHj[NTEL;Pm_nf)"eeE`9A>^dDKA^0IP:9WRlsK7<b_*d[ESVZ#Lc((sNe+/<5%9f]GSJ..nL`iI[$-;6QA0L!+M'%hbJ.+G<[j.YuJq>9'(9eqP^XJOgYTM^Q,>Ubsd&aYgd!I/)O>'pOsXJl"KDM]X(f+hEN*cDT\;XH2@33;VkZWW7CLar3[47"0^#k%r#7$U([BNsdZ]^"#<?l[8"O[i,&W'EaMem\lkdBfN9joD,82`!cG_+JV[.%IYj:F)9Odc:.Zkc,'KKJ.G3#mBhk(rR4uQ;LcGlAF%s5f7WB!2<6&q;\A)`iIia2d8gj("LFgFU@]Nq);S:ihmE/S?<6=3p!=HGB*7^TY[WnaAoT;c*Krlta@ckjAqlOtZ/BNN6`^V[I^&%o8>gDZ"tBT`qT/.<9Tj;$ug;=l&Z!qU&+Q;>c8F,[6Lp.8`Ui?ZWQUk2X?]G*s<++%P)C;R8P8P4$P,[ieTRZ1&SJm0Y=qh[RDU`%X'.`B(JT)-rlpI9.uAbdj%6`O#lJ&qGgbu9oO%%]po?O;F?Jf2^?=dbFo2edHt.7\l#pNEras37cGiED?g[Vj*c,B-;qKkH3:lU2%&o9>Za3?T0EO?qD(.F(Uhsde&(1_SnHhVr&D9b]eSh!:op@'YBPb-F[<<3hc9pH&ap.Ef1l\6Ha_7W\IN0U_BNJaWk`R;tB`UQ9[%N-26`/Kh9sWK#/>5!Nm;Lon]]T;kr@:'J-LAkLBpWjoW$.G.WW1.#RT&O'$B%,H).\Q`??B30"_R!4g^jR%^R9cbQ6keG:lJUs_@%hg<;TE-FIZF76C&SKO'giJgA$eNW_f==gVh*$=1;p*n=Y5L+FXEgMdbZ*<nJTdJRoA*`c7B(P^;#h?BBJa=0=`>7p/T9Q\(5,Ipi%B=V'g?f?WO[O/_ug:TBX7Ho,t`Agnghd>I=f'M1)VuBp4]qUiViDt,kR\muHH3l$36+M2/+s`BZG9R]LDNAW]>e-9,B_Uf4_JNA&%jt'Vs"W!>??6;-7ZHJiQE;Aoe-7m@P-;\G89AcI%d/u^t"Ulil\gNW;>r%cRlAYD(UI`r5nL%gtnfu2:!ugRK3MLqeC?I(2$/OV6%Xi#h9o??H)L`FWO">6S';GS?"@PS^%`I)bBK.C%pUrTT('S\;i8>N";@X`#r)O=Z43DpUF(sO1_+M"4t<TM/:L*TsGd=b+58h)Rm%a]la4r:&G-Y$f(E!V)A/X($GaZa:EE7GQa%=q7Q_E6KUA+r/raZ8$Ymh>3DYYR5-7a.A+Hd^VWO,_]:7B!6ifOCPLM<5FD%Z_[(?%N+keqH;iSq,o<T:Jl?QaV66EZ)s=pLG<)jW"NsnHX)]Fe*KQ0@!_$W*3R7j9#gU@uCOC#!!HDX$-]Ql>E2sXR`cB3]1_:PJWIqTq%7pA2//^c,[)nP=/5oF'Qf_?)u$"[gU)O=YRngM2FA7J.u+s#2Q8f["@aDffI80a2:ABG)IWi_kWe(9pK=iT"`c'=bjpE=l^fJ/D0%9""E,5NI48"5V)9Th3H$]o>.'niK5%'2D.pj^D_[jm=&>>:cW;l>p*Rgj*0L8PCDU$)SCYb;9]m-*n2+o4!S(-h2:ApkB#b!6NqW%q$B7K<Z?Lj/@$NJOs$W?/^p?d]fO:-R8[bLet,uee&0a`,0f^UpI.E8Ut1b.?pT0:8jD&@QGa"EnuM^3.mA2bIhT%W_P?4\h%0MC%LaK@KgBUY7)n%/l1Hf8Ulj(_nK?ahtr_^s)%9PiXaM_B@0b1G^O(`2qIXXiBFoPX@7@lRr>1I!'p2"5ncB\K#VuQ=G;8QLc8RrkB%QN(OZQiL6r0/p?q93f-40%r=Y1k//d2cab7S7ff0nE*lbZ=M3ECop<r1X77NM"@7edrRWAkWh;A\Fi8@,.V2U\`qu)il,ZafXT:g%$MjSN$k67]hjgNf.d*ptK_XVaOu!(/qT0]P>7_1=]X(@7G^iX`<m!A51)9BNbH]@,2(o[;mH=1oju??&CQIhOnr=TG^NE_rj38>X%S=;'9UX`BdRg0RO(M;Zf5GtUNVthiIZ>RUfe>LjK5P>2=jZrhEr@G>;l$'.<#FeJHc0Y<oiT0+fTY/%/3YQE3_.;R73BY2CibDLR%DM'S\'\2j%DOi#ccV][n<A$+sg-*&oX0Za+>(`%a*4o9Taigl>Q_*6cq0f[+S9cWST&7dmSsQp8UJ4oZbJ@+`q]1;Y,\XuoqP_$#%N4E)+@5;)%%U8;=j8&i=inXC`!m.Skq5hLa@45#_2X,F^7L_r&p5!"[PG)-Ep"h&+903N/^ZCqIPuGiK[u82Ag,YSEj;\PXQ*PXP%`g&-QoBc5f]p]<mZV02@GQorF^#bc"/`emt$t_/)V:SCQL$)"0OCi%=rk@5%P3&Nm79'0_AX6m&^7HkDXgKH'>g8.?lIKU3-:4H3%EpOX1/(>PRq8$ZS=o5Y:(/al;YrD6t->utPJToEQZcUr,3M*L$6s5@iat\QsKbr"a16\HLs4U$):")Y%\nNL4Va&FPpUJt&DmY[#%M:G"sYUdm5Xk.a(>Ha[Ns4]39?[f`SXaY::R4FemG'?Zo>^pJ&es#0tHMo:2S%E5Y+)H.mGg(tZgE$sA@en:&rnNo*?*BONV!AKY%VS7=uB,rr(S^Q98f>uZJC?_M`JU@-sQih_jlXAo)Z?3%,bhf!KN.b%!NU_.t[es*AkC9P\X(^<[HliRWp#j1ik@edLhs,'G4);U;%eb4uG=m=f!8EH?+om(\nYl6u[C]+L7**?Xo'iLKo/Y8d#b]7P-gUDq[X*=cc$+,$P+X!aEm>GoW[nIE#EXjfHp*l-$_c^j=l])mX%\b0`M+H'<^AFs2?.\bhnn7Rc^/uCS6D],!j%Q_,XkTFU_;9:,uHf2#j,q>Cl?d.3Cn4qfPlkI"uBGocF#e*\<l-"ZkZa$n`Sddt`%m.hl'\!6c^LFjm3=\q-[rUpS<DrsL4TOY.2+U$SnC(=Ii%>\!@W+"FEQI((4Z3)&S0,0RC/fmT'!hM.gn\F_#:Ni(qbdsDMVCEqu%=aCRrh"hb1N@1V:lF.0DYP@^H<X\cPU8N2`o/#'FmNLq[Sm2t*[(&<F1+^<`/)X,`G7G@t50X8]QUm0Dj+Salji.'gWGjT(qGd=4%mro-%L":0gBLMB6i;r[V&Z=RKWaU6<W\%OQ@fJV6/.#rVd*iMs:UB[qLrs"KSpm_7?.,JlS1t?E.,:a_A?.FVcR7UPf06t8oGe/%%"+=Kd0a]L"YF0ImJUNcuZ?UuBB2&sJJ3a.k3?-s`irdnm0),l,V1#:`4P6%_N+gLcnUi\r)Z.!(1'mrl$OcT2j_f"!IM:r5^T.L7%'X&<'*bpY'YFT;$/_rLDd;*Uj8u$#_J:@S0eb60TF$1H+=lSJPD.H4#3so(=Stoj<F>ME<3bu1[gn_tW/:D`&K29q#O6Wu5(<9cR%r'c[cnQ2qHJ'2>Ar"YIW^ZD^[rX/8is,+kVpabdeb<es9'((SFZqdf5&guc+\NdqnIj\o\0<H7[J+3]Vm\4?RYhNI<4EFs@ddGph%em6)s9-VbYqdb1Smil-oF';fX]i"Jc9:8[hmC6W/LApaFn2'H<%GdH.&N*3CRj/sU)>QPYNYFTI)hi3C&\hmo=O)Xe^FYr7OYE1U%SZ>>Mm#>pbqWMp)Z78NYn[]O^l<7Ej3jk:dYK<pW^4tcU7RTZaB,QgO-I+S/oGSW'_7NGR*U"]0G>G/1qmMp^+>SMLlnTpCLb&O@%6l+\m1i='_8J[^j><?kmT\_S<;cq*GXiq9iS1L2^'5*.E8e/:Y6<@(LSl&o^3EQd":E36C$PTB+$HN^BZdq*9OOI(%.j2IQU8tfl%`6a==$J=%ej##f$)l&!UXi/[>a(kl>]TQIA;4I(f/lXS"-u:h@EN9AM:7$u34]%.JX5,/Tm@h`+[)H+c?"Z8-F7SNP;4M.$HfO1t%)bbld_2Y>olG;1Se9b]m\(E\9kQ_DPZmC/W5(?%$/q1RV`^r6LQkN?.ERNs<U9s5>VZLSqnG:,KZ0OJUG-2!`V<\#>l_rJ%`u"ku%jd%XiG+RmcnZ:#Yh('VVN5ZO\l]8j`ihO?-Z-PZI)58"NT-.1/N5][(G>tVQbLlL6e9Dm]1HdmG6rnVX:)0b=bE"I2?GYg0X:De#%WW#&:'*DqC#dHF\#!0IdET6f#2kEE"\,+D7Atp6HkO1B2-ZDKAYR)a>M/Om^98GoHDAP-'H+q/Knc;<1i7k/RS>EG?SAH-ERA_8@%a2u7=&PH*AEAI&Rm$FZ,j(.//La=P1315"9=f[@73)1gWaNke7M`=HYhWUI3)]Wjf9Y<*BNfH(o-Jh;a_]p@cPDM6XI_Mb:j(.//%9_Un!Ng#;YP!$"*Lh"YRA'm;XRI-Q<2Ic-5hd$JQF.OER>FX=k4g`9<?%1fpC_eU&7^,k#EFHJ/FZDg,"b_qZ)"$tn!o5b3Rl]$N%qCu10Dgiu*ehTf#^]Uo](,qO3]DO53r#-$'^0Rhq#2VB2p98ZeXLRk5pQE0GpHeL$kkju2rWoQcqgeAVD3AmCgMVe:UeQGkW9g-5%UpouXY7"P`lk<ej9."a<JVNfI4!n5JQa\V'VL9X>4'm+-?,P4cUF_>hc"upS,$6L-#fWRMSL'Jt`>4M<\,Y&L@Ps:f29<g1lW%2>%9Vg,;3NMn(3`nXs/Cr\tXb5?Bokm)kdf1Tf%mTYd;HD#;U?h;98*Id1,"'L"jn[s<i-WZ_])?[0V;GsqC>FB'.gW^I4Lj#q-WcJ<%lm%a#9kJnokn-P*UNp,:Hiscu'2l+9s'P^PnH49$JV87BHO>83'+uMn*rh^+P'c]i&,cI"Ub!f&PIL9aneGMc_H&k$-P[:Z^Cm!:%g:s*CQS,8u(G4nN`Cgu?Z9:JH-_Vq,5ZHFZ>*>[IQ)Z.ZY;WKH^bf!8R[.LcN5"KX#]E]VhkYZuehgCE!6/XBL*[eOV:aq2K%!nJ%q`haI]U"gW"3==R1Fl[aRFDWqX-ecrQrGpn@o$eCI">o91:*.Hjcc.)cYAn8#h$)],4"`u%[\PJ7MpMQo0A3<%ol1Fn*3qSOq_T#%Wb2c6-*Y%P<>DT2;7$'\_.oEA4g+rY!Yged@$['8$mV_QG@aK<%'!iM'h_<%VNo\rHlbR/e8&eqbQN5<%=:??J8mhj;U%Q2-.sCp%BS6NU;=eN<GYVYHP-n8&Ws\5Q%9Y!]4FGZoJ/MMGcq,$f8iCUe(;QT\AV7Xrjg05$"rmh$5bTl;aVq`!h5^XKP!V\DT'<*T2![1F%ZNtu6P1:ilB[Kh1;-FBA\=*Y+TG#qNn)fld^k!9ZXMNTp:!sbT9raWg_OqO19rM6XJ3G)JZ=G`oG)#">=0WquX(Vit$O@15[fu_e%;?LH\5bJZo'o3^a)G)/F1rLb(.aV]k[qNQR8MQ$#W(%Q@8-PB>S=l#H9K#n4J@q,3<5N07Z_0rK'Jekp?jDf./M#p_"^hOj!#5lG%H42C+jUEDF#2pGc"7C[b&=AkCFjLg3?Ebu?PQS5^-3t!E=seOa=I7rOA3=N8&Nq?hb<Qh8ZB?Se#JDYh6\*%TXslbbTWp7+)l*s3%MhngA(a-L7+I[nnTN\'XC%-^gOG;F$V9*=MP9iY^-qsp4"r2#.;47nU<[:h4-r!`-6RaTlU7eZjTb.;/T&_ciM1gh\+LDm9'qeDR%W#Up?,:aYQFpYlJh*b#2@KlBoP;LE$6$<g:RRS,&jG@$f><t[VMS8mXr(aU3^CjR&1S;>VSQPZ\jq#Ztg,FlB2rL]*o[tD(JUt(7%Q(9p3)lHM1bNCl+B8M<M17h$I4<][fKJ6FT.Yt;4##L"[OE?D\KE0Kl\j8_)Ue1hc#_qSW$)u_a;--'#<Tnke+M'2@FO1Js-L`Wk%4+LEK<=",:YJDmnX-/`Y0_/X+dY_X%bCX/@n2?)gTpc+jM)P%M%9%A&N>4-*=hu5G$8[C(Z=OZ9OU#D&@DDCP8>ZIb-l\UK+f6\9%?P3WC<E@7AFc2K9d>HLlK%VC\*+s'f^1P//@#/C0FBJsQgOM"9M(J`16u*"G-?&"PL-hn0UF,6$O=;[_TM'Q/!2,^Kr%/C&3\454%<^K^U+ti4gW/$PW-peSA8VA5f!"t_TkZuUj0LdsNnj<NE?"GG5&:ug$0\TKOB?Co+8=a<g6'*Bk,Gee\V<AXcP6jXO,m_QU>7te?%/Pm?#:H-51_%U2h#UQIj+@\X`^?Ce(RFZ2IiM4Y*\B$p2\f!AZ@TT(sZeq!SZ>>=c?m#KZ`aL>`aKU=/,#XBEGtP@fbB[",1@liD%J;i]0Lu#$g%*XI-a@W9R[-^6m!Lk60\HCH9b8ogg,#]7'#s/q(KO[cp(kD:YOZ2*MCtZ05K\]*I"q/FsLJWm_`Q2!'k;E+%XR`NU%A_IL7J6ntR.='`i?qh6Q1qad"rP>_I?t2nnD?W0C(kGs.gP36i2M[/*gP3\Qf]XSoKJnfLp^#4l)pf9"BL3PhQm1g-U/_1!d49ms%DFWeldjP>&!*BLL>u<&_W"u+_.1uAe7Tr*%-uTA&GRn1)-aHiHjsEm%e0@AJ)$.=OPF_uGBp]76YUEPf)G).fB["8K&/@YOnt$:X%K.<jrG4[5>a:`%fOr2f$fb/-C_")c/_FW,^7$FPiUrEHZ&hP<jAW(Os;;!(TQ\_\.n/3AlYTYcE#CoRL,QT$#OFjW4%8@:cBdWA9%O>L*O6I3Xr!&:@&_Z_(sV;L99^cRLR"&Ue[7?m>D.Mt%9b6\7cKdj^kKa].Z?@\_=P)<cs%E'S,F;"&k4F<'-M=`q[6J+T";^U.j%j[NR,:q#,r0.d>=8'Y\Q-eL9h'/O5q;:)jX+_s%]TE5]-Vbq1"B[hrA`L-):aYH\qF-P06Ih<5j$"gBW4d@=MN]:PP7gMcjl!%]b%66:X\[1pRl#)'4c9-H4?"gIQ<T"W-O0]GH,-\[F7`WZU<Arii";8=%_/ZhCLc#qk$-g*P+,Y<.ONTP=(X%B']K+";7m+PEQgfq-7%[in*8";k^%?'3AZ)kFc=Rjach2W;;Q4C.]EW.JRqqipsr?aN!!R:H+98=76l#hd(,K4`1/)ha%i!>&3=iZY"o,="+\etlnV(*Rjj%D&Cd$&ECh^dYJ?P;!Ah]i%8R5J,r_Nb"bR8@s*J8[;E8/39.(SLm4nf@SI($X9<orDY5t`H*4P5eM]g/RfHq<YUd#iA2oShkG1h9%c#$4bdj*^uHO8n/U:_9SA%*rHb`TDPc@jMuM.="('uk+r(2N9F]OSG4*P3o\fPUH(DTat^>Q1n^nr;IkGO/?Vs4E;bpXlT?hQ\"C%hQ\#.m]d^6iuYg<&2o1I0K+)a9s1`?8b.nt#]l'_"QC?3$,eWC>Q1msi%m\bp-=UZHH'h-jG_Pg^t<N"a)30I1Nk"a4a%M8?"5f[%]ONnb*nT&(&GOg/5Qo)R`bn\:C[<D34C^<]W]bOc:\WL9KZZB">J@Asnr;IkJ*aUkA%1P?].NL(D>D1h<>*LnS):hc]E9u<SDaS'%o6Z/D1Nf^b&rlIdkro#V)IuY4&Omskp@M[VFNu4uCBpN?>gn$&;7gb51$C15T&(]FWf90T#8NrfZD[F&_.WK6h>u7b5nQM^pHg`R%H8"3^VtU6]FF'!)'.2H\Qo%KVfkFI7pbTMnk8KuM,K(Y-g&)n"p>hUbmo9ZrUPSMgK]lT;R,?X0HT$orbB-*.mOuZ:ltEhRPPIB/%H.VtcF?M3BVQZef28RD=gMT(n#bgN8'X9K7IZHT;#"t?@,E0k+m0PsCQlj6npb%BYXYu,4n:d=`%%lOcnk!8E:T1"?%%H5i_YL""%E6W*e4i\ojCPm1\KJ6'$3_Z9!'75a8qH=KopdFeRJ&<W/Ud%iQ,Tlp20p-R@0>Qqr]AE_o_kJLR(_i<J@`KKZ_1oK?"V)7f"WJ5t%;8?`aQ$Ru%F:EX%KX!KF%/W(D&0OYeprKOe&QNfG"\3JX!<?UBTX3#J+Si[E$Y-gV.OJ@$"Ps6JDDFT)9$*+^8-aKl3-8U\&DrZl%LIKI_d/sY3H8r4/X<n/!k`QL*c\A.l70)jJaZ-0(f9iC'3.6Pj9LQC0CdkA[6R6@N7\Y`UTrUH9Zb6jKC9#MFR,YK=[0-%((CB>Q%Q6oJX9&oHgYKVd]?Q=kq2>ni[JrsUqdTSh_TP1QLMT.368bE-m0K:h;Jlj=(YG0kS\"(g7<!id*$8B@45=GiV@r>WS6AKj&^4Jc7%%5ffk=+F+1[d>Rt\!f_)*"2)J*/f^F9#JPa)"CI>4s3<YVGK(,FRbb<\$M*"F%_EhXlZ,L*FXRD9_bOhgR]31UN0[N2&\YUD&7sj%@SBi@A*?8o1S'MbMQ+2fK%O!5S[]$7.#_]P`O]:tmNn]knO$_X9LuLSVa=0Z&fO7%b;P%EK8MaG2;KtSU7rXS#!4M=EZ@R6];ZG3%A!NGheb8Q5qM!?ik'=la+mj6U89;/ZL@CU^#\3<pNnpGhNVKI-l*a9ZhW>,_R#<B^L-(l^j\1AqZUrk%WOf\UMn84J`;mc"T\Br2%Z)//AA[70+$kVQ*B^?='X2XHAQVH481KZHKIL!dW^lk_OCI1.fKHOm9\Ff(1$fjS`<Aitk6O8AgN/K%K?%_2!OspC`4C*KBk_rH$%`jp"4Zbnm,8Lt](:sHQ>1sP80<HJ#+Q.#GZ+KJ"BNdup[U[Et(P=f%%ODR@<`X+?A!P9PF8N&V\PDgcVgR;UlH&&mjNJEag#>Rer%hkm\lRq/=Hm"+(\%OBQ4:G`]9+==^JW5G_hgqBVWTEl.`b[;ta,Lf++3!)!"bTkKQJjBn&NZ0*_W9l/"Nmks>)/M?D=(H:M;*\d`%)'5\)n$o*NC`=QT:4P&7fG3(UZI(\Fj<WFVk#=EjipF:CJDM7c<&,/r9h4[fD4&LJjA=6*Zsg4e76SFfe:#'*mdh1d!+/Utq22c0%=#9u+7Dn:=)EqNU#k/Q<T<Dr'Hpo9q=#@S(U>b\Y%BlsKpj>NJk:7GO^7sTX'b-e=BE\*fL<ipXI(l<ei%#^0?d\B=MFN-"B_ZsD%_riQ8!PY;ro+cD?YG_^$MRq,8e:#'*DR,s8n.ct2itpt]^7t&e'm6.PW!E*T]$FI-]tU6/pD".@YA!]Y73fTL1jm$3iUmop^TV<q%Hpts9.iNkDdI?shL<irN"+3O#^fT"fHpp36=#><=U>b\YN<!>5nG.rrcW;q)Hpts9.iLTYd0T4V%A0h;pj>Ln^fT$6^7t&e(%hQ6%;>9mD]$FI-"+3O#^fU0]mpOdP!r$`h,:F(5MD,gR1i.@`!9=8<%?6b^4-4/ic?9U7bJXjJ7.u=:VSPfI@[R4)D<Gn2K85PB?m`[*%q-p2e3#@Wfibha3).I>pE1Q$o9S70bFb6"k`!LdI0H/5YC?"2GNm%fA)FEAA`;Yj1)H5h9@q[teku^c4&YneE7JUP":k734,.F5l%.jjjJW<'tt\L'+3e:7V=?95NKh1dr0dbm:NJPekp+\bAG=5'SR,soE6(Dfs`"-/RJ,E8`12iaC9JcXDI=HSqi[PlO;VP2IU_I?U\%3DKf2*nCH"o>GoV;hWg%CVtC!e#A1Z2%cJ#!f]=DM+#HZ#jE1=i0#5sEGF0s`]8$5_qB'@(LiPBZ\XS_:/ho(S;q\RWbL,R232Jj%Wak7<<"m59fCMQgWp.<h#c>oh"N)FYR_HJ;idOsqVs<%,.[9ROWbbiXm')qEdq%ItI>KYK1'[L<juI.W>Vk<o-D,>[.F`r24'>S4%?7E:Kj'4:@.8I!20\JA75S<88?l3+iV!g(]mCfU$,rr-2+6KpAg-I9,0[.B!]Ggupg*-#5#fcZQ!.,Bj;RJ>FUtZIgbHmZM!GlH-%F(Tri$?Onq]\5-.WnXjubMMj3*$Q!1-[cJ`ch3idGW`c-k<ob!U3LLjTpq,>:?*>O^_/!.Ft#IjFDA,S=hpprScGMm%'cgg_%d2!%Zql3L-J0'dHkIV-2E,KICn>FZjFD?1VsE\/L&F8m;db$N\FkOeAr9f"&AiUhgN.-18Z&`d7C<hBjJKU96L71r0L"C'.q0(k#F?)^%E%'_^"e07R!\/@BT;Gf'@mjHKK0(Q+9a2[M"FLEC7GC3JcHsGL2OrHl+L*h`Z,!N`As85"@AVpV[MZb>h+jSeHgW2Q2jjm1dQ2Bp%-&%Ak?NLK[P'KW1q\4-Po>>+IK7Ik0`XOE/8g.5AUYAXF9rHMT?\5Gtdj8AVM]pJjH:cH+'EZ`+J?T_%)hP8%Nf.M\9>PR4/!jfT%\$5p3'ucmmBdV[&!c4.m%cmsMUc^4SkAbR+"(;L#oJH[pbuA?t%48ob'b>rM]/jp0hD@T.p:D/No&=%2dS((PY]n3<SIemEA<4Om%Fp,WlSkMRT@M#-h%OK#cN77$LRNYge[u)_6Lqtua5R/,5X.=(P!_D1@!)q4m/Jtd&$4teE]&kFFhA(ZNH4t!WnV@4=a=;P]0I_jU%Uep#*<OR+-U%aB2MdMq;*Y2LeVUC$@KO8ge?^GHP"!oGQ(a)INW&0D`]n7,u99_Cr:T)lJ/WhiQ-IWRpaJ:!f33Hs*K^M1$B%V[V%1jP$]7%TcZ^c47MU?51aJ5']$jH:B3Vjm$)+E8OT2R9bDZ&Kn:M"oP;?])_WPBE/!f<Xsh7mrqb@j+M*R'B.Pd8WSd!QKuCWLF)D%V)-kf[kn[>1m`e":NX`N;@D0a@lTk>L,Ob#6g15DY>S7)c(mknjojP%3.EaT6<e`e2?P'M!8t#J\DnHN(89(P7:=KAL-q1/AsCE*%cD"\l7RP*oAQq2L+]2=?@N.^QTF%J^FhuL*NGOTZW1l'Rh*2!A.:O`&5u"7>O`b-O$p__?"=iX%nY(%t\k.*GjQUhNK6AL89m0_1%hIdCY)NbIDZjP5i`.QumLt+=nK5C`7e.?mNnI/0tXgN>a"PkEHWk)VrV1<p(RWh_6-2DkM_/thI2F^E.EZ9:VN_4C97mY=f1nL:?%<N8k6B;5og&Q5Cl06WP19/.KTUei\jCfQ!V7\7?9Jt/^EnPE8S1msl9Quuia;DcsV<%&YrN0V`T%YT!YZrqR=@N1>H&"cJgdBM7'%:k7QLfT%2E4Z4J%!<*RdA/La@&c.m2Lka=8!iq1EPb[NfnBl)m9RI^Xp3:(G:,a@8MUOa.6M[?*Ot)cL$7r&;)Vq.lBI'/6&!'a9%f4Aj3AV9]/XQQR"!#_\@$hu$JURNn;qUu@2JS(ZmD9/#Q=o\NAY'/@$gpfO6^Vg"+0SXhbV(HP$-,4&r"#bl:`utHs9QSu1&)96`%HJ/[Sql"83qUju&MgL203U:EQV34ebP"IBR?+L_F?/LRoECrk*!cTE!1Tfn"6*),pjnp0G/%[?:$Zj^-G<$eMneros<+q4qC;d+h%34:f\60h0piM."MJh`R"o21OX.Zk%jQ@S%?\EX\B_cj39@%Hm`bac13W&g\l@K,X,YAKjA0g56`E6C,Cjat9C5AY0f@FOoDalR82%?8HfZWmbZ6/3U:A-V.qc(c;56E)%lfQKls][/JDq]BuLpTf0&,(>?um/S@4%ijPIh(Chu'p1&RcF,hm7=)3:!o5Bso;L)aK*lD,e%btO5'`T=dAe%=78hI50s)ieeg7N^91cp0't._ei,R+*DmQ`X,2]5i5..(tsPWnLTVBD#FtkLcu>?H";Z9_)BRq_PS4JAc.e(FC[7%b#[E<S>fE0r=i%pIp9/B*b!0`7Zd49LurgOi;r!D[N7n>?XA.#*'rpj#Kn+hF7a'-CdV</&rPJiADn^j3.$rCEr0@RWrs&"o:gqK%d^UhA@ut9OP.Tu.18VAfm/<QdI(KToBt3kC]\X]c>R9>G;,9Z)5d].)A72HZ:Ia/,p9&2K%)7Mg^0T"$\uG()`gW\EJCpTQBg=RD%"#F/H[=gDQ9kBgG#R\c-L^rb(]&kpEmG.rP6icOGFdUBV(Qu_$%#_j&`;tN,G5oF*USe4_TSi7tpY^<`;MU*_1L`4q_d`"EYK!LJ%hZn7YGB?'\\(:`]%rT5?k=q&V/=5u6.>XM3bn9,5-3$7B\X$\Z]V1*A?5+<CW`YoD@2G0DV06"\Q&&V"bFA/&K;D?9"G.c/LbTLg%]can=Ja\+h]Dh1T<GoW@HaW&tIXJ"XV+u3&CW-cqFNb<lb-k6D'XqjU9cK-iVoCV_@=fWVc4-LrK/[p)@:T?g$6E>[R?L*<nCr/<%D*[Lnc0sT0+-(9,JYDj-,X=uQM9>J[:DIp_LHpU^1bBWaa1s;*jgD&@?3p!1SqtQ9,eE>Eh696^2-"PK7ru(IVhqK90eTu*j]'jS%CKGdDm@'J[ADpLjQSPBL2-!u7b0B>/j)UlA)p8P3,`em6`WWKe)<L5h2k;@0\J+C`E]7sHf4/Ml8-t%^R_cRJp2\,3Z!5GH@uAlD%Cj/kbP6f`6^I,#TJP@$`k!!EOa=7Cc=ku81]3YG/V=oB!ME27GV7+=)3,5=h>Ijj53[*39I-2=ZB&oDFql)G1Dt"JI3jA:DBJu0'%a+EF0HRiV(nQHP=]rAqbP*:V&G;ES8g?l^Ajr;af:ZR16p:FWX#,[q.EChmiI@(74<&4;a;J..HhdV0d,<"3qF!9^(KcmbrP-?d;%6D>CS+a'o.=Z2n^bn>_*DP'EfP.td;>8uAl#a1Q],t,*$>=n-?+:;_]-7#q*Q)D;m'`9<*BgaSK(4t6>&;'_bj;9f.L0ab"0el@1%L+F5)U:A#/e0?T1*(aEo/-MKn'LL08bG*F@$@ur6LX8c5l(WIobab$"Xu*8X\s[Glp=-nC=^S91fkR7N^[k,F@f?$^S4DF60[e&L%DB$\]+ErH]HTdDhn-CPH3Q[1,E=TJ?%(KJ^;(SfZ>k/9(3=Wg4',tMek&<f90K#d#GZ$U@[M8sgk\luR'*+G?g191REPch<X\G=?%$)I/X*PNb!E:H&*P!jJW$;qf.eRDlO;!.kC+M.#ZnS#u<)sS$af8FIX)]H,#fO`9$fcce,B4DjV+PDn,0uKa_<`?5Ybp>7d8\o,9%3_&.IaKdCQ57CBgP3c8f_LQHm/qW$6l`/;gN<Fka>K((,lmQM9<5sro?3aMMA2n>ha^.G`$fRY%-YeWoDTW1Bh3*&[!Tb1qR0HJI%;5j'"F&]O<?t3qg8+*OQBX\t>7Wfhf6k+2I=@LL\D_/0A8IC1kfeFn!,BnJtR)t^o9se*NCBcF.#kPXH,XQ5p4!Yu*SrA35K?\;%%I>,+/3Oe;FZ1:5+St@$K'QXk^7EMr&SR:-gafqG:0,eUt6mk5]L<gi<+dsl!3h!%UJKr=E)aVq,%HM%]a/s-6j50`6Lb/+SS<9d2%B=H9!j"Zqbj*o3iYD6!HiJF_B[A"T%75:=90^Lf043f8TK8I2o4V+HJ=I!(!XC#G2<%K39r)>67Ke+BhqP5>NMolNIjeXo>X&2U)%7KKTG?j+;$gS%Q>6M3%ilAGkX"lM/&(uFqpT#&96`/<aZq2GLrU?=At<,lV04Y_r[B"a!DQtAo%UiQF^TU@q8fm%f^%)HAM7`4Xs%.A6$SKMe1&_lQ[?rt$-XCTc]qWA>T)-NsE)C^84ffV[bU'b">Qgb%e>f]hq?fm$6'BYq2ldq_qke#YZ@c"n`uC]oT"GjcL?`/,5*%#C(R6Su6U9cNNp!0h;&MLTL\XfX7p=Mb+i`UjnTNpdD%N4`O"a<&Tu5cLV'VY,A^M)8W2KbXqGA@GMtU[P%unSHTU:2p2W>RUo>I%bd(LEMh>hu->JRH%6*#Rdi&mt>pJ\nVVQKQi7Q0#Kb6R32l7T&Uj2$`^adc;V4)T!>-5JlE2V#q3dG*cW'530.(Vkj8(kP67C8d-%ZOh.U%#tKSAt]ISNhi7,k5DcHS42"4Au*fglo).Z5jjEpFdu1s02FOP+DD;VW7Ko+H%`n4UV(IY!A_bd/7++PcqYK0$&NO)<cQY>%.U!81.iZmkaVtF5dWROt.n95!gjJW8:%esZ7[13O<n(ZBYM>Yea.+Q=TfM(_Ueu9YR,Bh>T=h_Q9IItcmY&WZglL:Y_0E[$[`LAZ%gd#oho=MtH;D0316jp9,SRs+*)'M%/Rqu7t81ID7Md,:@)VU(+&H0ag=bJ=SZ7).TSH/%[%^jE3\#:/p3gidq)E[m?RF?6:N_L_N%H0u\G4SS8j.H?LkjD7Ml3O>8#*tL<cmmld=?mP39D5pB-C>G580r#N6qNa`:5PWY:d]7Mt(\CL_>/YgH//e/OYmFV\fD5bW/ZHA[%XAKutTl4=Rk4796TRjoNIY^GmWnk^B"7oRB\$*$cMr;`&/@b6Nqk?W>Udf9t<*/;o>VBGP0j!V+P$b6;RiE'tCWS'^0re#@c!Feg%:rNd9[VA_)X_8Qp<OMa*adeG,/p1uca@l1[\Pm7F@26C@(Bd7"S7Yp2Z@s5\1F/sl</UN.eO2!9Baq(%O[O&WaEHXM:IiW3?kneo%hH&X2;rl^lWae0Z8*uR2DgJq`W*,lWB%g/`9ht++<Z58PI`WL6Y]D(LY2']cRZQ`T?opKF<"Y<RV<1tJX,s3qgDE5bH-Va"<?u;N%</SgSeO1.!Bo[L!Lb`6VKEm[[e1kH"e3lJhF2:Ntb$".ca/IdSh<i%'hJ74I6o2ls>VT"B(6_<1/5nt=Zoop]SV%1f;PX&hFM2md%Vpp`n;PHET7B0j=;cLY#%Q/C'3$I"ZUsF1p_eZ]<2TfWICR]M3fZDh/2_^qai*a';.l5sA+/R%#YK'b4gG1qt4Z4)1oKB_MJDD7T%ik7)ha.6n8GkE;<Jn]g4Wn;huaE\DDEL7.0IPAXt!ZYZ&OFk]5!E=faU6^ZF[Ag-_\-=n;5Yqn&6*st2e<scO1B_U(E\itA9bVbG%B@,]oT4N5r!?)fo)^sS0b$77?HuEo5mB3Y&$c\Vn1Jpr*la2aL>e]bP"6"GkEZMZOcGLnp`HDq^C"%=5ToU,]'80#1d4djcZuVX5%85oc"m@[d]:XVcI+WEp23/s2u<9;Y>D,-8Q,DH>ubLghk9<5Kac,tD/JnQDV+Z=`gTTu@]FE4O(hlMHk0PtYW9,Gu^0McfB,qVT(%F^CC#M<UC"+o%4$j+'[%3HHCf\SdcL@.KD6mO_1;//jmM#\Q8D+K&?n)g<FH_Ii>2&QXSiI5k#H.]U1(N%;rq<>WMc(]=Q;F"*jk%6kPBtAusQ/_-FUm8YtX0mT>4"GA^6PlLJ*ePSTPX$FZu>a6k\3gp#d\e.21Ya4Gr`;SPZsK^)0e8u%cZNcCL`nE",`S[MpP=q!*Q%3_Ur/0&cjNot%L^EoZJ'-e5D$ipFSIr)-b48\UQp_H&VRC9'k0Ygmg:0=KEcL1QKaFi2EYDAuO6](OiN8.W&3(PYFng^]\FJi8?L%LdWN<+XZSI'fGSl]t"Vu'#lui!(f$AH[F>*Co^&TZ])RA1S8_m['50*P:Al*,LJ<&C2ER:*p8VDQMBYX3ObPo+-6:rHYoh,b=P$L%[abh.]==hB%b%s'=.O5:0+:1aNUTtWBEd=B%]Jp2Ml=[dTkLQ<k`_^sN]7M>RLbTuhD6A/:leLd'1Yc/3ToPK]QU%)"F%]bM%Old%*/Jo53!sIR=;`rHh*JH0a8Msm*fT/1/%ofPNd/*DSChF:$6d)p1VK&5_Ep>k'bAp4;RHfKp2$=pB(b:aC);4[Yafc-AmGX)Aq:33%$*dR41+#$9;anoBmYrqsGV[_a6uU=!G*[Ki'$Iu_?HW'''fcq+CFrR<.8%LO$KUlQh&Zu8[a_@[#e:%C&[O459]ZU;7f^W5#no`K%'&9DL8D1\B8PDFhW2E@*5IQd=\JYu2G,K^>YaRA$S$t7K:)Q3IAqa/'#eNM?BpbAnX@O"0jjl>>AKkgAn0g^LgZ>7*c/iJF5UlpY%Gt#`nB['[SMUM!Ek54\ka4h)=AJKk88/PEf.Bdgu=j9\"pp%X8e(CEN3/GrK>\1-Q410kjn<rEl,Ji>tWP7n4@(I9$&^u^bjT<lR%BqH:k2X$CNk^/B)5SAj#)4eM<=D6&RO*ZOprFjFch$$Mj(-C=inbM3IRUpFfSPOsCD.RUB6![/q/'he`Fda\Re(c2f4W<.b?t.T-%6QpS2[<qc!%1etS<-t=fR`BMak#hk\$A8gJ@B;/O1uL+r6Er:*FZmJ`I(o\fW`H3E@R%/]oKc-M'ZV2fOR8f54Vb\\DQIjf"\!aG%FCqNTM6:F6I7E_Q3!9I2nPEMHR^kP_V`kZ9CJ>S<8Q3.X7`.m=\d]!plc,h'e[=d-FcVK5eF'aQ5OU/J`8G0QSn?CBLci2HadPt)%T9n\8fF^C_I/>%T^G#2u=PN&YZO/#bMg"er78D'%cdh:9j0XM9r,auSI8?]\+03JNQs+Q+)bG=.gnhZDg$QU8Ap<O,s1kJB4Qd^!%Y7?g6$@aOjHh5p]Jg3POS?H\(QOBVfIo`$KY0B?#d)l.nIm^=QGsJFhe^M;jNAA7Ja&=a'd6dI=GE9#Y.K_tT@G6S$fDU"$rV<!+%+Og0*qO\mYSl<t+8S"_.5,P=c8?3<TZn>p\0?D&?#`f:4d+lPZ1Ba>d1<ZMejDmsKn8`StodLJqcnl0J'>iq-15$4AfAhu7DlqqO%'rWBP-#RO\mXc$G]d&-taFdG!Ce>H<0W4'SnO/V&$=/t0Tt@uZc+=NB*4iu2$A=LLQl$$KBENOAD5'0_*^qVm+%OEEb,nWg.iUu+%!qB2G!Hm%KW?Q\m.[iGhM*]Y-1S%;8@3b0Q,6D;M[U0_0n_QgdF(2a*2s(]?-`NUU0r*HR3$2[e+)UXRN'kunReoiV$(V3fI7NON%fWp(nIo541)6X;2dW@QbHcWjNesWs]l7`<8NPbq1*O"5bdN/)p%Rc?ulHCa:eTADgj_Z$*`8iPl).kE\aWkV#G&4[*lMD#s8foT;%B<%pdB6.s/REu3b3`U2L2Gq_k0h:c'*KSN^p^:m`(`9%_L0.$J&&S9Ah&[!^lNh!KqTY5&`:?MH50C2KO,LbmRJ((207)(E6*XKE%RR>3>\s3*-if[%+'K5s&eEsa6p;X1r:#=:QFA#eDHbX$7GMTY!Dk=*\,*.S.4RM>l_>0gm*mek"OaZPQi+u+W#*PBdA4HrcHcp>I%/5S!K:F91</Kl4$+EC%\O^Th9r19CcZu;[c-1>Npm(')3F#QLH?piLh@nQu[84NPG*`U]h7WMjG%Ri5,^Pa)b>uU%i+2JF8I`XqP%,es(c^CNJN[,uJfC*;7&l4(_HQTFLq*4`a*VeW@B<`qo(-,1DrTmT`@-e'fOmJ95^+=HL.]2;^%jZ]3W=bQs0c255^_Y,fLYTr_0%jC/Y\)+`(\<Lf.C2-8!'Vb$+;aID!2WUPI4RtJVR\pLaV"0"pn6@bPgPBN^shfL\2dTD"9VWN.<e+1/3?4R5,UXqNbEiEgPiTOjk%7^$m&8&f/6mV6"ZXYlSVHhX]TdKs5+R`Nfd#[PG=^0C%!amXTsQ58_T0Doi5BoKNG6$rkgCiC_7<'ZS`$lAe8$G=-Q[F2/Eh.O8A%e^i4V0d)]VkHE1_!QgNb0)$CW(goI=\ZVq73?$BMkX<LkK)adlgF.6P;o5NBe18KQB2IXDG;1L:aiI2k)`&&T1tqnPUTeA-]ieR!%]W3bGm<)*NZ^PrB74>EMji5dB\*!%l+=9OA`^:h_e=Sd%(XO9E#%T?3F[]P]-HnloJFl&#VSiZ&/lWf@#>7@a/gNi^$5Gi6VdNrr%7:_%N_W;Ft]]b)rQLTZ-.@7jb</mX>-c@j(g4Rlk\6pR>SMj'.;HYt.9ae8?cFUBm,!2dbn/#"S0l:7]h<0Q\3ZNI_&ZceBWOE9O%U`8:tanjAsU$^L#b>MBp[N16=-5*De,uT7:nVgS#;sKKM[Pe"ik4tsaX:7Ko(9'a3S98M"!_lSgl+!)"O.'T2($HL(Xo+&bf*I2\%ga'JCjF+.T"Ct&jVEtOG%bHe832J$DCco=(ILqY1-M!(k;U/#tU<mkRZr[S&/S$_&q;#/]FjM8P\Z@ArTtTKFm2S4a1+)SjaP?kW%,G;*;:RoEXP&!`&>^[4FjEFi$n#FA`AYNlo4$cPH+K\I0C_-Z3a,pS\RjSc\+s_\.r[%AclV=<&jcKR.VO`a6I98dY8V\S3`oTcP%!ApDg\AB[FaeDP%`]\G9Cr5"&8rGH2r\2<jH,8]P%M@/gk-\VE(/9]9j4-.KpESl=#I%^ApeGlSl3shJa5tEtg2'HnR!!<RSN`>H%=(H%YWB`M-1\*WFNkP$G'+:2lesJSRAJ:+-M=0=Z,LO\7/n=%H8Q(A^)C#?+H(bq?A8cbVM9^N-4UeOaa';5T:8F=RA>?fE-^h[E%aA`UR>"OrO.YG0:\i98C?!cf;X*`u+6Ca5GgF-Y>84la:-WJloZMBd>T/*0]0h1_E[M)U9/6MdbF^qlN%Z+X^26:$ug2PER*!HV>%HlmC:N+MVu"hnd,JYfS:qOP\5QKIH1Cq`'"iH-t@ppq0a0)(67buXAhQKKUK9^YJi&sHT`;/^>tEUJuRrS_u^T)NALq@d3EE;*,2%IF`[`mgQh>GO!mFrBVq?#>^UshdD#KggTLF>`cj/.T(\D6Y:$^/bMRoKi,?_JdhQX9=8Q`.t#f(QIlQc3X"sUfaTt$2iIscdMQQ6%4&an7o6h*7T^)DdOhNMd\ilDI^/1/3V"B$/>AZUW?K,Gf"+>ri"cIk=oWr5:$\Eh4OPr&WeolLDq>3ue!/:u4_gikZ'S1N6]@4La%INII5OmB;Hg$_hl0'qq7ilZ-(aX)\peW\0?n68%+q5p&`"Y&Trn*2"f#-4,t5X!E<PoGI9+Osb@r1][ap+?oD3\^!]Mf#a?G]XfX%)d.JpUGD+H24^,Fp1C`UNMTC>ENn1,JIg\r.J=/YF2bkX3*.8T+@\h\e,9T?MT2LU.n7F\)gA->L,:Dj19f5T'PqE?IBuiDrFU!^%hf'&CJ).;eDr?I5Il$(J8@O_hnX#]\\SeQ96IL(<dDYH-6c3D72kY4:(#S8-ds4't&[)!5Ukl58A)a)_pf!n7FHt6TlP_df2:EC3%MKQAVUQ'E)J!3(K9lPBC]8=JUn/e,CH+Qf<"4"4qhPh,o_P"uLS/rsZ(#@+B6GL@!I_)-afKjuhb"*-Ac4LFp3RZ-<3_eQ$PO5ti%9]BkMW<=VklU=cGDm+a2>Y8A.'US]_\E(`ngtbYs1T2KTl%Ih'Cg4XZ>DmEA$-AHX'k2fVY:0O1V,$r_6IL;aGtr+6?Y!_]9(&E?%D\(?tqeBU*%lk%GTlmbk4-K"FOl+2+2F\WZN%O@.=-AnA\!n55UB#n-Q,Oqk*X*GXRXcrT@fnKq@7t+1i@\gJPgNt0%KQC'XX0c!%'lq=>I^4")E%ao4LE2TZ>sW=RSk`GOD#bMFXd!j8kimWa5gDP4D2ZjEEKUu8B1S43TGj\A)!SIf"E)5if0C2B)/%9l#',]4f$^RP%268-]Ha$68n/;TO9p1Dk(ug\Y8IaXmZ:"-N`e^UH$`ud]H]ugcd5Q8sZ;#I:%c'0FT^2Y8a1ZG<T(H*Mm(dVPP=Du/R?$1,@Pmq_%B->\<i&!10rALLIR]g;#"@)N;P,ZLjlI?GrToN+!18gH(C/+$Zd%i(e4:cQtATi+Dch.Ar=<A<@FeInE#b[[!A?il`dbM*2O!\.u%h*hbZBMt/Pgk*L=@)ISY(h9!0NW)@.:,&UdLCLh*bZ<q<m'FgG#XI=lo\,c:*;-2l1f>36#m;([D=uSl`pc[%`&;Sc9%&P)``Z<W%$"GhSblo!Q-O&(jQ,92o`(Lh`]2-Z%aF3./eTn)@THs;P-l_,:$*2*aMhbs0L'_pH]qC-g\r*Y0kW9D[W$nV#AD5s6cog8*OtW3d%aL34VY7UnX:g1'mSi]T9*,^a>aV*l@otH$D:c9,sfHOM+@Jgq89bBM/P**(3Eugb)A8nUB6:p&X#S9L)%<L6N.r@Po'\mjRfLK!4%;'61rEZRL@G*.m#o<Z$'0;gm%S\dXT4W6SGR"hq&RSDOP<p@sZ)Rm91;VFkQfmuR!T0^F4jgV+s;&2b$%Eiq%JaPHkl7s1V=*DdA%%ejI]HTh;Y_aYP0gSonLKU41),+Jod#+'VuKX<!Ch6bcoG74Bn:*RjGi/R]S(+bPMH/4sGGUpBdnrA8CipEArfojhnOrPJTJ!AdK%#+>_08`C`.M==i.!6F:\p_&3%P.mHK`[]GP6(3U!"-!q0O@2-'`r_P<?lX&K;jh]ZO0ku@Q-6'N+Ol5rEIDM%]q8XADd7fkm^*8H%p5U9RgijH8-F$=a;k>tAEl3n6+sAkC6j0t&dF41_?_4@sXGi?a]'i2!!TR3mPsj[cLbV,(jVXq$\_-7W<hW&[CPWmDLJoW4nq;OX%hApH/E_RCD.oGq+LXR`31=:h!OiBP"ag:A`:51;mJ(\g;:a;]tRG0G!DVIIj"?%p2T>oIpK]m_@d4@giW?B[!1.L";3,u=S,-l.i%S*#[gB6/]Q;[%G4NjDr2^dJTE=P@Q]8T)de(;%h\1J'Hnbr!M@2/n7p+OE3<<d`rO=Whd(mYJN-9eu1BX6fGJLdd?uGqGk2EaEKI%Ucc%4X%K\<"]^_eA*9osjaq;*p8iarQS\5"5?3=sT,^GXbZI5_4!?G*=g_FE*\kT^YtXO?RJEa=(`m]37tJ"^?Jt&^mG'lZ6g&!?%QVn2&ACD/L24!dgV26R/<,-SoC37qPR&dE&o^0IGVp,.dG@1==(Z0]<r6$1"T7?Y2j82W%J,8=3ID%V:s8;6J(]X%$dgnZls7Gu.%hgKj`rU&]j+$[N,U-F#$VcBt'If88M+5T4HIJrQ:kL6VArqc06kGRc4rp@`jrUf`o+27cuB9\U"J$[pK5Q$qgQAC"%fQSE%J,]4p%K!I--B#3ASr$tD<bPL\`I/<\P:]LB#msb/i]<AsIFoUL*If.Z5huEYmVk="eh,dt^qtohHr;P1B+.b]EHM@A6n,N."e,(5:PTG;K%lh\fRpRaYIo_IOF%o5Fgjl?@IZ9GPQ?[_UJJ,@iArt")U/I)~>%AI9_PrivateDataEnd
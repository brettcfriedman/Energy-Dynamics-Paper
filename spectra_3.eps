%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: spectra_3.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Troy Carter
%%CreationDate: 8/6/12
%%BoundingBox: 0 0 217 189
%%HiResBoundingBox: 0 0 217 188.1993
%%CropBox: 0 0 217 188.1993
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 112 8%%BeginData: 8442 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD1EFF7D27A8FFFFFFA87DA8%A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A8%7DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8%A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A8%7DA8A8A87DA8A8FD10FF7DFFFF7DA8A85252A8FFFFA8F8FD6127F87DFD0F%FFA852FFA87D52A87D27A8FFFFA827FFFFFFA8FD0BFFA8FD06FFA8FD05FF%A8FFFFA8FFFFFFA8FFFFA8FFA8FFA8FFA8FD0BFFA8FD07FFA8FD0BFFA8FF%FFA8FFFFFFA8FFA8FD0BFF5252FD10FF52FF52A827FD06FFA8F87DA8FFA8%FD28FFA8FD28FFA8FD09FFA8A8277DFD0FFFA852A87D5252FD06FF7D27A8%FD60FF5252FD10FF7DA8FFA8A8FD06FFA8F8A8FD60FF277DFD1BFFA827A8%FD3DFF52272752FD0CFF7DA8FD0CFF7DFD04FF5252FD1BFFA827FD30FFA8%7DA87DA87DA87DA8FD05FFA8277D7D522752525227FF52527D5252527D52%275227FF7D527D52277D7D277DFFFFFF527DFD1BFFA827FD30FF52522727%2752272752FD05FFA85252A8A8F8A87D7D525252277DF8FF7D7D27FF27A8%5227522752A827FF27FD04FF7D52FD1BFFA827A8FD3DFF7D27A852522752%525227A8277D7D27A87D52277D275252F87D52527D27A82752FFFFFF277D%FD1BFFA852FD3EFFA8A8A8FFA8A8A85252FFFFFFA8FFA8FFFD07A8FFA8FF%A8FFA8FFA8FD04FF7D52FD17FFA8A8FFFFA827A8FD44FF7DA8FD1AFF277D%FD16FF7D27FFFFFF7D52FD08FFB5BCCAFD33FFA87D27FF52FD09FF27FD04%FF7DFF7DA8FD0CFF7D52FD0FFFA827FFA852527D52527DFFFFA827FFFFFF%52F8F8F8274B68B068FD04277D52A8A8FD2AFF7D52A8A8527D7D527D52A8%7D7D7D27FF7D52FFF87D27FFFD047D52A8FD06FF527DFD10FF7DFF7DA852%FFFF52FFFFFFA827A8A8FD04FFFD05A8A2A8A8A1A1525227F8F85252A8A8%FD17FFCAB5FCB5BCFFFFCABCFD06FF5227A827FF277D5252FF52A87D27FF%5252A852FF7D7D277D5227A827FD05FFA85252FD10FF52FF52A827FD06FF%A827FD0EFFC4FCBCC3FFFFA87D7D2727F8527DFD22FFFD047D27FF277D7D%52FF275252277D5252A8277D52A8277D5227FF27FD06FF527DFD0FFFA827%7DFF277DFD06FFA8277DFD0FFFBCB5CAFD06FFA87D52F8277DFD1FFFA87D%7DFF527D52FD077D52A87D7D7DA87D7D7DA87DA8527D52FD05FFA85252FD%1BFFA827A8FD14FFA1FD07FF7D52F8277DFD3FFF277DFD1BFFA827A8FD14%FFBCFCBCCAFD07FF7D52F87DA8FD19FF7DA8FF7D7DFD0DFFA8A8FD0FFF52%52FD1BFFA827A8FD16FFBCBCFD09FFA852F827FD18FFA8F8A852A8A87DA8%FFA8A87DFD06FF27527DFD0EFF277DFD1BFF7D27A8FD1BFFC3FD08FF7DF8%52A8FD07FFA97FFF55FF7FA9A97FFD05FF7D7D27527D277D52FFFF277D52%7D272727A827A827FD0EFF5252FD1BFFA827FD1BFFC3B5FCC3CAFD07FF52%F827A8FD06FFA9FF7EFFA9FFA9FD06FFA87D7DF8A8F8FF27FFFF27FF7D7D%272727A8277D7DFD0EFF527DFD1BFFA827A8FD1BFF5BCABCFD0AFF7DF87D%FD12FF7D7DFF7DA8A827A8FFFF277D52FD05FF7D52A8FD0EFF5252FD16FF%7D7DA8FFFFA827FD19FFA955FD04A9FFFFFFBCC3FD06FFA827277DFD33FF%527DFD10FFA8FFFF7DFFA8A852FFFFFFA827FD17FFA97FFD04FFA97FFFFF%FFC3B5B0CAFD06FF7D2727A8FD31FF7D52FD0FFFA827FF7D7D27A8A852FF%FFFFA827FD15FF7EA9A9A9FD06FF557FFFFFFFC3A1FD08FF7DF87DFD30FF%527DFD10FF7DFF7DA852FD06FFA8277DFD12FFA9A9FFA9FD11FFC3B6C3FD%04FFA8F852FD2EFF7D5252FD10FF52A87D7D27FD06FFA827A8FD0EFF7FFF%2BFF7FA9FD0BFFA92BFD07FFC3B6FCCAFD04FF27277DFD2DFF277DFD0FFF%A8A8A8FF7DFD07FF7D27A8FD0BFFA97FFF55FD1FFFCAFFFF7D2727FD2CFF%5252FD1BFFA8F8A8FD07FF7FFF557EFF7FFD13FF7F7FFD0CFF93B5C3FFA8%5227A8FD2AFF277DFD1BFFA852FD08FF5BFD27FFCAB5B5FFFF7DF87DFD29%FF7D52FD1BFFA827FD22FF7FA9FD0EFFCAFFFFFFA8F852A8FD27FF527DFD%1BFFA827A8FD21FF7FFD12FFC3C3FF2727FD26FFA85252FD1BFFA827FD23%FFA9FD11FFA1B5BCFF2727A8FD25FF527DFD1BFFA827A8FD22FF55FD12FF%CAB5BCFF7D27A8FD24FF5252FD16FF5227A8FFFFA827FD3BFF7DF87DFD23%FF527DFD0FFFA852FFFF527D7D7D52A8FFFF7D52FD23FF8555FD16FFCAA8%2727FD22FF7D52FD10FF52FF52A827FFA87DA8FFFFA8F8A8A8FD38FFCA8C%C3A852F8FD1FFFA8A8277DFD10FF7DFF7DA852FD06FFA827A8FD23FF5BA9%FD16FFB0C3FF5227FD20FF5252FD0FFFA8277DA85252FD06FFA8F8A8FD23%FFA9FD17FFCAB5FFFF2727FD1FFF277DFD1BFFA827A8FD24FF7FFD1BFF52%F8A8FD1CFFA85252FD1BFFA827A8FD24FF7EFD1AFFC3FF7DF8A8FD1CFF27%7DFD1BFFA827A8FD25FF7FFD19FFB5BCFF7DF8FD1CFF5252FD1BFFA827FD%26FF5BA9FD19FFFCC3FF5227A8FD1AFF527DFD1BFF7D27A8FD26FFA9FD19%FFCAB5FFFF7DF8FD1AFF5252FD1BFFA827FD27FF2AFD1EFF52F8A8FD18FF%527DFD16FFA87DFFFFFFA827A8FD27FFA9FD1EFF5227FD18FF5252FD10FF%A8FFFFA8FFFF527D7DFFFFA827FD28FF2BA9FD1AFFCAFCCAFF5227FD17FF%527DFD0FFFA827FFA827527D7D27A8FFFFA827FD45FFC3B5FFFF5227FD16%FF7D52FD10FF52FF52A827FFA8FD04FFA827A8A8FD27FF2AA9FD1BFFBCBC%FFFF5227FD13FFA8A8277DFD10FF7DFF7D7D52FD06FFA827A8FD4AFF2727%FD13FFA85252FD10FF527DA8527DFD06FFA827A8FD29FF557FFD1FFFA827%27FD13FF277DFD1BFF7D27A8FD48FFC3C4FFA82752FD12FF5252FD1BFFA8%F8FD2BFF54A9FD1CFFC3B0CAFFA8F87DFD11FF277DFD1BFFA827A8FD49FF%BCB6FFFF7D27A8FD10FF5252FD1BFFA827FD2CFF5BA9FD1DFFBCFFFFFF52%27A8FD0FFF527DFD1BFFA827FD2CFF7FFD23FF7D27A8FD0EFF7D52FD1BFF%A827A8FD2CFF7EFD23FF5227A8FD0DFF277DFD15FF27FF277DFFFFA852FD%2DFF55FD1FFFCAB5FFFFFF5227FD0DFF7D52FD0EFF52A8FF7D52A8FD047D%52FFFFA827FD2EFFA9FD1FFFBCB5FFFFFF2752FD0CFF527DFD0EFF527DFF%527D7DFF52A852A8FFFF7D52FD2EFF2BFD1FFFCAB5C3FFFFFFF87DFD0BFF%7D52FD0EFF52A87D7D52A8FD07FFA8F87DA8FD2DFFA9FD1FFFCAFD04FFA8%F87DFD08FFA8A8277DFD0EFF5252FF2752FD08FFA827A8FD2DFFA92BFD25%FF7DF8A8FD08FFA85252FD1BFFA827FD51FFCAC3FFFFFF7D27FD09FF527D%FD1BFFA827A8FD2FFF2BFD21FFB0CAFFFFFF5227FD07FFA85252FD1BFFA8%27A8FD51FFC3FCFFFFFFA82727FD07FF277DFD1BFFA852FD31FF31A9FD20%FFBCC3FD04FF2727FD06FF7D52FD1BFFA827A8FD58FFA8277DFD05FF277D%FD1BFF7D52FD32FF55A9FD26FFA827A8FD04FF7D52FD15FF7DFF7DFFFFFF%A8F8FD55FFCAC3FD04FF52F8A8FFFFFF277DFD15FF27FF27FFFFFFA852FD%33FF7F7FFD21FFB0CAFD04FF5227FFFFFF7D52FD0EFFF8A8FF5227A87D52%A852A8FFFFA827FD33FFA9FD22FFC4FCFD05FF2727FFFF527DFD0EFF7DA8%A8527DA8FF7DFFA8FFFFFFA8277DA8FD32FFA955FD21FFBCC3FD05FF2752%7D5252FD0EFF52A8A85252A8FD07FFA8F8A8FD34FFA9FD29FFF852277DFD%0EFF5252FF527DFD08FFA827A8FD35FF55A9FD27FFA8272752FD1BFFA827%A8FD37FF7FFD20FFC3C3FD05FFA8F87DFD1BFF7D27A8FD37FF7FFFA9FD1F%FFFCCAFD05FF5252FD1BFFA8F8FD39FFA92BFD1FFFC38CFD05FF277DFD1B%FFA827A8FD3BFF55FD1EFFBCCAFD04FF5252FD1BFFA827FD3CFFA9FF55FD%22FF527DFD1BFFA827A8FD3DFF7FFF7FFD1FFFA85252FD15FF27A8277DFF%FFA827FFFFFFA8FD3BFFA955FD14FFA8FD07FFA1C3FFFF527DFD0EFF7DA8%FF7D7DA8A852FF52A8FFFFA827FFFFFFA8FD28FFA8FD15FF2BFD12FFA8FD%08FFB0CAFF7D52FD0EFF27A8A85252A8FF527D527DFFFFA8F8A852A87DA8%7DA87DA87DA87DA87DA87DA87DA87DA87D7D7DA87DA87D7D7DA87DA87DA8%7DA8FD097DA87DA87DA87DA87DA87D7D7DA87DA87DA87D7D7DA87D2A52A8%7DA852A87D7D7DA87DA852A87DA852A87DA87DA87DA87D9A68A8277DFD0E%FF7D7DA8527D7DFD07FFA8FD042752272727522727275227272752272727%522727275227272752272727522727275227272752272727522727275227%272752272727522727275227272752272727522727275227272752272727%52272727522727275227272752FD06277DFD0EFF2752FF2727FD8EFFA87D%A8FD27FFA8FD28FFA87DFD26FFA8FFFFFFA8FF527DFD22FFA8FFA8FFA827%7DFD21FFA87DFFFF7DFF527DFD26FF277DFF27527D7D7DFD21FF277DFF27%27A82752FD21FF7D27FF277D7D5227FD26FF52A87D7D52A8A8FD22FFA852%A8527D52FD24FF27FF277D7DA8FD27FF7DA8FF277DA8FD23FFA87DFF5252%A8FD24FF27FF277D7DFD28FF527DFF7D7DFD24FF7D52FF7D7DFD24FFA8A8%A8FF7DFDFCFFFDD7FFA8527DFFA87D527D7D7DA8FFFF7DA8FD71FF7D27A8%FF7DA87D7DFF27FF527DA827FD71FF7D7DFFFF27FF52272727A87DF8FF27%FD71FFA852FFFF52FF7DA8FF27FF27A8A852FD71FF7D7DFFFF7D7D52FD05%7D52A827FD76FFA8FD07FF7DFDB7FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:CreateDate>2012-08-06T12:03:27-07:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>224</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA4AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhDrGkDT3&#xA;1I31uNOi5+pemVPRX02KPykrxHF1KnfY7Yqk/m7zrZ+XdNhvRbvqPrSrH6du8Q4I0by+tI8jIiRB&#xA;Yz8bGmKp3Pf29vp0moTHjbxQm4kYfHRFXmSONa7eGKvOIf8AnI78sp0jeGTUpUmXnEyaZfMHTb4l&#xA;Ii3G43GKqif85D/ly6K6fpRkYAqw0q/IIO4IIixVv/oYT8u/DVf+4Vf/APVHFXf9DCfl34ar/wBw&#xA;q/8A+qOKtL/zkP8Aly4qv6UYAkVGlX53U0I/uuxGKuf/AJyH/LlEZ3/SiooJZjpV+AANySTFirf/&#xA;AEMJ+Xfhqv8A3Cr/AP6o4q0v/OQ/5ctXj+lG4mhppV+aEdv7rFXL/wA5D/ly1eP6UbiaGmlX5oR2&#xA;/usVWj/nIn8tiiOG1MpJTg36LvqNXcUPpb1xVx/5yJ/LYBiW1MBDRz+i774SQDQ/uttiMVXL/wA5&#xA;D/lyxYL+lCUNGA0q/wBjQGh/deBxVv8A6GE/Lvw1X/uFX/8A1RxV3/Qwn5d+Gq/9wq//AOqOKtD/&#xA;AJyH/LkuUH6U5gAlf0Vf1ANQDT0u9Dirf/Qwn5d+Gq/9wq//AOqOKtL/AM5D/ly1eP6UbiaGmlX5&#xA;oR2/usVcf+ch/wAuQ4Q/pTmQSF/RV/UgUBNPS7VGKuP/ADkP+XIcIf0pzIJC/oq/qQKAmnpdqjFX&#xA;L/zkP+XLFgv6UJQ0YDSr/Y0Bof3XgcVWj/nIn8tiqMG1MrL/AHZGl31GqOXw/ut9hXFXD/nIn8tj&#xA;SjameTFF/wBxd9uy1qo/ddRxOKr/APoYT8u/DVf+4Vf/APVHFXf9DCfl34ar/wBwq/8A+qOKq2n/&#xA;AJ9fl5fapYaZHLfw3WpXEdnZ/WNPu4EeaU0ROckaqCfnir0TFXYq7FVlxHFJBJHMglidWWSMjkGU&#xA;ihUjvUYq8kstC1L/AAvogg0S4S10PzZqGqXGkmFYnawnutQkt2hhcoremt3DIEG440A5CmKsh8mf&#xA;l9Z/4IttN16wNvcvLdyPDDK0EsdvcXM8kFq8tq6ErFb3AjKBynhtirJfM0MUHk/VoYUEcUWn3CRo&#xA;uwVVgYAAewxVgX/OOvrXv5b6FezX73JsrRbKGD0okSJDFC5Tlw9RjUDfnQ7bbYq9M0yxSw020sEY&#xA;ulpDHArnYsI0CAmnjTFUTirsVWQwQwoUiQIpZ3KqKDlIxdz82ZiTirp4IZ4JIJkEkMqlJY2FVZWF&#xA;GBHgRiq/FVkUEMXP0kCeoxd6ClWPUn3xV0UEMXP0kCeoxd6ClWPUn3xVYtlZrBBAsKCG24/V4wBx&#xA;T0xROI7cR0xVzWVm6zK0KFbhg84IHxsqqoLeJCoo+jFVlpYpbXF7MrFjezCdgf2SsMcNB9EVcVRO&#xA;KuxVYIIRO84QCaRVR5KfEVQsVBPgC7U+eKr8VWRQQxc/SQJ6jF3oKVY9SffFXGCEzpOUBmjVkSSn&#xA;xBXKlgD4EotflirjBCZ0nKAzRqyJJT4grlSwB8CUWvyxV0cEMbyvGgVpmDysBQswUJU+/FAPoxVY&#xA;llZpHbRpCix2lPqqgCkdEMY4eHwMV+WKqMulW7S2bxj0hZ3El0EQCjPLHKj1+ZnZj74qjMVdirxr&#xA;85nuovOX5d2kmoyTwTeZ7K5WykjiAQqJlBSSONGoobjRiTir2XFXYq7FXYq7FXYqlXmz/lFdZ/5g&#xA;bn/ky2KsR/IDl/yqXy7Xn/vHBTn6/T0U+z6/7P8Axj+Dw74q9DxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;Vh3mzWfzQs9UEPlny3Y6tpvpKxurnUPqriUk8k9P0pNgKb1xVJv8Tfn1/wBSRpX/AHGP+vGKsq8n&#xA;aj51vba4bzVo9to9wjgW0drdfW1dCN2ZuEfEg9sVR3maOyl8u6nHfBDZtayicSkBOHA15E7UxV4P&#xA;+XkNtp3lOz1qPVNA0PVE8sW89jq0TGSUSlI3um1KJn+I0WMMaVDM3HfbFUw0380POd75Y0nVp/MV&#xA;lpt9ea7Fo+r6fPbRsdOWVZBSZiYjzPp81JAX4h1AxVVuPzi86/VbWGE2YpHrckWt8IEtL9tJvBbw&#xA;Mn1m7t0SF0bnN6bs56x/DU4qjbrzT5z1xvOFu2u2GnafpNnbzvYPAkk3C7sPWnheT1EoI3cIGpWp&#xA;37Yqk835p+b7W0mubDXNLjtdP0jy5epp88KuXl1NvQuI+ayo/GNUMniCV7dVU2m/NfzVFLDo6XNv&#xA;c3C6vqem3GtQR2yqVs4EntwY7i6t4EeT1SD+83WNuIqdlUDf/mz53tzLqT6np1tDa6FpGuXGkmJJ&#xA;A8l3O8FxDDOJeXpskfqo25+Ne3VVmXkfVNRf8y/OthfeYPrkK3UcmmaQ4X4bdrGzl9WH4iRHH6/A&#xA;8RxZjyPxHFUv/Oyv+IPy4+3T/FVh/v7hX05/D9xy+fx+G1cVerYq7FXYq07pGjSSMERAWd2NAANy&#xA;STiqTp5z8qvoaa6mqW76RLI0MN6rgxySpK0JjjI+23qIVAWpJ6VxVI/Nn5nadpWmWtzo6DWJb6RV&#xA;tmi5m39NoJbhpjNGkisqx277LU12xVOtfuY7vyTqV1GytHPps0qMteJDwMwIqFNN+4xVIfyNikj/&#xA;ACk8qc5nm56bbOocIOCmJfgXgqfCP8qp98VUNR/P38oNN1S60q+8yQW9/ZTyWt1C0dx8E0TmN1LC&#xA;Pj8LKRWtMVSs/wDOSX5Z/p79HJfx3Fm4X0dRt5ElUsRVg0IpKAvSoU18MoyZ+A7g13u40fZP5nHe&#xA;PJDxf9TPpPwJ2LID+dX5TKaP5s02Jx9qOS4SN19mR6Mp9iMujIEWHWZsM8UzCYqUdiEy0z8x/wAv&#xA;tVdY9N8zaVeStSkUN7bu/wAXSqB+Q+7C1MiBBFRuD0OKuxV2KuxV2KuxV2KuxV2KuxVB61qFjpuj&#xA;32o6hvY2VvLc3Xw8/wB1Chd/h/a+FTtirCoPPmjDRbvWbry1Jp+lpYx6hb3ly2nR21xFK4CRfWfX&#xA;9BJSxX4HcD3xVV80XP5ValqNtZap5h06zvNJujePYLe2kLma3Q8vrETEsRHGzcgegJriqfP5l8hv&#xA;Z2/PVdLay+r/AF60rcW5i+rQsF+sR1bj6aNQcxsD3xVAQec/K76zrlvdi0tLDTrXT7x9allhFtcQ&#xA;amZVhJkNF+3BQVYhqrTrirWp+cvy5sJ9FS4utPaLzBJJDp92jW7QN6ETyMzScgOH7rgCK/GVXviq&#xA;rbea/JM2ivf30+nWGmzXc9qr3NxZGGaS3maMMHSR42LcOQUnkvRgDiqIn8z/AJfNqy6ZPq2knV5j&#xA;HElk9xbfWXaQAxIIy3Mlhuopv2xVPEtLWOdp0hjSd1VGlVQHKL9lSwFaDsMVebfnXE/6Q/LqX1nC&#xA;DzfpymCicCTDcnnXjz5ClPtU9sVenYq7FXYq0/2GqvMUPwbb+29BvirzC28s+aW0LSpv0TJDeaJ5&#xA;o1DXf0bNNbB7i1vbi+kVYnjlliEiR6gpo7KOaEVpRsVZL5O8nLZeTINF8wW1teu1xdXlxbMouIEe&#xA;6vJbtUX1FHL0vWCg8e2Kpr5rAXyprAAoBYXIAHQD0WxVgf8AzjnbyP8Aljol1PJO0iW0cUKvNKYh&#xA;F6MZHGIyyR9Sd+IPsMVeouiOjI6hkYEMpFQQdiCDiqG/ROlf8sUH/IpP6YqgJvJ3lh7eSKLSbGF2&#xA;Qqki2sJKEigYArTbARtszjP1cUvVv82Ap+UkLahDY6/5a0HzHpMrHnqy2kNlfRVBJaQItHqdvgNT&#xA;1OUQGWJo1Id/V3GploMuMzxiWHKP4fqifceY+OytL+Qf5dae8a6Hf6r5UmnYrD+itVubcs5BJ4JK&#xA;8qk0rsF+jLyQHTxxykCQCa5+S4+Rvzl0Q8vLnnuPV4F/u9P8yWaS1/1ry19KY/8AA4WC1vzK/Mry&#xA;6P8Anc/Is1xZoD6mr+WpRqEe3VmtHEdwijqSa7Yqyjyj+aHkHzcTHoGtW91dLX1LFiYbpafa5W8o&#xA;SXY9TxpirKcVdirsVSPzD5I8reYpop9ZsFvJYFKRMzyLxUmpHwMvfKsmCE/qDsdF2tqdKCMM+EHn&#xA;y/SET5f8taJ5es3stGtRaWskhmeNWdgZGVVLVcseiDJY8cYCotOt1+bVTE8suKQFdOXw96NtrK1t&#xA;nneCMI1zIZpyCTykKqnLf/JQDJCIDRPLKYAJ+kUPdz/Ss1SG7m0y7hsnjS8lhkS2eZecayshCF1/&#xA;aUNSo8MLW8jl/JzzA+k+Z7awg0vQRr+lPpzaRYXN0+nPdSyDnfsjQRrCyx1Cxxxd6Fu4VTDU/wAt&#xA;/Nep+YLrWLi10pWu9X0fVTH9ZmkKppUfFo+ZtF5FiKqaDqfpVUZ/y088ixtTZNpdtfwnzHb+m008&#xA;kCW3mG5F2roRboxe2YBOBUKwFeS1oFVNPyw8+x2d1DBPp8Lyab5fskZLm4DO2hTNJIvqC3DweuJm&#xA;4yx1eMqCASfhVV9I/LTzrpdppkltLYG/0rXdR1e1huLu8uovR1K2uISr3EsfryPE91zPL+8oashb&#xA;ZV1t+WfnC2uRqSfo2W8S519ls5ppntzBr9wLkvy+r1EkBXgV4UkWvxLXFUNF+UXmayt5rS2Nhexp&#xA;YeXrC0u7m4mjm/3AXBuWkYLby8PWYgBQx48QanoFXsC8uI5ABqfEAagH2NBirxv85bVrfzl+Xfpy&#xA;TmCfzPZSyJJNLLGJCJqcUklZU2JoFSnuOmKvZcVdirsVdirsVdiqVebP+UV1n/mBuf8Aky2KsR/I&#xA;CBIvyl8u8Y/T9Szgdv3Sw8iYU+L4f7ytPtnc4q9DxV2KuxV2KpX5h8r6F5htFtdXtFuY4yWhY1WS&#xA;Nj+0jqQyn5HK8mKMxRDmaLtDNpZcWKXCTz7j7xyKn5Z8vzaHay2jandajbl+Vr9cYSSQx0A9P1AA&#xA;zCtaV7bY4sfCKsllr9aNRIS4IwlW/DsCe+uiDb8wvLMGty6NqE76ZexuVi+vIYIpwP24ZW+BlrsN&#xA;98h+YiJcJ2Pm5A7F1EsIywAyQPPhPEY+UhzCj5v/ACv8h+cFV9c0mGe6WjQ6jFWG7Qj7JS4iKSbe&#xA;HKntl7qWKf4b/ODyQTL5b1b/ABxoabtoWtyCPUUUdrfUAOLn2mWn04qnXk/84/KvmDUBol2tx5e8&#xA;0DZ9A1aM21yT/wAUlvgmBoacDUjegxVneKoRry7GrpZCzc2jW7TNqHJfTWRXVRDxry5MrFq9Nsu8&#xA;OPh8XF6rrh61XP8AQi90FBrOrSWOnXD6NPFPeXHo3Vq0kRa1j+P99IQeLL8C7Lv8Qy2WnxiUgJgi&#xA;IsGj6jtsP29yOI7bJhaXE8z3Ky2zW6wymOJmKkSpwVvUWnQVYrQ77ZROAAFG7Hy8kgqWtx+po98n&#xA;N46wSUeJ3icHgd1eMq6n3BytLxfQ/Mfma31DyZ5S8z393LqU93Dd6Zq0U88I1LTJLSWZ47j0mRXm&#xA;t5ljWQN9oUbozYqzPyf+Zmo63qWiJdafFBYeZbfULrSzFI7Twrp0scRS5VlUVkEvKq04H4DXriqn&#xA;qv5g+abHzff6atjZzaNp19o1pcT85FuCmt3Ato2Vd0rFIylvEeGKoHWfzvfTdYvtO/RUMn1O4lt/&#xA;UM1+C3pOUqQmnSKK0/Zdh7nriqF13zF5jj1jX9Vi1W4huNF8y6Po2n6MoHoS2d6LITK8XH948/12&#xA;Rw5+JeA4ECtVXr2KuxV2KvKfzshX/EH5cTen8Q81WCer6S7Axznj6v2h0+z0PXtir1bFXYq7FVss&#xA;iRRPK9eCKWagJNAKmgFSfoxVjUf5iaDJ5et9bSO7Md5eTadZ2JgdbyW7t55YHhWBqMrcreQ/HSii&#xA;rU3xVA6355ubryy2reVJELqFML31nO8U8sjtbR2iUltSk7XZSNuTfDvVfBVPfMonHk/VROytONPu&#xA;PVZAVQv6DciqksQK9AScVY9+RsHpflJ5U/ePJ6mm2z/Ga8axL8K+CinTFWc4q7FXYq7FVC81Cxsh&#xA;Cby4jtxcSpbweq6pzmkNEjSpHJmPQDfLMeKU74QTQs10A5n3IJAS+SbW9QW4itVfR5LO+jRZriOO&#xA;dbm2jKPIUVX+FZVLICSGGXiOLHRl+8EoHYEjhluBe3Tn3FG58kHq/lmJ4rhY7GPV11S9ilv4NSmZ&#xA;4oouKxyPArLIFKolVVab9+gwGWPMBHLtGECBURudyL+J5t2DUZcEuPFIxl5Gvx7kY2pfpDSr5PK9&#xA;zaSXtlI9mvqcjBFcQkB4pBHRhxG22UajT5MYFjhMogi+48iy008RyA5eIwv1cP1fb1QPlzzH5hub&#xA;9tK17QpdPvUjMgvYWE1jIqkD4Zagqx5bIRXMXHkkTUhR+x2Gu0OCEPFw5ROF1wnaY+HUeav5x8ie&#xA;VPOOnfUPMOnx3kSVa3lPwzQOf24ZVo8bbfsn55e6lgXp/mv+W+8Rm/MDyZHT925H6es4+/FtlvVX&#xA;3o/yAxVn/k7zt5Z846Quq+X71Ly2J4SqKrLDJ3jmjajI48CPltiqeYq7FVK7tLa8tZbS6jWa2nUx&#xA;zRNurKwoQfniqATyv5eSPTYk0+FU0eQy6WAv+87lGQmP+WqyMMVdp3lby1pmoT6jp+l2tpf3IYT3&#xA;MMKJIwdg7jkoBozjk3i253xVC3vkPybfXFxc3mj209xdyRTXUroC0kkBJidj3MZNV8MVT7FUsn8s&#xA;eXZ9Zi1ufTbaTV4FCxX7RIZlAqFo5FfhDMFPapp1OKpnirsVdirzH864f9yH5dTc32836cnp1+De&#xA;G5PKn822KvTsVdirsVablxPGnKnw16V98VefweQvMY0axSS4s11XSdfvPMFjx9VreQ3013I8EpIV&#xA;1ouoOgcA9A1O2Ksl8leW38ueXINKluBdTrLc3NxOq+mrTXlzJdS8VJYhRJMQu/TFVfzZ/wAorrP/&#xA;ADA3P/JlsVeff8422sTfljpF25je4WGOJHjd24x+jGeDBiQGqdwMVerYqg77WdLsba9ubm4RYtNi&#xA;NxfBayPFEFL8mROT/ZUkbb5dj085yjGI3maj5n38kGQCyHVxPfW8EFtNJaXVqbuPUQB6H2lCxkk8&#xA;g7K/IfD0BwywcMSSRxCXDw9eu/u6IvdDWkPme4h0q4vbiCwuYWdtWsbdPXhnVkZVRJZODpxYq9QO&#xA;1OmWTlgiZiIMgfpJ2I86Fg932qL2RFpoVnAk6StJerNdvfAXjev6crNyURcx8CxkfAB9ntkJ6mUi&#xA;CKjUeH07WPPvJ696iKYZjsnYqk+q3Een6jptzNqsen2E0zWrWDRx0u7q6IEAEh+NWDBjRftd+mZe&#xA;CJyQlEQM5AXxWfTGPPbu+5iTRG6cZiMmP+ZfJ8OtXEN9DqF5pep2qFLe7s5So4k14vEao6167b+O&#xA;U5MPEbsguz0HaZ08TAwhkxy5iQ+48wmGg2usWumpBq98uo3qMwa7SIQc1r8FUUkA8etMnjEgPUbL&#xA;jazJinkMsUeCH82+Ku/d5jqflvQPMPme58w/l5ry+WfP0BeLUImiIivVQ7re2cgX1B4SqKitdyBS&#xA;MM0ZGgd27V9l6jBETnH0S5SG8fmE68nfmpPNrQ8o+ebFfLnnMCtvFz5WOoJWnq2E7far3iY8x70a&#xA;lrr3omKuxV2KuxV2KuxV2KuxV2KuxV4v+ctpBbeefy7MPBBP5ls5Zk5uZGc+t8QQnjx360xV7Rir&#xA;sVdirsVdirsVSrzZ/wAorrP/ADA3P/JlsVYt+QyTL+Unlj1Q45WFu0fNw9UMS0K0A4r/AJOKs+xV&#xA;QisLKG8nvYoI0u7oItzcKoDyLFURh2G7cORpXpXJyyyMREk8Mbod18/mihzV8gl2KuxV2KuxVCaq&#xA;motYTfowQfpFVJszdBjCJKUBfhR6f6u+W4DDjHHfB1rnXlaDdbK9tIZLeN2dHcqObRGqFhs3H2rk&#xA;JiiUhUyKuxVKdX8qeX9XubW7v7JJbuzkSW2uRVJVKHkBzQqxXxUmmVzxRkbI3Dm6btHPgjKMJERk&#xA;KI5jfyPXz5sf/Niw8m33l1IPNulzX2lPKFa9t4y0lixG10JF/eRcTT4lr4UPTHLlEBZ5Muz+z56q&#xA;RhAxE6sAmuLyHmxHRfPOu/l69nYectQOv+Rr2iaJ58X42i5GkcGpla/IT9+/fjOMgRYcTLiljkYz&#xA;BjIcwXsUM0U0STQuskUih45EIZWVhUMpGxBGFrXYq7FXYq7FXYq7FXYq7FXlv52JN+mPy5ej+j/i&#xA;zTwTzHDl6VxT4OvKn7WKvUsVdirsVWzSenE8nFn4KW4IKsaCtFHcnFWIw/mPby+XrHVBpd0t9qWp&#xA;XOjWekM0InN3az3ELo7+p6KgCzkdiHOw25HqqkHm7zv5t1Xyfb6p5KsryBpp5I3uBEk8kb26XEc0&#xA;MkMcd64Md1AsZKxspO1QpLhVmeuyTy+R9QkuFKTvpkzSoyhWDm3JYFQWoa9qnFWOfkU2nR/lT5Wh&#xA;t5I/WfTbeSaMOGbmYlDErUkdMVZ/irsVdirsVdirsVdiriAQQRUHYg4qlXly2NnaTafHpMekWFlM&#xA;8OnQwujJJAKMJQqAenzZm+E79++ZWrnxyEzM5JSFyJvY92/Ou9jEVtVJrmKydirsVaZVdSjgMrAh&#xA;lIqCD1BGKQa3CTW/lHyvYaRf6bFp0X6JvmklvbEqZYn9RQHAiPL4SF+wop4DK4Y4wGzlanWZtTKJ&#xA;yS4pACIJrl5n9JeR+XdT1f8AL7T/ANJeVDP5s/Kvk7T6WvxaronxcnEat8U0Kbkxt8QG9aVZjjyR&#xA;mLC63Q5dNk4Mgo/YfMHq9l8u+YtF8x6La61ot0l7pl6nqW9xHWhFaEEGhVlIoyncHY5NxExxV2Ku&#xA;xV2KuxV2KuxV5Z+c76fLq35eNHJG93H5v0+NlVwWVfSuOQKg/wAwHbFXqeKuxV2KtNy4niQGp8JI&#xA;qAfcVGKsHh/LrUl0a2tpNXhOpadrN1r2m3sdoyxJcXktxLKksDTyGSP/AE6VRSRTxpvyHIqsi8qe&#xA;XLfy5oUGkwzPcCN5ppbiQANJNdTPcTvRdl5SysQOw2xVd5s/5RXWf+YG5/5MtirA/wDnHCxSL8q9&#xA;GncI80kMZWQRqjKhhj+DkN237nFXqOKuxV2KuxV2KuxV2KuxVJ547ez8xwXK217cXGqJ9WeaNne0&#xA;t0gVpQ0iFwkfMniGVSSfpzLiTPCY3ACG/wDSle2xqzXvY8j704zEZOxV2KuxV2KpDB5O06181SeY&#xA;rKSW0nuYzHqFrEQILlv2JJFIPxrvuKV++tQwgT4g7KfamSemGnmBIRNxJ+qPeAe4/jpXP9W8ua/+&#xA;Xuu6h5k8gxfpXQLmUT+ZfI8JUPG7L8V1p4r8EhFGaKnx9v2eNluvMCACRseT0byj5t0LzboFrr2h&#xA;3AudPu1qjU4ujKaPHIp3V0OxGFinGKuxV2KuxV2KuxV45+dNlHH50/Li4iCRh/MtkJFWNQzOwmPI&#xA;uPi7dMVex4q7FXYq7FXYq7FUq82f8orrP/MDc/8AJlsVYp+QaFPyk8t1kWTlZQN8MskvGsKfCfUZ&#xA;uBH8q0UeGKvQMVdirsVdirsVdirsVdiqD1jTn1HTZrJLyewaYAfW7Rgk6AMCeDMGAJAp0y7BlGOY&#xA;kYiVdJcviiQsO0fVLfVNPivrZZlhl5BPrET28h4MU5GORUcBuNRUbjfHPhOKZiasdxBHzFrE2LRm&#xA;UpdirsVdirsVYlr/AJT1BNdg8y+WXjttW5JHqdtISkF7b1AIlKhqOg+y/EntmPkxHi4o8+vm7vR9&#xA;pYzhOn1AMse5gR9UJeXkeotiHm7y95i/L3XNR8/eSLZL3R7xfrHm3ysCU9Uxkcr2yCjis/CpkHRu&#xA;u7ZkOkekeWfM+heZ9Ftta0O8jvtNul5RTRnv3Vgd1dTsyncYqmmKuxV2KuxV2KvK/wA7EP6c/Ll+&#xA;YoPNenj0vUfl/d3B5elX0yP8rjXtXFXqmKuxV2KrZndIndEMrqpKxggFiBsoLEDf3xVhEH5iajJ5&#xA;e026bS4k1vVdZvNCtrA3DegtxZ3F3E7PcCItw9Owd6iPfpTFUp1vXPOfm3ydb3/l6yktJDcXELQW&#xA;t2yzNc2wurSWKVwLbhFHdRq6yLIeZVQyhGYhVmeupdp5H1BLxxJdrpkwuJF2VpBbkOR7FsVYv+RG&#xA;p6RL+V/leztZENzHplubhEUj4xGobkaU5dMVeiYq7FXYq7FXYq7FXYq7FXYqk8t7Hpuuql/qUki6&#xA;y6QaVp/o1SJ4Y2eWkkaE/GKsTI1NqDMwYzkxeiI/d7ylfOztsT05bMbo7nmnGYbJ2KuxV2KuxV2K&#xA;sW863vmbSHtte0wm80yyDDV9ICrzeA0LTxN19SKn2a0IyjMZR9Q5DmHc9lYtPnEsGT05J/RPul/N&#xA;PlLvYJqtlf8AkW/f8xfI1q995N1lUu/NPluFGVwGAY6lZRMVAlCf3qUHICvutsZAiw6vPhlimYS+&#xA;qJovVdB17SNf0e11jR7pLzTb2MS29xGahlPY+DA7MDuDsck1I/FXYq7FXYq8n/OPU9JuNa/L+1ik&#xA;Vr+HzfYB14kOEWO4VtyOnKnTFXrGKuxV2KtMCVIBKkigYUqPcVqMVYhF+WtnHoyad+lr+Se31KfW&#xA;bDUn+qfWLa8uZJZZXjCW6QsrNdS1V422YjpSiqf+X9BsNB0iHS7HmbeEyPzlbnI8k0jTSyO21WeS&#xA;RmO3U4qp+bP+UV1n/mBuf+TLYqwr/nHa1lg/KXQy6Sr60EUqeq5kqrQxgFKpHxTbZfi/1jir0rFX&#xA;Yq7FXYq7FXYq7FXYq7FUNqUF7cafcQWN19SvJI2W3u/TWX0pCPhf02ID8TvQ9cswyjGYMhxRB3F1&#xA;flfRB5bKOialZahYLJa3qagIGa3nuo6ANNCeEtQuwPIdBk9RhljnUo8F7geR5LEghH5Ql2KuxV2K&#xA;uxV2KpN5n80Wfly2tbu9hkNjNOlvcXUYBS3D1CyS71CcqDbxyrLlEACeTn6Ds+eqlKMCOMRJA6yr&#xA;oPN5lqsF1+UOuz+ZdHg+sfljrMqS67p1vVjpdxIeJv7ZASDBJVfURRt1G1BlrgkEGi9itbq2u7aK&#xA;6tZUntp0WSGaNgyOjCqsrDYgjocUKmKuxV2KvI/ztt5D5s/Le54yemPM1jGX5n0uRWZqFOH2ttm5&#xA;9O3fFXrmKuxV2KuxV2KuxVKvNn/KK6z/AMwNz/yZbFWI/kAtsPyl8u+hJbOTZwGb6qgQrJ6KVWaj&#xA;Pyl/mY07bYq9DxV2KuxV2KuxV2KuxV2KuxV2KpbDPeQ6xNBd3FmlnOE/RVslUuWZFLXBfk3F9yCO&#xA;C7DrmRKMTjBiJcQ+o/w/0fd8WPVMsx2TsVdirsVdirsVUbyztb20ms7uJZra4QxzROKqyMKEHAQC&#xA;KLZiyyxyE4mpRNgpfpXlzS9M8vJoLFrvTFja3Md6RNzilJHpPUAMtG4BadNsjjgIRpv1mqlqcpyS&#xA;AEpc+EUPf+kvMLOW9/JjWYdPvJRN+Vus3jrYXLBueiXM55JBKxLA2sj14sfsnr/lTcR7IrKyhlIZ&#xA;WFVYbgg9xireKuxV5T+di2/+IPy4Yvb/AFj/ABVYARlB9Z4enPVlflX0q0qOPWm+KvVsVdirsVYt&#xA;511/W9I1Hywtgbf6lqeqx6fqIlR2lKSxu6+kQyqv92akg9sVSG68/wDmT/EMkdutomlDXh5ajhkh&#xA;kecSvYi5F20glReIlbj6XAck35iuKr9c8l+YdQ1XVJzaWU8N5HozXQd2ihv5NNneS4SWErOY0kSU&#xA;KgLP9gBqgnFU7bS7zSfyubS72YXN5YaIba5uFLESSw2nB3BerkMy1+LfxxVJPyH13Tb38r/LFpav&#xA;JJNa6bbxTt6MwjWRI15J6pQR8hyG3LFXomKuxV2KuxV2KuxV2KuxV2KuxVK9dtLhkiv9O0+1vdat&#xA;CVsHu29MRrMyrOVlCSOlUG/Eb0pmVpsgswnKUccvq4d7rltYvf5MZDqOaaAg7g17be22YrJ2KuxV&#xA;2KuxV2KuxVJ/Nnlq28x6LLp0ztBLUS2l0hIeC4j3jlWlN1P4ZXlxicac/s3Xy0uYZALHKQ6SieYQ&#xA;mk2F9r3lGTSvOmnRySzLJZ6jAxV4rhFPD1VC/ZEgHIdCDuKbY4jLh9XNe0oYI5j4BvGdx5X/AAn3&#xA;MF8i6vf/AJd+Y4/y28z3TzaPdEnyNrtwaiWEGn6NnkNB68NaJ/MtAKfCuWOA9dxV2KvJvzj1vT59&#xA;b/L/AExGkW9j832EhjkhmiBRI7hGZHkRUdeTDdScVes4q7FXYqlGv+VNE197F9TSd202b6zZ+jdX&#xA;NtwmAoJCLeSLkwHTlWlTTqcVWnyb5bOu/p02Q/SXqCcyc5PTM4i9ATmDl6JmEP7v1eHPj8NaYqnO&#xA;KpV5s/5RXWf+YG5/5MtirCP+ccoYYvym0X0vR/eQxPJ6DF/jMEdfUrJLxk23Hw/6oxV6ZirsVdir&#xA;sVdirsVdirsVdirsVcQCCCKg7EHFUo0Cx/RfraPaaXHp+iWCxrpkkcoYS8wXl/dU5R8HPUseVa5l&#xA;6rJ4lZJTM8kr4tuXdv1sfJjEVtWyb5iMnYq7FXYq7FXYq7FUp81X+s6foVzfaPape3tsBILVyw9S&#xA;NWBkVeO/PhXj75XllIRuIsub2dhxZc0YZZGEJbX3HpflfNJ9b0Xyp+Z/kX0J1E+n6hF6tpcAfvra&#xA;4AKpKhB+GWF69/Y1GGExIWGvWaSenyyxTFSifx80j/LHzvqsV+/5eedP3XnLSIQYLw19HVbNPhS7&#xA;gZqFnoP3q9a1PiFm4z0rFXkP52ww/wCMPy2m/desPMligqx9biRMTRedOFRueHWnxdiq9exV2Kux&#xA;V2KuxVCz6rpduLgz3kEItQjXXqSIvpLJshkqfhDU2r1xVCebP+UV1n/mBuf+TLYqxb8hn5flJ5Y/&#xA;ezS8bC3H7+P0+H7pfgj+CPnGOzfFX+Y4qz7FXYq7FXYq7FXYq7FXYq7FXYq7FUp8wWUTRRarHp76&#xA;lqek+pPpttHL6JaV4zGRVmWP4lYj460zK0uQ2cZlwQnQkava79/yYyHXuTSJneJGdDG7KC0ZIJUk&#xA;bgkVG3tmNIUWS7ArsVdirsVdirsVdiqWW9p5f8u2kvpCHTbW4uDLIWYIjT3DAftGgLNQAD6MrAjA&#xA;dzmTyZ9VIXxZJRjXeeGP6mPfmn+XFt520OKOGVbHzDpcyXugasVJa2uomDrWm5R+NHH00qBljhtf&#xA;lj+YMnmmzvbDVrZdN826FMbTX9LUkhJATwmiJ3aGYDkh+ip6lVIvzsb/AHMflyvqS/8AKWaefREf&#xA;7k/urj4jJw2cdAvPpU8e4VepYq7FXYqxDz5qmuabqflN9Ovvq1pe6xFY6jbelG5nimikYDm4Ypx9&#xA;L9nc167bqsduvOHmd/M0oS/MFmfMi+WV01IoTwhk04XP1rm6PJ6/qNzWp9PhsUrU4qn2seRb6/j8&#xA;xRC4t5P05pVtpvrzxAymW3Ew+tTCMRoz/wCkVHFVpxWlB0VTzzR6n+EdX9Snqfo+458a8eXotWle&#xA;2KsN/IHX49R/LDy5bwWk4jsbCC2mun9IRerHEhKqBIZOjA14UxV6TirsVdirsVdirsVdirsVdirs&#xA;VdirsVSaztjpOpfVLOxmexvmuL6+1KW49RYp2K0TjK7PRxWgT4Vp75mZJ+LDilIcUeGIiI8xvvsK&#xA;289zbACinOYbN2KuxV2KuxV2KuxVL/MGh2Gu6NdaTfrytrtCjEfaU9Vdf8pWAIyGSAnEguVotXPT&#xA;ZY5YfVE/gfFC+TrfzDa6DDZ6+6TX9qzQC5RuXrRRnjHK1ejMvUffvkcIkI1Lm3dpzwTzGeCxCW9f&#xA;zSeY9wLEfzQ8i6xJe2/nzyVSLzvoycfQrSLU7MGr2U4qFNQSY2PRvDYra69g/mf81tD88SflyLG1&#xA;ubO7TzdYtd2tyIg8EsCTxTQyKrtIrq7j7SLUb4q+gMVdirsVS3WPLWg609s+q2MN61k5ktDMvL03&#xA;NPiTwO3XFV58v6CdYGtHTrY6wq+mNR9FPrAWnGnq05/Z269MVR+KpV5s/wCUV1n/AJgbn/ky2KsN&#xA;/wCceYvT/KXQf3fp87aF/scOVYY/i/ubflX+b4/9c9lXo+KuxV2KuxV2KuxV2KuxV2KuxV2KuxVD&#xA;6jp9nqNhcWF7EJ7O6jaG4hatGRxRlNKHcZZiyyxyE4mpRNhBFiillxqUuhLe3OqfV7fy/AbWDS1t&#xA;Y5pJwXIiZZURWH94yqgjXp1zJhhGfhELOU8RlZFd+x913bEmufJO8wmbsVdirsVdirsVdiqTecL7&#xA;XrDQZ77RII7q8tSsz2sgYmWFGBlROPRylePX5ZVmlIRuPNz+zMWHJmEMxMYy2vuJ5E+V80XoWtWG&#xA;t6Ra6rYP6lpdoJIz3HZlanRlYEEeOShMSAIadXpZ6fLLFMVKJ/HzeLfnD5G8u2X5ofl/5qsrEW2q&#xA;XnmG0t764iVlSf1Az8pKRcDIPRFD6oPX4T1E3Ge74q7FXYq7FXYqk995u0Cynu7e4uG+sWRgFzDH&#xA;DNK6m5DGKixo5bkI2Pw1pQ1xVb5hu7a88l6nd2sizW1xps8sEyGqvG8DMrKfAg1xVjf5DJx/KTyx&#xA;+6mi5WFuf38nqc/3S/HH8cnCM9l+Gn8oxVnqOjorowZGAKsDUEHcEEYq3irsVdirsVdirsVdirsV&#xA;dirSujFgrAlDRgD0NAaH6DireKuxV2KpNd6RfWv6RvNCeMarqM0Ekpv5JpLdVj4RvwjU/D+6U0C0&#xA;q3XMzHnjLhjlvggD9IAlvZ5+/v6cmBjXLmjLfVrea9vrUxTQmwaNJJ5o2jhkMqBx6MjfDIBWjU6H&#xA;bKZ4CIxlYPFewNkV3joyEkblKXYq7FXYq0zopUMwBc0UE9TQmg+gYq3iqWr/AIf8v2sUI9DTba5u&#xA;OESfDGr3FwxbivizmuQ9MB3OWfH1MifVklGO/Wox/QHn/wCdi/7mPy5b05f+Us08esJP3I/dXHwm&#xA;Pnu56huHSo5djNxHqWKuxV2KvP8A81NWttM1TyVNNrB03nrccctubkQRTwNE/qGVCV9RY2CdfhHL&#xA;fcjFWO3esarP5+ks21K6GrN5jWw/Q8VxKijQX00O0wt0ZRxMrF/rIHJX+EPtTFWcar5Ge9/SCwav&#xA;dWceoWdrpzlOMkq29o0jU9ab1JGaX15Fd2PKh2IbfFU0vNHuG8pz6NHKJrg2DWaTuqRB3MJjDssS&#xA;qiVO5CKAOwxV5f5S03/nIPy3oGj6Jb6V5fmtdIsxZLzvbgGXgECyNSDZlCHYfzYqmemT/wDOQdhp&#xA;tpYJoXlx0tIY4Fc390CwjQICaQ96Yqif0r/zkN/1YPLn/Sfdf9UcVd+lf+chv+rB5c/6T7r/AKo4&#xA;qpW+of8AORUUZWTRfLszF5GDtfXIIV3LKu0HRFIUfLFXXWof85FS20sUWi+XYJJEZUmW+uSyMwoG&#xA;AMFKr13xVV/Sv/OQ3/Vg8uf9J91/1RxVSg1D/nIqP1Oei+XZebllrfXI4qeiikHQYq6DUP8AnIqP&#xA;1Oei+XZebllrfXI4qeiikHQYqppef85HLbW0R0ny80kHD1pjfXHKXgKNyHoUHPqaYq57z/nI5kuQ&#xA;uk+XlMzhomF9cfulCoCq/uNwSpO/82KutJ/+cg7a4vZl0Ly4xvZhOwN/dfCVhjhoP3PhFXFUT+lf&#xA;+chv+rB5c/6T7r/qjirv0r/zkN/1YPLn/Sfdf9UcVUl1D/nIoXMkp0Xy6Y3RFWH69c8VZSxZgfQr&#xA;VuQB+WKqv6V/5yG/6sHlz/pPuv8AqjiqX38P58anYXGn6t5d8tX9lcSB2glvrrjRXV0XaEVCsgOW&#xA;4M88UxOB4ZDr9iCARRXRT/8AOSq6vPeSWHl+SykjCQ6abuZY42HGrhxb+oxND9o032xlOJiAI0Rd&#xA;nff9G3ktIltQ/wCcijcxyjRfLojRHVofr1zxZmKlWJ9CtV4kD55Ul0Wof85FJJMz6L5dkWVw0aG+&#xA;uQI1CKvEUg3HJS2/jiqnHef85HLFZo2k+Xne3p68hvris9I2Q86QbVYh/h7jwxVSd/8AnIeSSzkm&#xA;0fy9I9ncy3KE31yKiRJY1jNIOiJPQfLFUd+lf+chv+rB5c/6T7r/AKo4qlvmK1/PbX9GudJv/L3l&#xA;w29ytOS6hdB0cGqSIfQ2ZWFRkMmMTjRcvQ6yemyxyw+qP294PkUDJ5V/PLXp/J9r5mt9GWz8u6xZ&#xA;6pdahb3U73Ey2qvGQUeIKWZJTU13OGIIFE21ajJGeQyjHgBPLu9z2rJNLsVdirsVa4ry5UHKlOXe&#xA;nhireKuxV5/afmXqjeW7q/utKij1ddcPl+105LgtEZ2uVtkZ5zHXivIu5WM7A0BxVCnUvNPmLU9K&#xA;urOyu7K50nVGstb+r3Z+otHbTlJvhaWDmHjIkUtbOSPgBU/EFXpWKuxV2KuxV2KuxV2KuxVjsvma&#xA;+g85totxaRx6aNNm1CO9EhaVzBJCjqYgoCqPW2+Ik06Duqw//HPmvzVoh0/S7BNP1DW9Hh1vSJIb&#xA;s+t+j53VXQu0SrDdcHXialVLV5fDuq9A8tDU18vaauqxmLUltolvI2kEzCVUAflINmNepxVMsVdi&#xA;rsVdirsVdirsVYz+YHmXVfLmi2+o6fbQXKtf2Npdeu7LwivLuK1LoqqebAzDYso779CqlerfmFqV&#xA;n5jurSDTo5dI03UdL0i/naVlnM+rtEsbxKFKcIfrMXIE1bkaU4/Eqjfy/s/MdpFfxavFcrCZI2tJ&#xA;b6dp7l2MY9bkPrF2ioHHw8Co/wAnuVWW4q7FXYq7FXYq7FXYq7FXYqxSP8uNIGk32myXl5Kl9qA1&#xA;f6wzQrNDfLOtys0LRxIoIlRW4spXalKVGKpx5d8vWOg2D2lo0kpmmlurq5nYNLNcXDmSWVyoRasx&#xA;6KoUdAAMVTPFXYq7FXYq7FXYq7FXYqlM/lu2n8xxa7JcTGaK1lshafujbtDMyu4YGMuatGp+328K&#xA;jFUB5W8gaL5bnWazluZ2htU06wF1IJBa2MTF47WGiqeCk9XLOaAFqAYqyXFXYq7FXYq7FXYq7FXY&#xA;qlHmnyxY+ZdLXTb6aeG3WeC6JtnCMZLaRZoqkq2yyor/ADA7Yqgrv8v/AC9d61Hq9wJnuBJbXE8X&#xA;qssM9zY/7y3E0a0DSQ/s9B0qDxXiqyTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYqxP8AMjzTq/l/SbF9ItDdX2pajaadEaRuI/rMoVn4STWwZuNQg5gcqcvhriq/V/MGtadJ5X0U&#xA;CGbXNbmEN1dMhSCNLa3NxeSrEHZqsI+EaczQsCSQpqqwTUPzi8wWeja6Hmszrum602mWiDStQNq0&#xA;C3S2/KSVZzGHIfl/egClKb4qzabz4B5ig8q/ULyLWL1Lj6rfNDEbb/Rlo9y0QuDOsHMgKzKAx2Un&#xA;riqYeR/M58y+XIdTkiW3uRNcWl5Ajc1S4s53tpQrEAlS8RK1HQjFU+xV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVI/NflSDzHb2MMt9dWBsLyHUIJbP0ORm&#xA;tzyj5evFOpUNvSmKteZPLb6pfaLqdrOLfUdDuzc27MOUckcsTQXEMgBBo8Uh4sPsuFO4BBVSaX8r&#xA;LCXy/qmhvrWpG31bUDqlzN/oQlExmE7Kh+rcAhkRWoVJ260riq5fy5ktdfv/ADJaa7qMur3hjd47&#xA;hrUQOLZCsFs5jtlmW2DEsyI4qSWNTiqdeTvLUflvy9b6SsxuZEeae6uioT1bi6me4nk4CvENLKxV&#xA;a7Cg7YqnWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>218.452148</stDim:w>
            <stDim:h>189.449219</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -188.199 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 188.199 li
217 188.199 li
217 0 li
cp
clp
.5 187.699 mo
216.5 187.699 li
216.5 .5 li
.5 .5 li
.5 187.699 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
.5 187.699 mo
216.5 187.699 li
216.5 .5 li
.5 .5 li
.5 187.699 li
@
27.5 159.619 mo
194.9 159.619 li
194.9 19.2202 li
27.5 19.2202 li
27.5 159.619 li
f
gsave
27.5 159.619 mo
194.9 159.619 li
194.9 19.2202 li
27.5 19.2202 li
27.5 159.619 li
cp
clp
1.5 lw
35.5068 39.9263 mo
56.522 40.5122 li
68.8145 42.6689 li
77.5366 44.8931 li
84.3018 47.2593 li
89.8296 49.5181 li
98.5518 53.7329 li
108.206 59.4053 li
110.844 61.2539 li
113.271 63.1919 li
115.518 64.4429 li
117.61 65.9072 li
119.566 67.4922 li
121.404 68.7861 li
124.777 71.4438 li
127.811 74.02 li
129.221 75.1519 li
130.569 76.5869 li
131.859 77.457 li
133.097 78.522 li
135.43 80.1333 li
136.533 81.2363 li
138.625 83.5449 li
139.619 84.2803 li
141.514 85.998 li
142.419 86.6021 li
144.983 89.438 li
146.579 91.3711 li
147.347 91.7065 li
148.095 92.3125 li
148.826 93.4297 li
149.539 94.2168 li
150.236 94.6875 li
152.236 96.8574 li
152.874 97.7305 li
154.112 98.7656 li
154.712 99.5469 li
155.301 100.018 li
158.612 103.641 li
159.13 104.482 li
160.141 105.391 li
160.634 106.152 li
161.119 106.355 li
162.066 107.602 li
162.985 108.83 li
163.434 109.068 li
164.313 110.129 li
164.743 111.027 li
165.585 111.504 li
166.806 112.686 li
167.594 113.854 li
167.98 114.068 li
168.361 114.76 li
168.738 115.031 li
170.554 117.176 li
170.905 117.471 li
171.251 118.164 li
174.514 122.02 li
174.822 122.146 li
175.127 122.828 li
175.428 122.803 li
176.023 123.383 li
176.316 124.137 li
177.178 125.314 li
180.145 128.525 li
180.654 129.029 li
180.906 129.238 li
181.156 129.799 li
181.403 130.016 li
181.649 129.568 li
182.134 131.166 li
183.544 132.553 li
183.773 132.699 li
184.671 133.887 li
184.892 134.508 li
185.111 134.646 li
185.328 134.609 li
185.971 135.637 li
186.392 136.32 li
186.6 136.609 li
186.807 136.494 li
187.42 137.127 li
187.821 138.039 li
188.218 138.002 li
189.565 139.994 li
189.753 140.189 li
189.94 140.066 li
190.309 140.83 li
190.492 140.729 li
190.675 140.914 li
191.036 141.486 li
191.214 141.594 li
191.919 142.602 li
192.093 142.672 li
192.266 142.877 li
192.438 142.881 li
192.609 143.016 li
193.115 142.928 li
193.282 143.127 li
193.614 143.033 li
193.778 143.826 li
194.104 144.027 li
195.374 146.07 li
195.99 146.479 li
196.443 147.387 li
196.593 147.434 li
196.742 147.223 li
196.89 147.635 li
197.185 147.594 li
197.621 147.963 li
197.908 148.311 li
198.051 148.256 li
198.193 148.723 li
198.475 148.77 li
198.754 149.119 li
198.893 148.926 li
199.442 149.631 li
199.578 149.35 li
199.847 149.332 li
199.981 149.822 li
200.114 149.682 li
200.247 149.371 li
200.51 150.443 li
200.902 150.783 li
201.031 150.99 li
201.416 150.896 li
201.669 151.279 li
201.795 151.314 li
201.921 151.512 li
202.294 151.393 li
202.418 151.814 li
202.541 150.803 li
202.663 146.465 li
202.907 151.885 li
203.388 152.242 li
203.507 152.117 li
203.626 152.354 li
203.744 152.189 li
203.979 136.949 li
204.212 152.297 li
204.328 152.428 li
204.559 153.1 li
204.674 153.188 li
204.788 153.047 li
204.901 153.092 li
205.015 152.74 li
205.24 153.121 li
205.352 153.076 li
205.575 153.381 li
205.686 153.385 li
205.797 153.252 li
206.016 153.455 li
206.126 153.371 li
206.559 153.766 li
206.666 153.799 li
206.773 153.414 li
207.302 154.162 li
207.407 153.955 li
207.615 154.119 li
207.822 153.98 li
207.925 153.967 li
208.13 153.59 li
208.232 153.83 li
208.333 153.719 li
208.535 153.428 li
208.936 153.516 li
209.035 153.512 li
209.232 153.188 li
209.331 153.188 li
209.526 152.486 li
209.624 152.402 li
209.721 152.518 li
210.01 150.816 li
210.486 146.996 li
211.047 148.869 li
211.416 153.807 li
211.689 154.5 li
211.78 154.33 li
211.961 154.57 li
212.14 154.316 li
212.229 154.596 li
212.318 154.514 li
212.407 154.732 li
212.496 154.486 li
212.672 154.74 li
212.76 154.789 li
212.847 155.154 li
212.934 155.086 li
213.021 154.811 li
213.195 155.141 li
213.538 155.248 li
213.623 155.023 li
213.708 155.107 li
213.878 154.855 li
213.962 154.002 li
214.13 155.211 li
214.214 155.021 li
214.297 155.154 li
214.629 154.756 li
214.711 154.93 li
214.875 154.271 li
214.956 152.508 li
215.2 154.084 li
215.281 153.992 li
215.441 154.395 li
215.521 154.447 li
215.761 154.816 li
215.84 154.828 li
215.998 155.43 li
216.076 155.328 li
216.155 155.781 li
216.233 155.758 li
216.621 155.832 li
216.775 155.811 li
216.928 155.98 li
217.081 155.984 li
217.157 155.695 li
217.232 155.742 li
217.308 156.111 li
217.383 155.938 li
217.458 155.834 li
217.5 155.957 li
0 0 0 1 cmyk
@
0 lc
[6 6 ] 0 dsh
42.9238 38.064 mo
63.939 46.937 li
76.2319 52.5313 li
84.9536 56.2861 li
91.7192 59.3452 li
105.969 65.0894 li
109.54 66.5449 li
112.734 68.1191 li
120.688 73.144 li
125.027 76.4009 li
130.554 81.2393 li
139.276 89.5815 li
142.847 93.5391 li
149.836 101.359 li
156.956 110.213 li
164.965 120.771 li
167.057 123.682 li
172.584 131.695 li
180.989 144.443 li
189.309 157.152 li
190.498 158.814 li
195.635 165.064 li
197.542 166.861 li
199.162 168.119 li
201.031 169.34 li
203.407 170.598 li
206.032 171.648 li
208.577 172.412 li
211.396 173.018 li
213.976 173.344 li
215.75 173.42 li
215.75 173.42 li
0 .993988 1 0 cmyk
@
[1 3 ] 0 dsh
42.9238 68.189 mo
63.939 62.1392 li
76.2319 55.2769 li
84.9536 62.0293 li
91.7192 84.4629 li
97.2466 96.6797 li
101.92 105.111 li
105.969 115.73 li
109.54 123.293 li
115.624 134.801 li
118.262 138.904 li
120.688 141.965 li
122.935 144.295 li
125.027 146.123 li
128.822 148.926 li
133.749 152.027 li
141.703 156.635 li
158.335 165.959 li
173.415 174.176 li
183.44 179.4 li
190.961 183.076 li
196.793 185.686 li
201.521 187.566 li
204.812 188.699 li
204.812 188.699 li
.883665 .769161 0 0 cmyk
@
grestore
.5 lw
0 lc
34.2651 19.2202 mo
34.2651 23.2202 li
34.2651 159.619 mo
34.2651 155.619 li
0 0 0 1 cmyk
@
27.3159 171.859 mo
27.3159 171.443 li
28.332 171.443 li
28.332 166.596 li
27.1563 167.355 li
27.1563 166.844 li
28.5801 165.924 li
29.1162 165.924 li
29.1162 171.443 li
30.1318 171.443 li
30.1318 171.859 li
27.3159 171.859 li
27.3159 171.859 li
cp
ef
34.0039 171.965 mo
33.3638 171.965 32.8682 171.699 32.5161 171.172 cv
32.1641 170.645 31.9878 169.908 31.9878 168.947 cv
31.9878 167.996 32.1641 167.252 32.5161 166.725 cv
32.8682 166.195 33.3638 165.924 34.0039 165.924 cv
34.6362 165.924 35.1318 166.195 35.4839 166.725 cv
35.8359 167.252 36.02 167.996 36.02 168.947 cv
36.02 169.908 35.8359 170.645 35.4839 171.172 cv
35.1318 171.699 34.6362 171.965 34.0039 171.965 cv
34.0039 171.965 li
cp
34.0039 171.588 mo
34.4038 171.588 34.7002 171.371 34.8999 170.932 cv
35.0918 170.5 35.1958 169.836 35.1958 168.947 cv
35.1958 168.068 35.0918 167.404 34.8999 166.965 cv
34.7002 166.531 34.4038 166.309 34.0039 166.309 cv
33.604 166.309 33.2998 166.531 33.1079 166.965 cv
32.9082 167.404 32.812 168.068 32.812 168.947 cv
32.812 169.836 32.9082 170.5 33.1079 170.932 cv
33.2998 171.371 33.604 171.588 34.0039 171.588 cv
ef
37.043 163.871 mo
37.2559 163.793 37.4575 163.73 37.6538 163.686 cv
37.8496 163.646 38.0342 163.625 38.208 163.625 cv
38.6055 163.625 38.9189 163.715 39.1431 163.883 cv
39.3672 164.057 39.479 164.297 39.479 164.6 cv
39.479 164.846 39.4009 165.053 39.2441 165.215 cv
39.0874 165.383 38.8687 165.496 38.5889 165.551 cv
38.9248 165.602 39.1826 165.725 39.3672 165.92 cv
39.5518 166.117 39.647 166.369 39.647 166.678 cv
39.647 167.059 39.5186 167.35 39.2607 167.551 cv
39.0034 167.752 38.6392 167.854 38.1577 167.854 cv
37.9448 167.854 37.7319 167.83 37.5303 167.785 cv
37.3286 167.746 37.127 167.68 36.9258 167.584 cv
36.9258 166.789 li
37.2334 166.789 li
37.2505 167.059 37.3398 167.254 37.4966 167.389 cv
37.6538 167.521 37.8774 167.59 38.1689 167.59 cv
38.4487 167.59 38.667 167.512 38.8296 167.35 cv
38.9863 167.186 39.0703 166.963 39.0703 166.682 cv
39.0703 166.363 38.9863 166.123 38.8184 165.955 cv
38.6504 165.793 38.4097 165.709 38.0903 165.709 cv
37.833 165.709 li
37.833 165.428 li
37.9673 165.428 li
38.2866 165.428 38.5273 165.367 38.6841 165.232 cv
38.8408 165.098 38.9248 164.902 38.9248 164.633 cv
38.9248 164.398 38.8574 164.213 38.729 164.084 cv
38.5942 163.961 38.4097 163.895 38.1631 163.895 cv
37.917 163.895 37.7207 163.955 37.5864 164.072 cv
37.4521 164.191 37.3735 164.363 37.3511 164.588 cv
37.043 164.588 li
37.043 163.871 li
37.043 163.871 li
cp
ef
104.075 19.2202 mo
104.075 23.2202 li
104.075 159.619 mo
104.075 155.619 li
@
97.1563 171.859 mo
97.1563 171.443 li
98.1719 171.443 li
98.1719 166.596 li
96.9961 167.355 li
96.9961 166.844 li
98.4199 165.924 li
98.9561 165.924 li
98.9561 171.443 li
99.9722 171.443 li
99.9722 171.859 li
97.1563 171.859 li
97.1563 171.859 li
cp
ef
103.604 171.965 mo
102.964 171.965 102.468 171.699 102.116 171.172 cv
101.764 170.645 101.588 169.908 101.588 168.947 cv
101.588 167.996 101.764 167.252 102.116 166.725 cv
102.468 166.195 102.964 165.924 103.604 165.924 cv
104.236 165.924 104.732 166.195 105.084 166.725 cv
105.436 167.252 105.62 167.996 105.62 168.947 cv
105.62 169.908 105.436 170.645 105.084 171.172 cv
104.732 171.699 104.236 171.965 103.604 171.965 cv
103.604 171.965 li
cp
103.604 171.588 mo
104.004 171.588 104.3 171.371 104.5 170.932 cv
104.692 170.5 104.796 169.836 104.796 168.947 cv
104.796 168.068 104.692 167.404 104.5 166.965 cv
104.3 166.531 104.004 166.309 103.604 166.309 cv
103.204 166.309 102.9 166.531 102.708 166.965 cv
102.508 167.404 102.412 168.068 102.412 168.947 cv
102.412 169.836 102.508 170.5 102.708 170.932 cv
102.9 171.371 103.204 171.588 103.604 171.588 cv
ef
109.498 167.779 mo
107.639 167.779 li
107.639 167.488 li
108.294 167.488 li
108.294 166.688 li
106.514 166.688 li
106.514 166.391 li
108.3 163.625 li
108.843 163.625 li
108.843 166.396 li
109.622 166.396 li
109.622 166.688 li
108.843 166.688 li
108.843 167.488 li
109.498 167.488 li
109.498 167.779 li
109.498 167.779 li
cp
108.294 166.396 mo
108.294 164.225 li
106.9 166.396 li
108.294 166.396 li
ef
173.885 19.2202 mo
173.885 23.2202 li
173.885 159.619 mo
173.885 155.619 li
@
166.996 171.619 mo
166.996 171.203 li
168.012 171.203 li
168.012 166.355 li
166.836 167.115 li
166.836 166.604 li
168.26 165.684 li
168.796 165.684 li
168.796 171.203 li
169.813 171.203 li
169.813 171.619 li
166.996 171.619 li
166.996 171.619 li
cp
ef
173.444 171.725 mo
172.804 171.725 172.308 171.461 171.956 170.932 cv
171.604 170.404 171.428 169.668 171.428 168.709 cv
171.428 167.756 171.604 167.012 171.956 166.484 cv
172.308 165.955 172.804 165.684 173.444 165.684 cv
174.076 165.684 174.572 165.955 174.924 166.484 cv
175.276 167.012 175.46 167.756 175.46 168.709 cv
175.46 169.668 175.276 170.404 174.924 170.932 cv
174.572 171.461 174.076 171.725 173.444 171.725 cv
173.444 171.725 li
cp
173.444 171.348 mo
173.844 171.348 174.14 171.133 174.34 170.691 cv
174.532 170.26 174.636 169.596 174.636 168.709 cv
174.636 167.828 174.532 167.164 174.34 166.725 cv
174.14 166.293 173.844 166.068 173.444 166.068 cv
173.044 166.068 172.74 166.293 172.548 166.725 cv
172.348 167.164 172.252 167.828 172.252 168.709 cv
172.252 169.596 172.348 170.26 172.548 170.691 cv
172.74 171.133 173.044 171.348 173.444 171.348 cv
ef
178.997 163.697 mo
178.997 164.146 li
177.126 164.146 li
177.126 165.316 li
177.216 165.248 177.328 165.203 177.457 165.17 cv
177.58 165.137 177.726 165.119 177.883 165.119 cv
178.319 165.119 178.666 165.244 178.924 165.49 cv
179.182 165.736 179.311 166.066 179.311 166.486 cv
179.311 166.924 179.182 167.26 178.924 167.494 cv
178.666 167.734 178.303 167.854 177.838 167.854 cv
177.647 167.854 177.457 167.83 177.261 167.785 cv
177.06 167.746 176.857 167.68 176.656 167.584 cv
176.656 166.789 li
176.964 166.789 li
176.98 167.053 177.064 167.254 177.21 167.389 cv
177.356 167.521 177.568 167.59 177.838 167.59 cv
178.123 167.59 178.342 167.494 178.498 167.305 cv
178.655 167.113 178.733 166.846 178.733 166.486 cv
178.733 166.133 178.655 165.865 178.504 165.674 cv
178.348 165.484 178.129 165.389 177.838 165.389 cv
177.67 165.389 177.524 165.422 177.4 165.479 cv
177.277 165.535 177.166 165.625 177.07 165.748 cv
176.835 165.748 li
176.835 163.697 li
178.997 163.697 li
178.997 163.697 li
cp
ef
194.9 19.2202 mo
194.9 21.2202 li
194.9 159.619 mo
194.9 157.619 li
170.691 19.2202 mo
170.691 21.2202 li
170.691 159.619 mo
170.691 157.619 li
167.12 19.2202 mo
167.12 21.2202 li
167.12 159.619 mo
167.12 157.619 li
163.071 19.2202 mo
163.071 21.2202 li
163.071 159.619 mo
163.071 157.619 li
158.398 19.2202 mo
158.398 21.2202 li
158.398 159.619 mo
158.398 157.619 li
152.87 19.2202 mo
152.87 21.2202 li
152.87 159.619 mo
152.87 157.619 li
146.105 19.2202 mo
146.105 21.2202 li
146.105 159.619 mo
146.105 157.619 li
137.383 19.2202 mo
137.383 21.2202 li
137.383 159.619 mo
137.383 157.619 li
125.09 19.2202 mo
125.09 21.2202 li
125.09 159.619 mo
125.09 157.619 li
100.881 19.2202 mo
100.881 21.2202 li
100.881 159.619 mo
100.881 157.619 li
97.3101 19.2202 mo
97.3101 21.2202 li
97.3101 159.619 mo
97.3101 157.619 li
93.2617 19.2202 mo
93.2617 21.2202 li
93.2617 159.619 mo
93.2617 157.619 li
88.5879 19.2202 mo
88.5879 21.2202 li
88.5879 159.619 mo
88.5879 157.619 li
83.0601 19.2202 mo
83.0601 21.2202 li
83.0601 159.619 mo
83.0601 157.619 li
76.2949 19.2202 mo
76.2949 21.2202 li
76.2949 159.619 mo
76.2949 157.619 li
67.5732 19.2202 mo
67.5732 21.2202 li
67.5732 159.619 mo
67.5732 157.619 li
55.2803 19.2202 mo
55.2803 21.2202 li
55.2803 159.619 mo
55.2803 157.619 li
31.0708 19.2202 mo
31.0708 21.2202 li
31.0708 159.619 mo
31.0708 157.619 li
27.5 19.2202 mo
27.5 21.2202 li
27.5 159.619 mo
27.5 157.619 li
@
102.53 179.807 mo
102.107 179.807 li
102.098 179.592 102.035 179.42 101.918 179.303 cv
101.792 179.195 101.621 179.133 101.387 179.133 cv
101.081 179.133 100.874 179.223 100.748 179.385 cv
100.622 179.547 100.568 179.844 100.568 180.266 cv
100.568 180.869 li
101.873 180.869 li
101.873 181.338 li
100.568 181.338 li
100.568 185.072 li
101.603 185.072 li
101.603 185.541 li
98.9839 185.541 li
98.9839 185.072 li
99.7578 185.072 li
99.7578 181.338 li
98.9839 181.338 li
98.9839 180.869 li
99.7578 180.869 li
99.7578 180.283 li
99.7578 179.762 99.8931 179.375 100.163 179.105 cv
100.433 178.836 100.829 178.699 101.36 178.699 cv
101.558 178.699 101.747 178.719 101.945 178.754 cv
102.143 178.791 102.332 178.844 102.53 178.916 cv
102.53 179.807 li
102.53 179.807 li
cp
ef
107.771 186.936 mo
107.051 186.611 106.511 186.107 106.151 185.424 cv
105.791 184.738 105.611 183.865 105.611 182.822 cv
105.611 181.777 105.791 180.914 106.151 180.221 cv
106.511 179.527 107.051 179.023 107.771 178.699 cv
107.771 179.133 li
107.321 179.447 106.997 179.889 106.799 180.445 cv
106.601 181.014 106.502 181.805 106.502 182.822 cv
106.502 183.848 106.601 184.641 106.799 185.197 cv
106.997 185.756 107.321 186.188 107.771 186.504 cv
107.771 186.936 li
107.771 186.936 li
cp
ef
108.755 185.541 mo
108.755 185.072 li
109.592 185.072 li
109.592 179.447 li
108.755 179.447 li
108.755 178.979 li
111.32 178.979 li
111.32 179.447 li
110.483 179.447 li
110.483 181.715 li
113.885 181.715 li
113.885 179.447 li
113.048 179.447 li
113.048 178.979 li
115.613 178.979 li
115.613 179.447 li
114.776 179.447 li
114.776 185.072 li
115.613 185.072 li
115.613 185.541 li
113.048 185.541 li
113.048 185.072 li
113.885 185.072 li
113.885 182.256 li
110.483 182.256 li
110.483 185.072 li
111.32 185.072 li
111.32 185.541 li
108.755 185.541 li
108.755 185.541 li
cp
ef
116.54 185.541 mo
116.54 185.162 li
119.465 181.338 li
117.152 181.338 li
117.152 182.146 li
116.684 182.146 li
116.684 180.869 li
120.509 180.869 li
120.509 181.246 li
117.584 185.072 li
120.122 185.072 li
120.122 184.227 li
120.59 184.227 li
120.59 185.541 li
116.54 185.541 li
116.54 185.541 li
cp
ef
121.619 186.936 mo
121.619 186.504 li
122.069 186.188 122.393 185.756 122.591 185.197 cv
122.789 184.641 122.888 183.848 122.888 182.822 cv
122.888 181.805 122.789 181.014 122.591 180.445 cv
122.393 179.889 122.069 179.447 121.619 179.133 cv
121.619 178.699 li
122.33 179.023 122.87 179.527 123.23 180.221 cv
123.59 180.914 123.779 181.777 123.779 182.822 cv
123.779 183.865 123.59 184.738 123.23 185.424 cv
122.87 186.107 122.33 186.611 121.619 186.936 cv
121.619 186.936 li
cp
ef
194.9 159.619 mo
190.9 159.619 li
27.5 159.619 mo
31.5 159.619 li
@
3.55615 162.74 mo
3.55615 162.324 li
4.57178 162.324 li
4.57178 157.477 li
3.396 158.236 li
3.396 157.725 li
4.81982 156.805 li
5.35596 156.805 li
5.35596 162.324 li
6.37207 162.324 li
6.37207 162.74 li
3.55615 162.74 li
3.55615 162.74 li
cp
ef
10.2441 162.844 mo
9.604 162.844 9.10791 162.58 8.75586 162.053 cv
8.40381 161.523 8.22803 160.787 8.22803 159.828 cv
8.22803 158.877 8.40381 158.133 8.75586 157.604 cv
9.10791 157.076 9.604 156.805 10.2441 156.805 cv
10.876 156.805 11.3721 157.076 11.7241 157.604 cv
12.0762 158.133 12.2598 158.877 12.2598 159.828 cv
12.2598 160.787 12.0762 161.523 11.7241 162.053 cv
11.3721 162.58 10.876 162.844 10.2441 162.844 cv
10.2441 162.844 li
cp
10.2441 162.469 mo
10.644 162.469 10.9399 162.252 11.1401 161.813 cv
11.332 161.381 11.436 160.717 11.436 159.828 cv
11.436 158.947 11.332 158.283 11.1401 157.844 cv
10.9399 157.412 10.644 157.188 10.2441 157.188 cv
9.84375 157.188 9.54004 157.412 9.34814 157.844 cv
9.14795 158.283 9.05176 158.947 9.05176 159.828 cv
9.05176 160.717 9.14795 161.381 9.34814 161.813 cv
9.54004 162.252 9.84375 162.469 10.2441 162.469 cv
ef
12.9863 156.947 mo
14.3862 156.947 li
14.3862 157.371 li
12.9863 157.371 li
12.9863 156.947 li
12.9863 156.947 li
cp
ef
15.4551 158.66 mo
15.4551 158.369 li
16.1665 158.369 li
16.1665 154.975 li
15.3433 155.508 li
15.3433 155.148 li
16.3398 154.504 li
16.7153 154.504 li
16.7153 158.369 li
17.4263 158.369 li
17.4263 158.66 li
15.4551 158.66 li
15.4551 158.66 li
cp
ef
18.7368 155.553 mo
18.4287 155.553 li
18.4287 154.824 li
18.6191 154.723 18.8154 154.645 19.0166 154.588 cv
19.2129 154.533 19.4087 154.504 19.5991 154.504 cv
20.0249 154.504 20.3608 154.611 20.6074 154.813 cv
20.8535 155.02 20.9766 155.301 20.9766 155.652 cv
20.9766 156.057 20.6968 156.531 20.1367 157.086 cv
20.0918 157.131 20.064 157.16 20.0415 157.182 cv
19.0112 158.213 li
20.7134 158.213 li
20.7134 157.709 li
21.0327 157.709 li
21.0327 158.66 li
18.4009 158.66 li
18.4009 158.363 li
19.6382 157.125 li
19.9072 156.857 20.103 156.605 20.2207 156.375 cv
20.3384 156.146 20.3999 155.904 20.3999 155.652 cv
20.3999 155.379 20.3271 155.166 20.1816 155.01 cv
20.0361 154.852 19.8398 154.773 19.5938 154.773 cv
19.3306 154.773 19.1289 154.842 18.9888 154.969 cv
18.8433 155.098 18.7593 155.295 18.7368 155.553 cv
18.7368 155.553 li
cp
ef
194.9 140.055 mo
190.9 140.055 li
27.5 140.055 mo
31.5 140.055 li
@
3.55615 143.301 mo
3.55615 142.885 li
4.57178 142.885 li
4.57178 138.035 li
3.396 138.797 li
3.396 138.283 li
4.81982 137.363 li
5.35596 137.363 li
5.35596 142.885 li
6.37207 142.885 li
6.37207 143.301 li
3.55615 143.301 li
3.55615 143.301 li
cp
ef
10.2441 143.404 mo
9.604 143.404 9.10791 143.141 8.75586 142.611 cv
8.40381 142.084 8.22803 141.348 8.22803 140.389 cv
8.22803 139.436 8.40381 138.691 8.75586 138.164 cv
9.10791 137.637 9.604 137.363 10.2441 137.363 cv
10.876 137.363 11.3721 137.637 11.7241 138.164 cv
12.0762 138.691 12.2598 139.436 12.2598 140.389 cv
12.2598 141.348 12.0762 142.084 11.7241 142.611 cv
11.3721 143.141 10.876 143.404 10.2441 143.404 cv
10.2441 143.404 li
cp
10.2441 143.027 mo
10.644 143.027 10.9399 142.813 11.1401 142.371 cv
11.332 141.939 11.436 141.275 11.436 140.389 cv
11.436 139.508 11.332 138.844 11.1401 138.404 cv
10.9399 137.973 10.644 137.748 10.2441 137.748 cv
9.84375 137.748 9.54004 137.973 9.34814 138.404 cv
9.14795 138.844 9.05176 139.508 9.05176 140.389 cv
9.05176 141.275 9.14795 141.939 9.34814 142.371 cv
9.54004 142.813 9.84375 143.027 10.2441 143.027 cv
ef
12.9863 137.506 mo
14.3862 137.506 li
14.3862 137.932 li
12.9863 137.932 li
12.9863 137.506 li
12.9863 137.506 li
cp
ef
15.4551 139.221 mo
15.4551 138.93 li
16.1665 138.93 li
16.1665 135.535 li
15.3433 136.066 li
15.3433 135.709 li
16.3398 135.064 li
16.7153 135.064 li
16.7153 138.93 li
17.4263 138.93 li
17.4263 139.221 li
15.4551 139.221 li
15.4551 139.221 li
cp
ef
18.8154 139.221 mo
18.8154 138.93 li
19.5264 138.93 li
19.5264 135.535 li
18.7031 136.066 li
18.7031 135.709 li
19.7002 135.064 li
20.0752 135.064 li
20.0752 138.93 li
20.7866 138.93 li
20.7866 139.221 li
18.8154 139.221 li
18.8154 139.221 li
cp
ef
194.9 120.49 mo
190.9 120.49 li
27.5 120.49 mo
31.5 120.49 li
@
3.55615 123.619 mo
3.55615 123.203 li
4.57178 123.203 li
4.57178 118.355 li
3.396 119.115 li
3.396 118.604 li
4.81982 117.684 li
5.35596 117.684 li
5.35596 123.203 li
6.37207 123.203 li
6.37207 123.619 li
3.55615 123.619 li
3.55615 123.619 li
cp
ef
10.2441 123.725 mo
9.604 123.725 9.10791 123.461 8.75586 122.932 cv
8.40381 122.404 8.22803 121.668 8.22803 120.709 cv
8.22803 119.756 8.40381 119.012 8.75586 118.484 cv
9.10791 117.955 9.604 117.684 10.2441 117.684 cv
10.876 117.684 11.3721 117.955 11.7241 118.484 cv
12.0762 119.012 12.2598 119.756 12.2598 120.709 cv
12.2598 121.668 12.0762 122.404 11.7241 122.932 cv
11.3721 123.461 10.876 123.725 10.2441 123.725 cv
10.2441 123.725 li
cp
10.2441 123.348 mo
10.644 123.348 10.9399 123.133 11.1401 122.691 cv
11.332 122.26 11.436 121.596 11.436 120.709 cv
11.436 119.828 11.332 119.164 11.1401 118.725 cv
10.9399 118.293 10.644 118.068 10.2441 118.068 cv
9.84375 118.068 9.54004 118.293 9.34814 118.725 cv
9.14795 119.164 9.05176 119.828 9.05176 120.709 cv
9.05176 121.596 9.14795 122.26 9.34814 122.691 cv
9.54004 123.133 9.84375 123.348 10.2441 123.348 cv
ef
12.9863 117.826 mo
14.3862 117.826 li
14.3862 118.252 li
12.9863 118.252 li
12.9863 117.826 li
12.9863 117.826 li
cp
ef
15.4551 119.541 mo
15.4551 119.248 li
16.1665 119.248 li
16.1665 115.855 li
15.3433 116.387 li
15.3433 116.029 li
16.3398 115.385 li
16.7153 115.385 li
16.7153 119.248 li
17.4263 119.248 li
17.4263 119.541 li
15.4551 119.541 li
15.4551 119.541 li
cp
ef
19.8008 119.613 mo
19.353 119.613 19.0054 119.428 18.7593 119.059 cv
18.5127 118.689 18.3896 118.174 18.3896 117.502 cv
18.3896 116.836 18.5127 116.314 18.7593 115.945 cv
19.0054 115.576 19.353 115.385 19.8008 115.385 cv
20.2432 115.385 20.5903 115.576 20.8369 115.945 cv
21.083 116.314 21.2119 116.836 21.2119 117.502 cv
21.2119 118.174 21.083 118.689 20.8369 119.059 cv
20.5903 119.428 20.2432 119.613 19.8008 119.613 cv
19.8008 119.613 li
cp
19.8008 119.35 mo
20.0806 119.35 20.2881 119.199 20.4282 118.891 cv
20.5625 118.588 20.6353 118.123 20.6353 117.502 cv
20.6353 116.885 20.5625 116.42 20.4282 116.113 cv
20.2881 115.811 20.0806 115.654 19.8008 115.654 cv
19.521 115.654 19.3081 115.811 19.1738 116.113 cv
19.0337 116.42 18.9663 116.885 18.9663 117.502 cv
18.9663 118.123 19.0337 118.588 19.1738 118.891 cv
19.3081 119.199 19.521 119.35 19.8008 119.35 cv
ef
194.9 100.926 mo
190.9 100.926 li
27.5 100.926 mo
31.5 100.926 li
@
6.67578 104.18 mo
6.67578 103.764 li
7.69189 103.764 li
7.69189 98.916 li
6.51611 99.6758 li
6.51611 99.1641 li
7.93994 98.2441 li
8.47607 98.2441 li
8.47607 103.764 li
9.49219 103.764 li
9.49219 104.18 li
6.67578 104.18 li
6.67578 104.18 li
cp
ef
13.124 104.283 mo
12.4839 104.283 11.9878 104.02 11.6357 103.492 cv
11.2842 102.965 11.1079 102.229 11.1079 101.268 cv
11.1079 100.316 11.2842 99.5723 11.6357 99.0449 cv
11.9878 98.5156 12.4839 98.2441 13.124 98.2441 cv
13.7559 98.2441 14.252 98.5156 14.604 99.0449 cv
14.9561 99.5723 15.1401 100.316 15.1401 101.268 cv
15.1401 102.229 14.9561 102.965 14.604 103.492 cv
14.252 104.02 13.7559 104.283 13.124 104.283 cv
13.124 104.283 li
cp
13.124 103.908 mo
13.5239 103.908 13.8198 103.691 14.02 103.252 cv
14.2119 102.82 14.3159 102.156 14.3159 101.268 cv
14.3159 100.389 14.2119 99.7246 14.02 99.2832 cv
13.8198 98.8516 13.5239 98.6289 13.124 98.6289 cv
12.7241 98.6289 12.4199 98.8516 12.228 99.2832 cv
12.0278 99.7246 11.9321 100.389 11.9321 101.268 cv
11.9321 102.156 12.0278 102.82 12.228 103.252 cv
12.4199 103.691 12.7241 103.908 13.124 103.908 cv
ef
15.8662 98.3867 mo
17.2666 98.3867 li
17.2666 98.8125 li
15.8662 98.8125 li
15.8662 98.3867 li
15.8662 98.3867 li
cp
ef
19.2705 96.2129 mo
19.0127 96.2129 18.811 96.3086 18.6768 96.5 cv
18.5366 96.6895 18.4697 96.959 18.4697 97.3105 cv
18.4697 97.6699 18.5366 97.9375 18.6768 98.1289 cv
18.811 98.3184 19.0127 98.4082 19.2705 98.4082 cv
19.5278 98.4082 19.7241 98.3184 19.8638 98.1348 cv
19.9985 97.9551 20.0713 97.6914 20.0713 97.3457 cv
20.0713 96.9863 19.9985 96.707 19.8638 96.5098 cv
19.7241 96.3145 19.5278 96.2129 19.2705 96.2129 cv
19.2705 96.2129 li
cp
20.1606 98.2695 mo
20.0376 98.4082 19.8921 98.5098 19.7354 98.5762 cv
19.5786 98.6445 19.3994 98.6777 19.2031 98.6777 cv
18.7944 98.6777 18.4751 98.5605 18.2402 98.3145 cv
18.0049 98.0664 17.8926 97.7363 17.8926 97.3105 cv
17.8926 96.8965 18.0161 96.5664 18.2734 96.3203 cv
18.5254 96.0742 18.8672 95.9453 19.293 95.9453 cv
19.752 95.9453 20.1104 96.1191 20.3569 96.4609 cv
20.603 96.8066 20.7266 97.2949 20.7266 97.9336 cv
20.7266 98.6504 20.5752 99.1992 20.2842 99.5898 cv
19.9927 99.9824 19.5786 100.172 19.0464 100.172 cv
18.9009 100.172 18.7495 100.156 18.5928 100.133 cv
18.436 100.111 18.2734 100.072 18.1055 100.016 cv
18.1055 99.3379 li
18.4136 99.3379 li
18.436 99.5234 18.5034 99.6641 18.6265 99.7637 cv
18.7441 99.8652 18.9009 99.9102 19.1025 99.9102 cv
19.4551 99.9102 19.7183 99.7813 19.8921 99.5117 cv
20.0601 99.2441 20.1494 98.8281 20.1606 98.2695 cv
ef
194.9 81.3599 mo
190.9 81.3599 li
27.5 81.3599 mo
31.5 81.3599 li
@
6.67578 84.5 mo
6.67578 84.084 li
7.69189 84.084 li
7.69189 79.2358 li
6.51611 79.9961 li
6.51611 79.4839 li
7.93994 78.564 li
8.47607 78.564 li
8.47607 84.084 li
9.49219 84.084 li
9.49219 84.5 li
6.67578 84.5 li
6.67578 84.5 li
cp
ef
13.124 84.604 mo
12.4839 84.604 11.9878 84.3398 11.6357 83.812 cv
11.2842 83.2842 11.1079 82.5479 11.1079 81.5879 cv
11.1079 80.6362 11.2842 79.8921 11.6357 79.3643 cv
11.9878 78.8359 12.4839 78.564 13.124 78.564 cv
13.7559 78.564 14.252 78.8359 14.604 79.3643 cv
14.9561 79.8921 15.1401 80.6362 15.1401 81.5879 cv
15.1401 82.5479 14.9561 83.2842 14.604 83.812 cv
14.252 84.3398 13.7559 84.604 13.124 84.604 cv
13.124 84.604 li
cp
13.124 84.228 mo
13.5239 84.228 13.8198 84.0122 14.02 83.5723 cv
14.2119 83.1401 14.3159 82.4761 14.3159 81.5879 cv
14.3159 80.708 14.2119 80.0439 14.02 79.604 cv
13.8198 79.1719 13.5239 78.9482 13.124 78.9482 cv
12.7241 78.9482 12.4199 79.1719 12.228 79.604 cv
12.0278 80.0439 11.9321 80.708 11.9321 81.5879 cv
11.9321 82.4761 12.0278 83.1401 12.228 83.5723 cv
12.4199 84.0122 12.7241 84.228 13.124 84.228 cv
ef
15.8662 78.7065 mo
17.2666 78.7065 li
17.2666 79.1323 li
15.8662 79.1323 li
15.8662 78.7065 li
15.8662 78.7065 li
cp
ef
20.0376 77.3232 mo
20.0376 77.0767 19.9702 76.8809 19.8472 76.7407 cv
19.7183 76.6064 19.5449 76.5337 19.3208 76.5337 cv
19.0967 76.5337 18.9175 76.6064 18.7944 76.7407 cv
18.6655 76.8809 18.604 77.0767 18.604 77.3232 cv
18.604 77.5752 18.6655 77.7715 18.7944 77.9058 cv
18.9175 78.0454 19.0967 78.1128 19.3208 78.1128 cv
19.5449 78.1128 19.7183 78.0454 19.8472 77.9058 cv
19.9702 77.7715 20.0376 77.5752 20.0376 77.3232 cv
20.0376 77.3232 li
cp
19.7407 78.2471 mo
20.0488 78.292 20.2896 78.4038 20.4634 78.5889 cv
20.6367 78.7793 20.7266 79.0146 20.7266 79.3057 cv
20.7266 79.6865 20.603 79.9834 20.3623 80.1851 cv
20.1162 80.3921 19.7686 80.4927 19.3208 80.4927 cv
18.8672 80.4927 18.52 80.3921 18.2793 80.1851 cv
18.0327 79.9834 17.915 79.6865 17.915 79.3057 cv
17.915 79.0146 17.999 78.7793 18.1729 78.5889 cv
18.3462 78.4038 18.5874 78.292 18.9009 78.2471 cv
18.6206 78.2026 18.4136 78.0962 18.2681 77.9336 cv
18.1226 77.7769 18.0498 77.5698 18.0498 77.3232 cv
18.0498 76.9985 18.1616 76.7407 18.3857 76.5503 cv
18.6094 76.3599 18.9233 76.2646 19.3208 76.2646 cv
19.7129 76.2646 20.0264 76.3599 20.2505 76.5503 cv
20.4746 76.7407 20.5918 76.9985 20.5918 77.3232 cv
20.5918 77.5698 20.5137 77.7769 20.3682 77.9336 cv
20.2222 78.0962 20.0098 78.2026 19.7407 78.2471 cv
20.1494 79.3057 mo
20.1494 79.0146 20.0767 78.7905 19.9312 78.6279 cv
19.7856 78.4658 19.5786 78.3818 19.3208 78.3818 cv
19.0576 78.3818 18.856 78.4658 18.7104 78.6279 cv
18.5649 78.7905 18.4922 79.0146 18.4922 79.3057 cv
18.4922 79.5967 18.5649 79.8267 18.7104 79.9888 cv
18.856 80.1514 19.0576 80.2295 19.3208 80.2295 cv
19.5786 80.2295 19.7856 80.1514 19.9312 79.9888 cv
20.0767 79.8267 20.1494 79.5967 20.1494 79.3057 cv
ef
194.9 61.7949 mo
190.9 61.7949 li
27.5 61.7949 mo
31.5 61.7949 li
@
6.67578 64.8198 mo
6.67578 64.4038 li
7.69189 64.4038 li
7.69189 59.5562 li
6.51611 60.3159 li
6.51611 59.8042 li
7.93994 58.8843 li
8.47607 58.8843 li
8.47607 64.4038 li
9.49219 64.4038 li
9.49219 64.8198 li
6.67578 64.8198 li
6.67578 64.8198 li
cp
ef
13.124 64.9243 mo
12.4839 64.9243 11.9878 64.6602 11.6357 64.1323 cv
11.2842 63.604 11.1079 62.8682 11.1079 61.9082 cv
11.1079 60.9561 11.2842 60.2119 11.6357 59.6841 cv
11.9878 59.1563 12.4839 58.8843 13.124 58.8843 cv
13.7559 58.8843 14.252 59.1563 14.604 59.6841 cv
14.9561 60.2119 15.1401 60.9561 15.1401 61.9082 cv
15.1401 62.8682 14.9561 63.604 14.604 64.1323 cv
14.252 64.6602 13.7559 64.9243 13.124 64.9243 cv
13.124 64.9243 li
cp
13.124 64.5479 mo
13.5239 64.5479 13.8198 64.332 14.02 63.8921 cv
14.2119 63.46 14.3159 62.7959 14.3159 61.9082 cv
14.3159 61.0278 14.2119 60.3643 14.02 59.9243 cv
13.8198 59.4922 13.5239 59.2681 13.124 59.2681 cv
12.7241 59.2681 12.4199 59.4922 12.228 59.9243 cv
12.0278 60.3643 11.9321 61.0278 11.9321 61.9082 cv
11.9321 62.7959 12.0278 63.46 12.228 63.8921 cv
12.4199 64.332 12.7241 64.5479 13.124 64.5479 cv
ef
15.8662 59.2666 mo
17.2666 59.2666 li
17.2666 59.6919 li
15.8662 59.6919 li
15.8662 59.2666 li
15.8662 59.2666 li
cp
ef
20.6982 57.1777 mo
19.1025 60.98 li
18.6934 60.98 li
20.2168 57.3457 li
18.3296 57.3457 li
18.3296 57.8496 li
18.0103 57.8496 li
18.0103 56.8975 li
20.6982 56.8975 li
20.6982 57.1777 li
20.6982 57.1777 li
cp
ef
194.9 42.23 mo
190.9 42.23 li
27.5 42.23 mo
31.5 42.23 li
@
6.67578 45.3799 mo
6.67578 44.9639 li
7.69189 44.9639 li
7.69189 40.1162 li
6.51611 40.876 li
6.51611 40.3643 li
7.93994 39.4438 li
8.47607 39.4438 li
8.47607 44.9639 li
9.49219 44.9639 li
9.49219 45.3799 li
6.67578 45.3799 li
6.67578 45.3799 li
cp
ef
13.124 45.4839 mo
12.4839 45.4839 11.9878 45.2202 11.6357 44.6919 cv
11.2842 44.1641 11.1079 43.4282 11.1079 42.4683 cv
11.1079 41.5161 11.2842 40.772 11.6357 40.2441 cv
11.9878 39.7163 12.4839 39.4438 13.124 39.4438 cv
13.7559 39.4438 14.252 39.7163 14.604 40.2441 cv
14.9561 40.772 15.1401 41.5161 15.1401 42.4683 cv
15.1401 43.4282 14.9561 44.1641 14.604 44.6919 cv
14.252 45.2202 13.7559 45.4839 13.124 45.4839 cv
13.124 45.4839 li
cp
13.124 45.1079 mo
13.5239 45.1079 13.8198 44.8921 14.02 44.4521 cv
14.2119 44.02 14.3159 43.356 14.3159 42.4683 cv
14.3159 41.5879 14.2119 40.9243 14.02 40.4839 cv
13.8198 40.0522 13.5239 39.8281 13.124 39.8281 cv
12.7241 39.8281 12.4199 40.0522 12.228 40.4839 cv
12.0278 40.9243 11.9321 41.5879 11.9321 42.4683 cv
11.9321 43.356 12.0278 44.02 12.228 44.4521 cv
12.4199 44.8921 12.7241 45.1079 13.124 45.1079 cv
ef
15.8662 39.5864 mo
17.2666 39.5864 li
17.2666 40.0122 li
15.8662 40.0122 li
15.8662 39.5864 li
15.8662 39.5864 li
cp
ef
18.481 39.0547 mo
18.604 38.9199 18.7441 38.8135 18.9009 38.7466 cv
19.0576 38.6792 19.2314 38.6455 19.4326 38.6455 cv
19.8359 38.6455 20.1606 38.769 20.396 39.0151 cv
20.6313 39.2617 20.749 39.5923 20.749 40.0122 cv
20.749 40.4263 20.6201 40.7568 20.3682 41.0034 cv
20.1104 41.2495 19.7744 41.373 19.3486 41.373 cv
18.8896 41.373 18.5313 41.2051 18.2847 40.8633 cv
18.0386 40.5215 17.915 40.0288 17.915 39.3906 cv
17.915 38.6792 18.0605 38.125 18.3521 37.7329 cv
18.6431 37.3408 19.0576 37.145 19.5952 37.145 cv
19.7407 37.145 19.8921 37.1616 20.0488 37.1841 cv
20.2056 37.2119 20.3682 37.2515 20.5361 37.3071 cv
20.5361 37.979 li
20.228 37.979 li
20.2056 37.8003 20.1328 37.6602 20.0151 37.5591 cv
19.8975 37.4639 19.7407 37.4136 19.5391 37.4136 cv
19.1807 37.4136 18.9175 37.5479 18.7441 37.8169 cv
18.5703 38.0854 18.481 38.5 18.481 39.0547 cv
18.481 39.0547 li
cp
19.3711 41.1099 mo
19.6289 41.1099 19.8247 41.02 19.9648 40.8296 cv
20.0991 40.6392 20.1719 40.3706 20.1719 40.0122 cv
20.1719 39.6592 20.0991 39.3906 19.9648 39.2002 cv
19.8247 39.0098 19.6289 38.9146 19.3711 38.9146 cv
19.1079 38.9146 18.9063 39.0098 18.772 39.189 cv
18.6377 39.3735 18.5703 39.6367 18.5703 39.9785 cv
18.5703 40.3423 18.6377 40.6226 18.7773 40.8184 cv
18.9121 41.0146 19.1138 41.1099 19.3711 41.1099 cv
ef
194.9 22.665 mo
190.9 22.665 li
27.5 22.665 mo
31.5 22.665 li
@
6.67578 25.7002 mo
6.67578 25.2842 li
7.69189 25.2842 li
7.69189 20.436 li
6.51611 21.1963 li
6.51611 20.6841 li
7.93994 19.7642 li
8.47607 19.7642 li
8.47607 25.2842 li
9.49219 25.2842 li
9.49219 25.7002 li
6.67578 25.7002 li
6.67578 25.7002 li
cp
ef
13.124 25.8042 mo
12.4839 25.8042 11.9878 25.54 11.6357 25.0122 cv
11.2842 24.4839 11.1079 23.748 11.1079 22.7881 cv
11.1079 21.8359 11.2842 21.0923 11.6357 20.564 cv
11.9878 20.0361 12.4839 19.7642 13.124 19.7642 cv
13.7559 19.7642 14.252 20.0361 14.604 20.564 cv
14.9561 21.0923 15.1401 21.8359 15.1401 22.7881 cv
15.1401 23.748 14.9561 24.4839 14.604 25.0122 cv
14.252 25.54 13.7559 25.8042 13.124 25.8042 cv
13.124 25.8042 li
cp
13.124 25.4282 mo
13.5239 25.4282 13.8198 25.2119 14.02 24.772 cv
14.2119 24.3398 14.3159 23.6763 14.3159 22.7881 cv
14.3159 21.9082 14.2119 21.2441 14.02 20.8042 cv
13.8198 20.3721 13.5239 20.1479 13.124 20.1479 cv
12.7241 20.1479 12.4199 20.3721 12.228 20.8042 cv
12.0278 21.2441 11.9321 21.9082 11.9321 22.7881 cv
11.9321 23.6763 12.0278 24.3398 12.228 24.772 cv
12.4199 25.2119 12.7241 25.4282 13.124 25.4282 cv
ef
15.8662 20.1465 mo
17.2666 20.1465 li
17.2666 20.5723 li
15.8662 20.5723 li
15.8662 20.1465 li
15.8662 20.1465 li
cp
ef
20.3569 17.7778 mo
20.3569 18.2256 li
18.4863 18.2256 li
18.4863 19.396 li
18.5762 19.3286 18.688 19.2842 18.8169 19.2505 cv
18.9399 19.2168 19.0854 19.2002 19.2422 19.2002 cv
19.6792 19.2002 20.0264 19.3232 20.2842 19.5698 cv
20.5415 19.8159 20.6704 20.1465 20.6704 20.5664 cv
20.6704 21.0034 20.5415 21.3394 20.2842 21.5747 cv
20.0264 21.8154 19.6626 21.9331 19.1978 21.9331 cv
19.0073 21.9331 18.8169 21.9106 18.6206 21.8657 cv
18.4189 21.8267 18.2178 21.7593 18.0161 21.6641 cv
18.0161 20.8687 li
18.3242 20.8687 li
18.3408 21.1323 18.4248 21.3335 18.5703 21.4683 cv
18.7158 21.6025 18.9287 21.6694 19.1978 21.6694 cv
19.4834 21.6694 19.7017 21.5747 19.8584 21.3843 cv
20.0151 21.1938 20.0938 20.9248 20.0938 20.5664 cv
20.0938 20.2139 20.0151 19.9448 19.8638 19.7544 cv
19.707 19.564 19.4888 19.4688 19.1978 19.4688 cv
19.0298 19.4688 18.8838 19.5024 18.7607 19.5586 cv
18.6377 19.6143 18.5254 19.7041 18.4302 19.8271 cv
18.1953 19.8271 li
18.1953 17.7778 li
20.3569 17.7778 li
20.3569 17.7778 li
cp
ef
194.9 23.5601 mo
192.9 23.5601 li
27.5 23.5601 mo
29.5 23.5601 li
194.9 24.561 mo
192.9 24.561 li
27.5 24.561 mo
29.5 24.561 li
194.9 25.6963 mo
192.9 25.6963 li
27.5 25.6963 mo
29.5 25.6963 li
194.9 27.0063 mo
192.9 27.0063 li
27.5 27.0063 mo
29.5 27.0063 li
194.9 28.5552 mo
192.9 28.5552 li
27.5 28.5552 mo
29.5 28.5552 li
194.9 30.4512 mo
192.9 30.4512 li
27.5 30.4512 mo
29.5 30.4512 li
194.9 32.895 mo
192.9 32.895 li
27.5 32.895 mo
29.5 32.895 li
194.9 36.3413 mo
192.9 36.3413 li
27.5 36.3413 mo
29.5 36.3413 li
194.9 43.125 mo
192.9 43.125 li
27.5 43.125 mo
29.5 43.125 li
194.9 44.126 mo
192.9 44.126 li
27.5 44.126 mo
29.5 44.126 li
194.9 45.2612 mo
192.9 45.2612 li
27.5 45.2612 mo
29.5 45.2612 li
194.9 46.5713 mo
192.9 46.5713 li
27.5 46.5713 mo
29.5 46.5713 li
194.9 48.1201 mo
192.9 48.1201 li
27.5 48.1201 mo
29.5 48.1201 li
194.9 50.0161 mo
192.9 50.0161 li
27.5 50.0161 mo
29.5 50.0161 li
194.9 52.46 mo
192.9 52.46 li
27.5 52.46 mo
29.5 52.46 li
194.9 55.9063 mo
192.9 55.9063 li
27.5 55.9063 mo
29.5 55.9063 li
194.9 62.6899 mo
192.9 62.6899 li
27.5 62.6899 mo
29.5 62.6899 li
194.9 63.6909 mo
192.9 63.6909 li
27.5 63.6909 mo
29.5 63.6909 li
194.9 64.8262 mo
192.9 64.8262 li
27.5 64.8262 mo
29.5 64.8262 li
194.9 66.1362 mo
192.9 66.1362 li
27.5 66.1362 mo
29.5 66.1362 li
194.9 67.6851 mo
192.9 67.6851 li
27.5 67.6851 mo
29.5 67.6851 li
194.9 69.5811 mo
192.9 69.5811 li
27.5 69.5811 mo
29.5 69.5811 li
194.9 72.0249 mo
192.9 72.0249 li
27.5 72.0249 mo
29.5 72.0249 li
194.9 75.4702 mo
192.9 75.4702 li
27.5 75.4702 mo
29.5 75.4702 li
194.9 82.2549 mo
192.9 82.2549 li
27.5 82.2549 mo
29.5 82.2549 li
194.9 83.2563 mo
192.9 83.2563 li
27.5 83.2563 mo
29.5 83.2563 li
194.9 84.3911 mo
192.9 84.3911 li
27.5 84.3911 mo
29.5 84.3911 li
194.9 85.7012 mo
192.9 85.7012 li
27.5 85.7012 mo
29.5 85.7012 li
194.9 87.25 mo
192.9 87.25 li
27.5 87.25 mo
29.5 87.25 li
194.9 89.146 mo
192.9 89.146 li
27.5 89.146 mo
29.5 89.146 li
194.9 91.5903 mo
192.9 91.5903 li
27.5 91.5903 mo
29.5 91.5903 li
194.9 95.0352 mo
192.9 95.0352 li
27.5 95.0352 mo
29.5 95.0352 li
194.9 101.82 mo
192.9 101.82 li
27.5 101.82 mo
29.5 101.82 li
194.9 102.82 mo
192.9 102.82 li
27.5 102.82 mo
29.5 102.82 li
194.9 103.955 mo
192.9 103.955 li
27.5 103.955 mo
29.5 103.955 li
194.9 105.266 mo
192.9 105.266 li
27.5 105.266 mo
29.5 105.266 li
194.9 106.814 mo
192.9 106.814 li
27.5 106.814 mo
29.5 106.814 li
194.9 108.711 mo
192.9 108.711 li
27.5 108.711 mo
29.5 108.711 li
194.9 111.156 mo
192.9 111.156 li
27.5 111.156 mo
29.5 111.156 li
194.9 114.6 mo
192.9 114.6 li
27.5 114.6 mo
29.5 114.6 li
194.9 121.385 mo
192.9 121.385 li
27.5 121.385 mo
29.5 121.385 li
194.9 122.387 mo
192.9 122.387 li
27.5 122.387 mo
29.5 122.387 li
194.9 123.521 mo
192.9 123.521 li
27.5 123.521 mo
29.5 123.521 li
194.9 124.83 mo
192.9 124.83 li
27.5 124.83 mo
29.5 124.83 li
194.9 126.379 mo
192.9 126.379 li
27.5 126.379 mo
29.5 126.379 li
194.9 128.275 mo
192.9 128.275 li
27.5 128.275 mo
29.5 128.275 li
194.9 130.721 mo
192.9 130.721 li
27.5 130.721 mo
29.5 130.721 li
194.9 134.166 mo
192.9 134.166 li
27.5 134.166 mo
29.5 134.166 li
194.9 140.951 mo
192.9 140.951 li
27.5 140.951 mo
29.5 140.951 li
194.9 141.951 mo
192.9 141.951 li
27.5 141.951 mo
29.5 141.951 li
194.9 143.086 mo
192.9 143.086 li
27.5 143.086 mo
29.5 143.086 li
194.9 144.396 mo
192.9 144.396 li
27.5 144.396 mo
29.5 144.396 li
194.9 145.945 mo
192.9 145.945 li
27.5 145.945 mo
29.5 145.945 li
194.9 147.84 mo
192.9 147.84 li
27.5 147.84 mo
29.5 147.84 li
194.9 150.285 mo
192.9 150.285 li
27.5 150.285 mo
29.5 150.285 li
194.9 153.73 mo
192.9 153.73 li
27.5 153.73 mo
29.5 153.73 li
@
1.5 lw
2 lc
111.675 31.0142 mo
124.275 31.0142 li
27.5 159.619 mo
27.5 19.2202 li
27.5 159.619 mo
194.9 159.619 li
194.9 159.619 mo
194.9 19.2202 li
27.5 19.2202 mo
194.9 19.2202 li
@
134.675 34.1001 mo
134.675 33.6318 li
135.512 33.6318 li
135.512 28.0073 li
134.675 28.0073 li
134.675 27.5391 li
139.958 27.5391 li
139.958 28.9971 li
139.418 28.9971 li
139.418 28.0791 li
136.403 28.0791 li
136.403 30.2749 li
138.554 30.2749 li
138.554 29.4561 li
139.094 29.4561 li
139.094 31.6343 li
138.554 31.6343 li
138.554 30.8149 li
136.403 30.8149 li
136.403 33.5601 li
139.49 33.5601 li
139.49 32.6421 li
140.03 32.6421 li
140.03 34.1001 li
134.675 34.1001 li
134.675 34.1001 li
cp
ef
143.279 31.2471 mo
144.26 29.897 li
143.63 29.897 li
143.63 29.4292 li
145.43 29.4292 li
145.43 29.897 li
144.809 29.897 li
143.558 31.625 li
145.016 33.6318 li
145.628 33.6318 li
145.628 34.1001 li
143.468 34.1001 li
143.468 33.6318 li
144.063 33.6318 li
143.045 32.2368 li
142.028 33.6318 li
142.631 33.6318 li
142.631 34.1001 li
140.858 34.1001 li
140.858 33.6318 li
141.479 33.6318 li
142.766 31.8589 li
141.344 29.897 li
140.768 29.897 li
140.768 29.4292 li
142.856 29.4292 li
142.856 29.897 li
142.298 29.897 li
143.279 31.2471 li
143.279 31.2471 li
cp
ef
146.975 29.897 mo
146.201 29.897 li
146.201 29.4292 li
147.785 29.4292 li
147.785 30.1582 li
147.938 29.8701 148.136 29.6538 148.388 29.5103 cv
148.631 29.375 148.938 29.3032 149.297 29.3032 cv
149.873 29.3032 150.341 29.5371 150.701 29.9868 cv
151.061 30.437 151.25 31.0313 151.25 31.7603 cv
151.25 32.498 151.061 33.0923 150.701 33.542 cv
150.341 33.9922 149.873 34.2173 149.297 34.2173 cv
148.938 34.2173 148.631 34.145 148.388 34.019 cv
148.136 33.8843 147.938 33.668 147.785 33.3711 cv
147.785 35.4951 li
148.55 35.4951 li
148.55 35.9629 li
146.201 35.9629 li
146.201 35.4951 li
146.975 35.4951 li
146.975 29.897 li
146.975 29.897 li
cp
147.785 31.5352 mo
147.785 31.9941 li
147.785 32.561 147.893 32.9932 148.109 33.2813 cv
148.325 33.5781 148.631 33.7222 149.045 33.7222 cv
149.459 33.7222 149.765 33.5601 149.981 33.2271 cv
150.197 32.9028 150.305 32.4082 150.305 31.7603 cv
150.305 31.1118 150.197 30.626 149.981 30.3022 cv
149.765 29.978 149.459 29.8071 149.045 29.8071 cv
148.631 29.8071 148.325 29.96 148.109 30.2568 cv
147.893 30.5542 147.785 30.9771 147.785 31.5352 cv
ef
155.624 31.3818 mo
155.606 30.8423 155.489 30.4282 155.273 30.1489 cv
155.057 29.8789 154.76 29.7349 154.364 29.7349 cv
153.986 29.7349 153.698 29.8789 153.482 30.1582 cv
153.266 30.437 153.14 30.8423 153.095 31.3818 cv
155.624 31.3818 li
155.624 31.3818 li
cp
156.578 31.8501 mo
153.095 31.8501 li
153.095 31.8862 li
153.095 32.5161 153.212 32.9932 153.446 33.3169 cv
153.68 33.6411 154.031 33.7939 154.499 33.7939 cv
154.85 33.7939 155.138 33.7041 155.372 33.5151 cv
155.597 33.335 155.759 33.0562 155.849 32.687 cv
156.497 32.687 li
156.371 33.2002 156.128 33.5869 155.786 33.8389 cv
155.435 34.0913 154.976 34.2173 154.418 34.2173 cv
153.734 34.2173 153.185 34.001 152.771 33.5513 cv
152.357 33.1011 152.15 32.5068 152.15 31.7603 cv
152.15 31.022 152.348 30.4282 152.762 29.978 cv
153.167 29.5278 153.698 29.3032 154.364 29.3032 cv
155.066 29.3032 155.615 29.5278 155.993 29.96 cv
156.371 30.3921 156.56 31.022 156.578 31.8501 cv
ef
161.282 29.4199 mo
161.282 30.5898 li
160.814 30.5898 li
160.796 30.356 160.733 30.1851 160.625 30.0679 cv
160.508 29.96 160.337 29.897 160.121 29.897 cv
159.725 29.897 159.419 30.041 159.203 30.311 cv
158.987 30.5898 158.888 30.9858 158.888 31.499 cv
158.888 33.6318 li
159.824 33.6318 li
159.824 34.1001 li
157.349 34.1001 li
157.349 33.6318 li
158.078 33.6318 li
158.078 29.8882 li
157.304 29.8882 li
157.304 29.4292 li
158.888 29.4292 li
158.888 30.2568 li
159.041 29.9331 159.239 29.6992 159.491 29.5371 cv
159.743 29.3843 160.049 29.3032 160.409 29.3032 cv
160.535 29.3032 160.679 29.3208 160.823 29.3389 cv
160.967 29.3569 161.12 29.3843 161.282 29.4199 cv
161.282 29.4199 li
cp
ef
163.208 33.6318 mo
163.973 33.6318 li
163.973 34.1001 li
161.624 34.1001 li
161.624 33.6318 li
162.398 33.6318 li
162.398 29.897 li
161.624 29.897 li
161.624 29.4292 li
163.208 29.4292 li
163.208 33.6318 li
163.208 33.6318 li
cp
162.173 27.98 mo
162.173 27.8452 162.218 27.728 162.317 27.6289 cv
162.416 27.5303 162.533 27.4761 162.677 27.4761 cv
162.803 27.4761 162.92 27.5303 163.019 27.6289 cv
163.118 27.728 163.172 27.8452 163.172 27.98 cv
163.172 28.124 163.118 28.2412 163.028 28.3311 cv
162.929 28.4302 162.813 28.4751 162.677 28.4751 cv
162.533 28.4751 162.416 28.4302 162.317 28.3311 cv
162.218 28.2412 162.173 28.124 162.173 27.98 cv
ef
168.842 30.3379 mo
168.995 29.9961 169.193 29.7441 169.436 29.564 cv
169.679 29.3931 169.958 29.3032 170.282 29.3032 cv
170.768 29.3032 171.137 29.4561 171.38 29.7622 cv
171.614 30.0679 171.74 30.5181 171.74 31.1299 cv
171.74 33.6318 li
172.469 33.6318 li
172.469 34.1001 li
170.228 34.1001 li
170.228 33.6318 li
170.93 33.6318 li
170.93 31.2202 li
170.93 30.752 170.858 30.4102 170.714 30.2031 cv
170.57 30.0049 170.345 29.897 170.021 29.897 cv
169.661 29.897 169.382 30.041 169.193 30.311 cv
169.004 30.5811 168.914 30.9771 168.914 31.499 cv
168.914 33.6318 li
169.616 33.6318 li
169.616 34.1001 li
167.402 34.1001 li
167.402 33.6318 li
168.104 33.6318 li
168.104 31.1929 li
168.104 30.7251 168.032 30.3921 167.888 30.1938 cv
167.744 29.9961 167.519 29.897 167.195 29.897 cv
166.835 29.897 166.556 30.041 166.367 30.311 cv
166.178 30.5811 166.088 30.9771 166.088 31.499 cv
166.088 33.6318 li
166.79 33.6318 li
166.79 34.1001 li
164.549 34.1001 li
164.549 33.6318 li
165.278 33.6318 li
165.278 29.8882 li
164.504 29.8882 li
164.504 29.4292 li
166.088 29.4292 li
166.088 30.2568 li
166.232 29.9512 166.421 29.708 166.655 29.5459 cv
166.889 29.3843 167.15 29.3032 167.447 29.3032 cv
167.807 29.3032 168.104 29.3931 168.347 29.5732 cv
168.59 29.7529 168.752 30.0142 168.842 30.3379 cv
168.842 30.3379 li
cp
ef
176.504 31.3818 mo
176.486 30.8423 176.369 30.4282 176.153 30.1489 cv
175.938 29.8789 175.64 29.7349 175.244 29.7349 cv
174.866 29.7349 174.578 29.8789 174.362 30.1582 cv
174.146 30.437 174.02 30.8423 173.975 31.3818 cv
176.504 31.3818 li
176.504 31.3818 li
cp
177.458 31.8501 mo
173.975 31.8501 li
173.975 31.8862 li
173.975 32.5161 174.092 32.9932 174.326 33.3169 cv
174.56 33.6411 174.911 33.7939 175.379 33.7939 cv
175.73 33.7939 176.018 33.7041 176.252 33.5151 cv
176.477 33.335 176.639 33.0562 176.729 32.687 cv
177.377 32.687 li
177.251 33.2002 177.008 33.5869 176.666 33.8389 cv
176.315 34.0913 175.856 34.2173 175.298 34.2173 cv
174.614 34.2173 174.065 34.001 173.651 33.5513 cv
173.237 33.1011 173.03 32.5068 173.03 31.7603 cv
173.03 31.022 173.228 30.4282 173.642 29.978 cv
174.047 29.5278 174.578 29.3032 175.244 29.3032 cv
175.946 29.3032 176.495 29.5278 176.873 29.96 cv
177.251 30.3921 177.44 31.022 177.458 31.8501 cv
ef
178.229 34.1001 mo
178.229 33.6318 li
178.958 33.6318 li
178.958 29.897 li
178.184 29.897 li
178.184 29.4292 li
179.768 29.4292 li
179.768 30.2568 li
179.912 29.9512 180.11 29.708 180.344 29.5459 cv
180.578 29.3843 180.857 29.3032 181.181 29.3032 cv
181.694 29.3032 182.072 29.4561 182.315 29.7441 cv
182.558 30.041 182.684 30.5 182.684 31.1299 cv
182.684 33.6318 li
183.404 33.6318 li
183.404 34.1001 li
181.172 34.1001 li
181.172 33.6318 li
181.874 33.6318 li
181.874 31.3818 li
181.874 30.8149 181.802 30.4282 181.658 30.2119 cv
181.514 29.9961 181.271 29.8882 180.92 29.8882 cv
180.542 29.8882 180.254 30.0322 180.056 30.3022 cv
179.858 30.5811 179.768 30.9771 179.768 31.499 cv
179.768 33.6318 li
180.47 33.6318 li
180.47 34.1001 li
178.229 34.1001 li
178.229 34.1001 li
cp
ef
184.832 29.897 mo
184.121 29.897 li
184.121 29.4292 li
184.832 29.4292 li
184.832 27.98 li
185.642 27.98 li
185.642 29.4292 li
187.163 29.4292 li
187.163 29.897 li
185.642 29.897 li
185.642 32.8672 li
185.642 33.2632 185.678 33.5239 185.759 33.6318 cv
185.831 33.7402 185.975 33.7939 186.182 33.7939 cv
186.389 33.7939 186.542 33.731 186.641 33.605 cv
186.731 33.479 186.785 33.2813 186.794 33.002 cv
187.406 33.002 li
187.379 33.4341 187.262 33.7402 187.055 33.9292 cv
186.848 34.1182 186.533 34.2173 186.11 34.2173 cv
185.642 34.2173 185.309 34.1089 185.12 33.9111 cv
184.922 33.7129 184.832 33.3618 184.832 32.8672 cv
184.832 29.897 li
184.832 29.897 li
cp
ef
0 lc
[6 6 ] 0 dsh
111.675 41.5332 mo
124.275 41.5332 li
0 .993988 1 0 cmyk
@
135.017 44.3452 mo
135.017 42.8511 li
135.521 42.8511 li
135.53 43.355 135.674 43.7241 135.953 43.958 cv
136.223 44.2012 136.646 44.3179 137.204 44.3179 cv
137.726 44.3179 138.122 44.2192 138.392 44.0122 cv
138.662 43.8052 138.806 43.499 138.806 43.103 cv
138.806 42.7881 138.716 42.5449 138.554 42.374 cv
138.392 42.2119 138.041 42.041 137.51 41.8789 cv
136.646 41.6182 li
136.016 41.4292 135.566 41.1948 135.314 40.9072 cv
135.063 40.6279 134.936 40.2412 134.936 39.7368 cv
134.936 39.1792 135.134 38.7471 135.53 38.4409 cv
135.926 38.1353 136.475 37.9819 137.195 37.9819 cv
137.501 37.9819 137.834 38.0181 138.194 38.0811 cv
138.554 38.1528 138.941 38.2432 139.355 38.3691 cv
139.355 39.7642 li
138.86 39.7642 li
138.806 39.3052 138.653 38.9722 138.392 38.7651 cv
138.131 38.5581 137.735 38.4502 137.213 38.4502 cv
136.745 38.4502 136.394 38.5493 136.151 38.7383 cv
135.908 38.9272 135.791 39.1973 135.791 39.5571 cv
135.791 39.8721 135.881 40.1152 136.061 40.2949 cv
136.241 40.4751 136.628 40.6553 137.222 40.8262 cv
138.032 41.0688 li
138.626 41.249 139.049 41.4829 139.301 41.7529 cv
139.553 42.0322 139.688 42.4009 139.688 42.8691 cv
139.688 43.5083 139.481 43.9849 139.076 44.3003 cv
138.662 44.624 138.059 44.7769 137.258 44.7769 cv
136.898 44.7769 136.529 44.7412 136.151 44.6689 cv
135.773 44.606 135.395 44.498 135.017 44.3452 cv
135.017 44.3452 li
cp
0 0 0 1 cmyk
ef
142.328 44.1919 mo
143.093 44.1919 li
143.093 44.6602 li
140.744 44.6602 li
140.744 44.1919 li
141.518 44.1919 li
141.518 40.457 li
140.744 40.457 li
140.744 39.9893 li
142.328 39.9893 li
142.328 44.1919 li
142.328 44.1919 li
cp
141.293 38.54 mo
141.293 38.4053 141.338 38.2881 141.438 38.189 cv
141.536 38.0898 141.653 38.0361 141.797 38.0361 cv
141.923 38.0361 142.04 38.0898 142.139 38.189 cv
142.238 38.2881 142.292 38.4053 142.292 38.54 cv
142.292 38.6841 142.238 38.8013 142.148 38.8911 cv
142.049 38.9902 141.932 39.0352 141.797 39.0352 cv
141.653 39.0352 141.536 38.9902 141.438 38.8911 cv
141.338 38.8013 141.293 38.6841 141.293 38.54 cv
ef
147.962 40.8979 mo
148.115 40.5562 148.313 40.3042 148.556 40.124 cv
148.799 39.9531 149.078 39.8633 149.402 39.8633 cv
149.888 39.8633 150.257 40.0161 150.5 40.3223 cv
150.734 40.6279 150.86 41.0781 150.86 41.6899 cv
150.86 44.1919 li
151.589 44.1919 li
151.589 44.6602 li
149.348 44.6602 li
149.348 44.1919 li
150.05 44.1919 li
150.05 41.7803 li
150.05 41.312 149.978 40.9702 149.834 40.7632 cv
149.69 40.5649 149.465 40.457 149.141 40.457 cv
148.781 40.457 148.502 40.6011 148.313 40.8711 cv
148.124 41.1411 148.034 41.5371 148.034 42.0591 cv
148.034 44.1919 li
148.736 44.1919 li
148.736 44.6602 li
146.522 44.6602 li
146.522 44.1919 li
147.224 44.1919 li
147.224 41.7529 li
147.224 41.2852 147.152 40.9521 147.008 40.7539 cv
146.864 40.5562 146.639 40.457 146.315 40.457 cv
145.955 40.457 145.676 40.6011 145.487 40.8711 cv
145.298 41.1411 145.208 41.5371 145.208 42.0591 cv
145.208 44.1919 li
145.91 44.1919 li
145.91 44.6602 li
143.669 44.6602 li
143.669 44.1919 li
144.398 44.1919 li
144.398 40.4482 li
143.624 40.4482 li
143.624 39.9893 li
145.208 39.9893 li
145.208 40.8169 li
145.352 40.5112 145.541 40.2681 145.775 40.106 cv
146.009 39.9438 146.27 39.8633 146.567 39.8633 cv
146.927 39.8633 147.224 39.9531 147.467 40.1333 cv
147.71 40.313 147.872 40.5742 147.962 40.8979 cv
147.962 40.8979 li
cp
ef
154.886 39.9893 mo
156.398 39.9893 li
156.398 44.1919 li
157.163 44.1919 li
157.163 44.6602 li
155.588 44.6602 li
155.588 43.832 li
155.435 44.147 155.237 44.3809 155.003 44.543 cv
154.769 44.6963 154.49 44.7769 154.184 44.7769 cv
153.662 44.7769 153.275 44.6333 153.032 44.3452 cv
152.789 44.0571 152.672 43.5889 152.672 42.959 cv
152.672 40.457 li
151.943 40.457 li
151.943 39.9893 li
153.482 39.9893 li
153.482 42.707 li
153.482 43.2832 153.545 43.6699 153.689 43.877 cv
153.833 44.0933 154.076 44.1919 154.436 44.1919 cv
154.814 44.1919 155.093 44.0571 155.291 43.7778 cv
155.489 43.5083 155.588 43.103 155.588 42.5811 cv
155.588 40.457 li
154.886 40.457 li
154.886 39.9893 li
154.886 39.9893 li
cp
ef
159.305 44.1919 mo
160.07 44.1919 li
160.07 44.6602 li
157.721 44.6602 li
157.721 44.1919 li
158.495 44.1919 li
158.495 38.2881 li
157.721 38.2881 li
157.721 37.8198 li
159.305 37.8198 li
159.305 44.1919 li
159.305 44.1919 li
cp
ef
164.732 41.7441 mo
164.732 44.1919 li
165.452 44.1919 li
165.452 44.6602 li
163.922 44.6602 li
163.922 44.1563 li
163.742 44.3721 163.535 44.5342 163.301 44.6333 cv
163.067 44.7231 162.788 44.7769 162.482 44.7769 cv
161.96 44.7769 161.546 44.6421 161.24 44.3721 cv
160.934 44.1021 160.79 43.7241 160.79 43.2559 cv
160.79 42.7788 160.961 42.4102 161.313 42.1401 cv
161.654 41.8701 162.149 41.7349 162.788 41.7349 cv
163.922 41.7349 li
163.922 41.4111 li
163.922 41.0601 163.814 40.79 163.598 40.5923 cv
163.382 40.394 163.076 40.2949 162.689 40.2949 cv
162.365 40.2949 162.113 40.376 161.924 40.52 cv
161.726 40.6641 161.609 40.8799 161.564 41.168 cv
161.15 41.168 li
161.15 40.2231 li
161.429 40.106 161.699 40.0161 161.969 39.9531 cv
162.23 39.8989 162.491 39.8633 162.743 39.8633 cv
163.391 39.8633 163.877 40.0249 164.219 40.3491 cv
164.561 40.6729 164.732 41.1318 164.732 41.7441 cv
164.732 41.7441 li
cp
163.922 43.1929 mo
163.922 42.2031 li
162.878 42.2031 li
162.473 42.2031 162.176 42.293 161.978 42.4639 cv
161.78 42.644 161.69 42.9053 161.69 43.2559 cv
161.69 43.5801 161.789 43.8413 161.987 44.0303 cv
162.185 44.228 162.455 44.3179 162.797 44.3179 cv
163.13 44.3179 163.4 44.2192 163.607 44.0122 cv
163.814 43.8052 163.922 43.5352 163.922 43.1929 cv
ef
166.832 40.457 mo
166.121 40.457 li
166.121 39.9893 li
166.832 39.9893 li
166.832 38.54 li
167.642 38.54 li
167.642 39.9893 li
169.163 39.9893 li
169.163 40.457 li
167.642 40.457 li
167.642 43.4272 li
167.642 43.8232 167.678 44.084 167.759 44.1919 cv
167.831 44.3003 167.975 44.354 168.182 44.354 cv
168.389 44.354 168.542 44.291 168.641 44.165 cv
168.731 44.0391 168.785 43.8413 168.794 43.562 cv
169.406 43.562 li
169.379 43.9941 169.262 44.3003 169.055 44.4893 cv
168.848 44.6782 168.533 44.7769 168.11 44.7769 cv
167.642 44.7769 167.309 44.6689 167.12 44.4712 cv
166.922 44.2729 166.832 43.9219 166.832 43.4272 cv
166.832 40.457 li
166.832 40.457 li
cp
ef
171.368 44.1919 mo
172.133 44.1919 li
172.133 44.6602 li
169.784 44.6602 li
169.784 44.1919 li
170.558 44.1919 li
170.558 40.457 li
169.784 40.457 li
169.784 39.9893 li
171.368 39.9893 li
171.368 44.1919 li
171.368 44.1919 li
cp
170.333 38.54 mo
170.333 38.4053 170.378 38.2881 170.477 38.189 cv
170.576 38.0898 170.693 38.0361 170.837 38.0361 cv
170.963 38.0361 171.08 38.0898 171.179 38.189 cv
171.278 38.2881 171.332 38.4053 171.332 38.54 cv
171.332 38.6841 171.278 38.8013 171.188 38.8911 cv
171.089 38.9902 170.972 39.0352 170.837 39.0352 cv
170.693 39.0352 170.576 38.9902 170.477 38.8911 cv
170.378 38.8013 170.333 38.6841 170.333 38.54 cv
ef
175.049 44.7769 mo
174.365 44.7769 173.825 44.561 173.411 44.1108 cv
172.997 43.6611 172.79 43.0669 172.79 42.3198 cv
172.79 41.582 172.988 40.9883 173.402 40.5381 cv
173.816 40.0879 174.365 39.8633 175.049 39.8633 cv
175.733 39.8633 176.273 40.0879 176.688 40.5381 cv
177.101 40.9883 177.308 41.582 177.308 42.3198 cv
177.308 43.0669 177.101 43.6611 176.688 44.1108 cv
176.273 44.561 175.733 44.7769 175.049 44.7769 cv
175.049 44.7769 li
cp
175.049 44.354 mo
175.481 44.354 175.805 44.1831 176.03 43.8413 cv
176.246 43.499 176.363 42.9951 176.363 42.3198 cv
176.363 41.6538 176.246 41.1499 176.03 40.8081 cv
175.805 40.4663 175.481 40.2949 175.049 40.2949 cv
174.617 40.2949 174.284 40.4663 174.068 40.8081 cv
173.843 41.1499 173.735 41.6538 173.735 42.3198 cv
173.735 42.9951 173.843 43.499 174.068 43.8413 cv
174.284 44.1831 174.617 44.354 175.049 44.354 cv
ef
177.989 44.6602 mo
177.989 44.1919 li
178.718 44.1919 li
178.718 40.457 li
177.944 40.457 li
177.944 39.9893 li
179.528 39.9893 li
179.528 40.8169 li
179.672 40.5112 179.87 40.2681 180.104 40.106 cv
180.338 39.9438 180.617 39.8633 180.941 39.8633 cv
181.454 39.8633 181.832 40.0161 182.075 40.3042 cv
182.318 40.6011 182.444 41.0601 182.444 41.6899 cv
182.444 44.1919 li
183.164 44.1919 li
183.164 44.6602 li
180.932 44.6602 li
180.932 44.1919 li
181.634 44.1919 li
181.634 41.9419 li
181.634 41.375 181.563 40.9883 181.418 40.772 cv
181.274 40.5562 181.031 40.4482 180.68 40.4482 cv
180.302 40.4482 180.014 40.5923 179.816 40.8618 cv
179.618 41.1411 179.528 41.5371 179.528 42.0591 cv
179.528 44.1919 li
180.23 44.1919 li
180.23 44.6602 li
177.989 44.6602 li
177.989 44.6602 li
cp
ef
[1 3 ] 0 dsh
111.675 52.0513 mo
124.275 52.0513 li
.883665 .769161 0 0 cmyk
@
134.621 55.2202 mo
134.621 54.752 li
135.503 54.752 li
135.503 49.127 li
134.621 49.127 li
134.621 48.6592 li
136.304 48.6592 li
140.237 53.834 li
140.237 49.127 li
139.355 49.127 li
139.355 48.6592 li
141.659 48.6592 li
141.659 49.127 li
140.777 49.127 li
140.777 55.3369 li
140.246 55.3369 li
136.043 49.8198 li
136.043 54.752 li
136.925 54.752 li
136.925 55.2202 li
134.621 55.2202 li
134.621 55.2202 li
cp
0 0 0 1 cmyk
ef
144.809 55.3369 mo
144.125 55.3369 143.585 55.1211 143.171 54.6709 cv
142.757 54.2212 142.55 53.627 142.55 52.8799 cv
142.55 52.1421 142.748 51.5479 143.162 51.0981 cv
143.576 50.6479 144.125 50.4229 144.809 50.4229 cv
145.493 50.4229 146.033 50.6479 146.447 51.0981 cv
146.861 51.5479 147.068 52.1421 147.068 52.8799 cv
147.068 53.627 146.861 54.2212 146.447 54.6709 cv
146.033 55.1211 145.493 55.3369 144.809 55.3369 cv
144.809 55.3369 li
cp
144.809 54.9141 mo
145.241 54.9141 145.565 54.7432 145.79 54.4009 cv
146.006 54.0591 146.123 53.5552 146.123 52.8799 cv
146.123 52.2139 146.006 51.71 145.79 51.3682 cv
145.565 51.0259 145.241 50.855 144.809 50.855 cv
144.377 50.855 144.044 51.0259 143.828 51.3682 cv
143.603 51.71 143.495 52.2139 143.495 52.8799 cv
143.495 53.5552 143.603 54.0591 143.828 54.4009 cv
144.044 54.7432 144.377 54.9141 144.809 54.9141 cv
ef
150.629 55.2202 mo
150.629 54.752 li
151.358 54.752 li
151.358 51.0171 li
150.584 51.0171 li
150.584 50.5493 li
152.168 50.5493 li
152.168 51.377 li
152.313 51.0713 152.51 50.8281 152.744 50.666 cv
152.978 50.5039 153.257 50.4229 153.581 50.4229 cv
154.094 50.4229 154.472 50.5762 154.715 50.8643 cv
154.958 51.1611 155.084 51.6201 155.084 52.25 cv
155.084 54.752 li
155.804 54.752 li
155.804 55.2202 li
153.572 55.2202 li
153.572 54.752 li
154.274 54.752 li
154.274 52.502 li
154.274 51.9351 154.202 51.5479 154.058 51.332 cv
153.914 51.1162 153.671 51.0083 153.32 51.0083 cv
152.942 51.0083 152.654 51.1519 152.456 51.4219 cv
152.258 51.7012 152.168 52.0972 152.168 52.6191 cv
152.168 54.752 li
152.87 54.752 li
152.87 55.2202 li
150.629 55.2202 li
150.629 55.2202 li
cp
ef
156.974 52.9429 mo
162.608 52.9429 li
162.608 53.645 li
156.974 53.645 li
156.974 52.9429 li
156.974 52.9429 li
cp
156.974 51.1519 mo
162.608 51.1519 li
162.608 51.854 li
156.974 51.854 li
156.974 51.1519 li
ef
166.563 55.3369 mo
165.842 55.3369 165.284 55.04 164.888 54.4463 cv
164.492 53.8521 164.294 53.0239 164.294 51.9438 cv
164.294 50.873 164.492 50.0361 164.888 49.4419 cv
165.284 48.8481 165.842 48.542 166.563 48.542 cv
167.273 48.542 167.831 48.8481 168.227 49.4419 cv
168.623 50.0361 168.83 50.873 168.83 51.9438 cv
168.83 53.0239 168.623 53.8521 168.227 54.4463 cv
167.831 55.04 167.273 55.3369 166.563 55.3369 cv
166.563 55.3369 li
cp
166.563 54.9141 mo
167.012 54.9141 167.345 54.6709 167.57 54.1763 cv
167.786 53.6899 167.903 52.9429 167.903 51.9438 cv
167.903 50.9541 167.786 50.207 167.57 49.7119 cv
167.345 49.2261 167.012 48.9741 166.563 48.9741 cv
166.112 48.9741 165.77 49.2261 165.554 49.7119 cv
165.329 50.207 165.221 50.9541 165.221 51.9438 cv
165.221 52.9429 165.329 53.6899 165.554 54.1763 cv
165.77 54.6709 166.112 54.9141 166.563 54.9141 cv
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 16.0%%AI8_CreatorVersion: 16.0.0%%For: (Troy Carter) ()%%Title: (spectra_3.eps)%%CreationDate: 8/6/12 12:03 PM%%Canvassize: 16383%AI9_DataStream%Gb!9spKf=BdkH)cJ9q82`<;BWR:m)R[*4Dbaq=^Up[dbGO71du<JR!6@:g@n3o>;8rb[=WSdq$sWk,5mSM%9uR]lDHH_L,iQ)&5c%8QCq:R]Iemb>+k^48%'+2lKF$OsE[K=DGPII+=\!P>:G?f'O5WNE2shOt?T:D'fdon*m-A]WO+1XoBXSNU"]",+[WA+"R"RXjZK^%<I7;?a[ui'Q,ga;^%$F@oCZASX<\6J6*U2VWk@O^>u3,%8$Mg!qZW(f>-A/OKEe-1FRejH?gJ"_Z_f?(1Aj"'gTXZJ78ag'^=\Tb%BZ\KcC$iUjm<,GBHE2<Uce@`mg0`CUB:"W_Z0eWqPB#nk9ns(ti3D?gmAo'Ap1a_#Wha;#UhUkDl$d7k@EbOsZ70E\;mhgpA7QER%f91l^A/3';E6n_Shf*R>qkmctcUr5U<dh)m-joR:hHBf,!%5(L!U7ZQI<,25W-'_]ocEasi6\>\4D_^^)Go:9^XB%ne<0cApQH@P%YBJc<4^`nCis0S1P-fHA5bits^GR:D9H,s/f:(m)9@D!p<L8oH!TQhqWba#%KSi'q2_>$/:5cFLaXY;FYS(9S#uj%g3ZiS2n+GfM%.q_%`GNu@am7em@d19,Tee7tkq>[go0]ZQDen"^`Sgtih4="JKcY*FD+2EWUC)ui@5eSr&%Xfc+Y;Ao&?58QqBaPF4^WF@-]im@W%QJeC8ihp5CVetI,Z,iW=MLSV@T;jA)<E8n&;Sfj,>D@^*$j1ts#*q"Q/7fZ`$EqpeZ&EO0)&rS6gU<*<C`?%+2uLTl`?LTt(@fXY%&YBbq=Jf!4Vj3-Ji7jM(5-IrL41*&8^U-547J[_UjNgg`OiC0JKk%tq/;7Tn,Gi_*7/2UME('JXj5u`%n)B`('7\tsn.TT3GbR(U%M!u(uNIMOtA&:,Q2JN%j$HIjm=Jet^(oIo<SDooFO^\V]l'leU[.grrZu<<oloCsU01#VH.3'FY@SN)=FO]q#V&93N;E-j8@>Yfr%/rgH,nJ@4GdN:\fcOkc$=:3*(T9P4t9.4+\qq*+U!UMi0+&4WG5DjS77IeCf6:XdtO$0E>U@$Bt3PB)4rX[31kW!57kjWFMCAJXb%LS%\+ni)Siie5%(T3):fQUl2Ck-@?/7pDYAc$>]J$Kj>63TUst$X>;D9e"q5mjQb$]+f29F&!<22VN@+`ET7Je+`*JqN(??8g`Y3%8ook/>!n#AU\sFM4+/K=k0iNe(<;W^qin]Qhn/fADnA-M-/GCQa0J>Clk.8`^?oB^pQbK>[nH%`Dp#@Rro%4a'kR)7;<S\f0E$Y^%(]JLUdXR*1bdlf,qj7:<:&<WC9E/-1rG>]MD2\A9kNNZS0E"s#d,47uqCds`PpjTL9E1:#oXF^arf`k%<1bE&n<;:croUuZ?PoE0%'fE[&WZXJm5NQp^@[7]aDpe=MQ<DAJCm;Em[o*,Od\FN:q6j^b&rmOD7No@;.s//f$-s&`0e6)3;N`NNO][4p!R&$`a]hT%i<[RA%fO':0eIgt>]bU8pIL?+eDjm9TXDR]+rXAZs7tLWU5!_DX]4@0$%Gi]dln/3<ZLKT6Vk^"sUEdZ;YmrfYI+sb$[WoL&(s-tQ7I--F%'IWNi[=iHK-5`+PF-5"g^;41$WL^^-mmshK=Ao'h@[$L)qhfOUIu&UP9D_Nb-IVZ'TAVA+)W)`e,l\G@DjAnNR/CgPCRno?EC@i?%gS^mA((4?_\e,2"F4rSNT5k11N(3[g@Yj$!igSGQ4f@343:RsV594`t;2RO^I3eis"QGs&O"I>B8h3Xmg5:ZP.`cW-469FsbM4/.%N91kakF0D).HcDn)=Pp1kh?`_=3q>o@NKik;Al2cUV'.&K7%R&]_k&f3&3sMcc>I=4iCM-jVAtB_6=905t6D'@WX+LH!2T7"/R1>%NP*7[86W,p=<FdX>))T0iu6&,.oM>s'?;W_LZ8oU#C_dno5\/Lr!ND`r'[an/J[j\]i%6\OZ>!(Ip%\oaqVm\IU!!&ET8^*ErL7=%&3)UN;]rcqGMn[Z#-Gf8bI'LaKfu7W<YUQ%h@l\Dejk"KpPj3qqq'eU#Bu]0Li]^TW$ZNW;$$0:gd9tQ,4);QH:QkioKs,N=rI>R%s&)I9V76SFM_Z[_SanPd]OG)[V-g-/Br![aVari%I>^[Lc*\hj!M5VtI7^r%@*MoN5t5,?R[NjLi"jqJPZ-cs88I6f6gU$*A[/FT%Fs>gpU-o&[:LW#'*+L4?l[T]`^6;n,8!NRD].dAqS;0'oStOm#EfOLVdoMU#M^laYOV0QY6<1s%RJqp?*D0fpao#A:P"d58l0Yq'%n65POE'@_B+Y#X#3bkO[R"Xu)T$Q;1P\f[p5OPJ+PYc7<1_-4!h?Mbd7-&27pI'0E:1bKA;@2GGK@XHdNY"&Pe$5,E)Q+(9r=PA"%M9?!t!LZ%1IN?OC$sGaC9WW[_?Pt<;nI7B.m/XLYptt*+U9gQGF'%+AV%p7-C*ZcCA^Xcb0`h!H7emkX;9H8LXsW-h`iY;3hB_,^%$C!?7-"Oo3_F[jZKh@qke>)t=>[:7$HB$3O"CeqT60i!M:UCGX<8gr5HAYt*Ek\:A%B4umA^VWcA/5+WHD(iO1b,NTDP?onc8VKs%i,bS%,>jiJ#:ZX^=BB<"$[Un@FYCX#RJ3%XQF(.B8au"&7:n\_&8To[2F^'$(#2iGho2R^Qg%2^Gtl\=U^_Z?n47e`N2Pn!>1#_e%@T[XF;(W(6->e\4"-j<V9/EPhlj3hb@d0[ooF^\NF#Gem_4GkZA,ZkV)qE!/Kl:2RlN7)"XiolDLV#o5T8ZN69'0u.omh^qFHl:=%Z'i.5dMgn%-s$^7k8$=:;b7IhI1W<0V?O,$M:O3N;q*7%VA:*DNbMQmT$>(-niEi-VA:,!K9l9'$fKg5(nft@76Z0<'>",$E.l%s%9DG$<QaMtEDhD.&H0UA5I7VVKTUFH6+^/4E/^d7Zdf\KIFcY,rUHI]0-$i,i*EA\%)sS>JO6O))g8/o*o_F.dn?V:@=E31V"SqKG%:o=%/qiQo1oV=`("E%q:]$t+_AM\qRWEPna']E$AD\7"/aiE3qRie"c:nNQXhf!.@(==fS`s(!!+uPK]TiU5XNJsf,E.bJ8o2hpJ%l0!<97\%B[%BcV>pYNqB7>DsX`'Rs_*qnBs^V!kp^4W1[<+1e8M`R6Za93kZ.SYf9kE7Xii;C`7isOCH-m^0ZY+aXdBdf7:)8&X'%6*NX3DIGVT/Mk+Q(,E#6orMFlOSVJ3;lQ<]D+HsJU:jZJHU[=NlM&Y.'"*AE1IhuI#R.PYEI>E#Hrd-:-8eqt=9H%5Gcr]Mj%=]b%=*3R4d[A\oR]U\=2"J<2b`8plaB]mTeQeeX`VGU9S3R,(?T[EddXkXO]"3T^pWr);LT*&g5`r!`5V,3\CN=0tq/s#]#sOF<p"jCs%Q-?D,?I;)[]lK[eI"g721ie:.4i%ScY#Hqn5OrkF*uj<@eZid-9X,L`rd5UZ,]@ZOTY?!#@;LBo.:;#'N4pS[-*>AP<?BniRYY1g%0%MJ<W=$,E8`(qNFim4=;ak#8U3R6POubGN,Fkke(:ujoe_s-O.tK3Nh4]DA\Nlr9_0JU0R21pPV8^)AVUkrFa\"=F+o7__ZFX,0%+WXRP9*CA/eLJ/#K&rpaaQb?2/Q4"KE@C".X;._TKdD;r'u)qS,#T.f#?1ijctRT[l8RS.@uHKk:^Y;_S';LS16k^$^$/50r=fe*%3&U8O-#'p*Hju!1bi4fPE[:C*BO0-RkF.e8d'RY>>d=<Y2gXE\cJM)s1\a]7\!#oo-JfCj6K.n/rbps/6$KnB@sZsj'l,p<)?-!!%,uGt_r_a,Ne/G(87fDPr%Q'VGoqk`lYZQrreN$l#]EUaQ'V*2XasHD(DWRVDi0GRJ*75ZQ5B@3mQfV%))pj$HInGNH0jEQ)cB$a6%U6.`#rhO51IDBGiP=LM?Q;^c>9B9S@DU3ZOr04P@Da#6K^M-r8qnI5AVo31.WaD`I\8_u3^*sGPrsIpsg-4'53+?'KifZLaYo+Gf%Vj=2/Mgh0X;HHc02*$u':A$V_bA_S1Nhp.3R4_c_^>b^iqQ8EH_EBDT^0BTmdqZ8HkqhKaH#csOrNth'&+]VfW!0$`:#(_j3$M/"%a-4LR4PK51IbMEY[oO]:Ir.@#P*`SC?E7$)TA")Oq"YHuQqq>8NhGHYVtpH0^i-,E[T[Uq7oi]*<'.K5I0abSTD\09[nF-<<p.YS%SO1NEIqjsD>H$,(<1C)5hpkJKE7H=qC9uVc'"Cm362_mM;?]b)Fh=jpQ.A"P2B[df6AkOVLaXB.MU>8.pQ7!`C<bA5;`F[>m5Te/%Y4(]\GOKX:L!EKg,C/-\24SEpO.=oAQp@qSs,K!4a:$8Q-:La\9<<ZYV0o38^TJ;"*Spi[r81b+Z.`m@h`KB^8,Xa4JUloY9D$mk%N:lYkF/r1,I_#A%5Ye>M?N$]t48ZMAX*qr6DR01D#:101`fXiXr_r3tHlUY.44R*>(+FZ&J@Bjr'mTcFVr"Jb#\ndqEKb),m%`:;%O^[lG.\u-n;ka0rWaA`nbKJ::hkj1gLL]f17]i0$m5J8LBp'R[PsjaM'Q3TAdCZ#Hk)QHK[H(40G?4`Y"85h/.=%GFKPcHanu<%I%e&:/RU%G1^I"H9nKHL62O$3:/#=/;\b#7daH$_1j?NGOsRNU.q-?<'1Y9oDmkTB^K,CuQ#iu!T2PA6is1a@E5H&g]bs!Cc%lDsqV%oPJJ/GtFM?S8RiIL*=P;<$tS:Dj7'5-rcNZqM7`I<qH>F0N@*8L/cIpb4j.YUZ=/MIfj3=YPJW9UY>O1r0EMV?$MTbQK4i?P1V,'%K51#V#E=V)<Z>U^8LTX(K_(a<2,E@$qCJ!%FK5?F2If<D5"i3KAF?g*D4Iu+hZ-D`aDP:p^X_((WSVJNWrF,@4.l-G._"SA[I]iO%JakC^op=5[E'.Od4deSrTZ(Hq!m"jMPX:mGbK`:`[h#CE`d-m7[SQa@dd#Dgj5d2VWjGLUnJqE`g$)'/<$PLW?/B_D2f<P8fr$Vc%JjK\UoR3BKZ4./<PO-l8IN!m/SL,3HlsuBVk66&ke)uVX*5nN'D1b:/I/,_shPn7VD?%MbTduR@L";MgP0],[\4,::[9>@ufhUq"%Q8E\he\b&&63d]1'fn%QXO@4':k:uZ8M1:fC@e'4pWUI;m#hLijePi@eiI1aT%Etr,L]?Z\_a:Z)#Z4qOd33b0Iu>7chq\BVpXG1%?\1!=UkGZ<"][8dPP%3q1i^#!j(\JjUUTWN9St<$#Xh^$d8Q&*?#g&qW8)A3r!GVC9ogi0WP6mQc1a\E;!EVd>@1ehZlce6*mb1M%TiZ*FYk")r.s*SY:U0]P53l2h!Th7a#JTh.jW+^r3+a'_%#/tsTV_SD?EH5t/0[M6Wp,hKKf!+MZs"K$/##"ZP]\ur@*og]6-=I4%6ST98XKsl?Ts)%=>B3,/0,$hiN6tKRk3;&Z+hbR3CRe$a\[P[V1l>]?Z%?_(SQO7h+\Hu<GL0]820WfV/m]"T07*V9S'S[[WE(m$%p$M&1X)BK`WcgUTWiXrmomEU9@$OZPakM;^f<^DX)$EoPLJMBP&!Qg]?7U;)"oH!nN)c7^A0^n>ZVOsMX+JlbKN>,/rc4/uY4^7Z%e=3jV%hrimP$m[b5&12Lb/m_&h0_+b0;%_8bS2YFXpHR]n$Xp`$)X=5aTZ1CrV!Jh>6"Cj]'2NTrAI6/8QBak9I>g,;D;?\^;-`5%YQjM27jh/>6>N+O4Du5>o\)!tk]_&KLBg>raZq?c#l3A]7M?gr6T7+"kFWecV.eW^jXMTR^JO4WUY^7_E2CJ*R6SZOSg-jqfk1!K%T5(:9.SSQ*d=80V;BkUJ8@bU*i:2Cls1cTLZdl.r5YM9U$WZb*bj^c/@a%]ioirlM/]S\I0F%k=(#$La'2),Wr*s2&Nl4>en^jh7%%-'&@5cXh`8^LQ<M(S!po`$[:j7$B(]"Q\Hs'8@mp\8^(>K)C7`]-6%ij.TOQ]!XV)unN3jo7AF^1t@H/!+H"Ib80(A""?YEO]7%%9J+.nSJtbkT&OGnj"gYaM#VEsD:Z<@d#-au>+,eY.OKfZWX4Z7>kk=mh]R5sOZl!Tj0IODdguYn]:t4"g4N[A\"<1l>O6Z@+5<oj%d-?2Q&aM,)6QI\7;b%B#9j<[65]l^S_k.m#ghjdVrd.[mBf07QH`'d1F9aWi=<j>0@BV]/)3;:&2'^Q#H,#EIVCBP1/QNHO=ZOEu%C\.=)l^q@YNM5cXoF!=3H9:rN_MR6da\M4Dk$.h>,Qt]t=$"9(>5j:.Q7&<*%6(Z$MW8trF^AjerJl%VGLYo'*qLiV!,CTBgtbkY%O5Bmd=0jo2.a@p+4_Mm(X,R;o>B[]Mi\0/f!M6k[XLAjK&q'G._a9c?f@=6"GG%lO^@s)4^0XmuCI5j'K8VA4rN*K#JLI-WW.BV.%ENs5]oo(DC8]5Kt7#0a]\_d4`,.i,JA]MCuMmqTY5-lrVem;R!DqSbI$nP'e>+D+Zi\)?0@W1?mh--fN;S\o1*dA7IrZZ$1oW8]n%GSWdFg?\GNfiM?%+U@2"!A&f*Z1@>,)<[RalPH/0dZ!"]p1s$;WP.W1&Obo-]>KLpO9!G-eeqV%-'5?-mQ^Brh?T[D6;)_4iB5d#%.ojXW44sh:aET"X/JbnFD(W>0a)0\_6[MDJM@>pS?E6"NEh<;*Q9(\W44-I3>$T2S$I=V@CZ0t8Ud\85&gF^qQ2-=1&Y5.1$Y7Y2%o<m/O^GgiM3$h2-4lbCL!B$$lXgblkR3>[:G,_3nXg^ISkT=rBP=9bU/ciBlOM6KYieXjI8S=K@`hT[Ra!lS940R=<ViJf-H.6\=%_)Ib35?aWX@I,%5Wm+RPUNh?sqOW[W5$$ef_/9N2e]"p>?Iuu5s$VpQqpKApr#;f(BUP3aho>;Tl%+9(UX\8_"$/<>mD4$TjWaOr%-7j,.@*XYX]3)(kgEU0I/h'QgZmuu5h>rr2eU*<)AJI@M8d6#klNLU#'JU[?..bl$[0IC3Z`"Abb(*qA@EZfd7WB%;\_?:;d*ZW+%\C4*0_ED<uK?=OB9FN_um7*&O:,cXH'tOu&7;pFWp9bL7nn=G7kH39ndW\fpqt&%n;%96s(C'_3/],;W'$k^-<?he*br0A+<HjX$%80RVO^jbZ?Et+Ffl)#>(=$t!]Wm81f0`AW:mK]?(=,Xj,(97&SgM0(4*(0q\jt1-Kl1t@fZQ9WOQ%Bp.;B<M$:DVQ69"kNIrB]Pt%/Ee]S#1:mO8!bBo9>\%Ofd&25Ou6-7UB_NM[9k,b$7X>]TK"CiqSPIT3(oaTf;$S!E#ZEAk6OuNmAKam_'QGsoA)F)%%%mQ44Rr,%06.<pXeaGhfAPa`0UFO2fs>McGO7CnCk4,8R_6h6rB<EURns$Y$ujM+^mYp1^*"@-b+O)-L.Hp=n-I.Zf>!piL4NR5ebc;%X7hQ(%S`drqB3JORfA2_YPPTcENK[Q/XnL0b^cAIp;`b->WSVOBo%pU);lXc&9sa+lL$pP_dJD0arO(5.St0]+h"X^OhB_V5Zit6-$nX$Y%/'7^,eAAkB'*IZE^tfBDO(=+[.8jLb6W$8fME:E`UARH@g"(k`YcS;);Wj&E1>SL<Zj9t5cdB[lA3n_0ZENJs0;:?A96.=cEY]`k%=Ejh;BT;Nn7EZ1ZPdaaKWb@fF\75.,_iNeP%>rL!:A#@X)3W`@[r+TNet=Z:?mfq15JBPZ&Gfc)[R>HuCfBu.(i9]nid@M@<l:jK%fA`k0nMPOB[s&K@G(X[-`hrR<6k80""ClWNZf:DUV3bqq5I&eY%K4CRgq8$[8\)gXji,K*Sr2D>D=,r4l9+k'Hm9/&e]m\lU%Dr8%J*p"&Y#e87de/@d<*<Hj2*Oq0lHX]j3B)/N8>d4^51`^(7lPU+l(\`LT&-cP`LiF%eC*;U.CC]I.T10_3^]@f;oSQ>>$'r06K^t5%g?.qSL0Cf\bIB:@DUt,G.P:8$._WDhV4GY10p1mG2V+Ml9C8LfXaRgn@I:/pc;n+-g1@g9G9`Aj.bEjKp&+ZE]T>(AX;,ki\=irC%khnKB/[]]rYa\h)QEAZr9D/caAKe.F>'bSH;tK\.7V]Y=W8l7e`M%!=Vtd@o*P'@W@;ORX1On0\-.6<ph:2C.8X\>#.esE_F'WQc%fppoEJ=kR*l#l^2`.r?Zm;uC@Q^taC[4gXK1Q#-J:[hum9&9?/aZqA[ZSKA8YtMROI;r[GWubA-M]:EM=dK\q;6=teedQ?dTl^8/%ETV&$O2]gZJ'u(Jg/;=R&&ujc=JIt,NT](kE2.3Jg[=^qoa.u<37_I&EuQXKgV'7L(KXtN[?*k;l06B\,Mgs"[R-G5Y&C+._)Mp@%FK4oPRVAe&-UE_aQ+**NcphX_mCGue1173;orGI5h74":C$#4Y.@raK9sn"D:$95k=JI6bF/2[]$DXWT\]fJ`7Y)kXb?h4*G4&"i%-eRX15:^IB=tb6-*8G4SB.oD@2=!/8*(d3[@?&!C*\@+:\C%)B_Xt>-F6GNN8A!,iVqZnt=JIsI8lNG1DH*+??<h>P*!J5]<N58?%['*VpWr'O<+cRDhC#.2r6Q3XePU`g,F15!`MpUhabkgZlmGfCpdHt;lA`uZtQW%$Ve+2=-`?R3<o8.R5DJQ50bqAXJFm&:Q9<-\=%2gV]TFO(l=?I&=8C?jL=NS>lNQoNZdJopMTb7&91GO!40\:1[a)a/)gG![-BV"_4QmA8aGC:B,LftmDYE23<q_a1-)R0md&I(-iU%2@=Qr2LBU\S3M]b>*:M7#<THCKB;@hf>iTqTLM5b>X#656cXM@WBI]-)Ej=605hUm)D*WAhQf12dV'il+7%2"q*ShjJ#:L%$6bDc%):Es+BecP`i3B8VMu)U/qIh;h_%.&XO.hQAC7CXcYXT/"Vt*-11l=EXQdlIhlDjSo2lP,!k@f.02>XE"qh/S/?7;k]dHX\LgMIY,%Mm_&,k=7*rf^)LCUW;\gmt^Ja(,WVZn]s$BXm7:akbl,PCGc!547u&]`T-Hjj^#'A30hWV\(fR!Eka(d>37V8Z0+Vq\bmgJ)r8`&%QeY%r-g/);a5#u)dn8oL8o`ah$>YRcf$Q'-Rd4nA85H?pn*E<7HRW<s.A_"]5oN2'XSg6;`qlU@?N-a[DI+;&Gc,StnXkjXRGOa1%Vj!kM<9\h-Pa1C;n#8)f.mL?hp%>@+r3eKo6F3B;_Obq$)%PsU:Pj3k?99dgkC(hMc+8#$V(1P?^Oj5RPR^GI[BQQSl/6^A+AW[8%JEKAc0_O0-Hb1gL^[.PH4aiR?MP!&h;qHc7?'<JcVc+aWhe&_VXi!ib;dHt*I:n2)Y,*D*Q_0MaT(d$#*U3,=[8*??"V%*l8XJnh%Rpf)'Uu*tOSn"l%q2t=(-l9eX5*9`[c24`CJ#)tBRg%\J(LqZdFT:N@.HKkX>C*e]<PtDG8WUld*V/j-"(TG*m->h@Wu9T>;@Z'c%5#9@UfnW2Pdkc:Lf@4+T`a2j>dAKkQH2D_j^AbH')uNZbBV)E1okqW#VK>U3F7XasVTOE:PM,KIF>oi7mVHaeVgcmgoGX\dD=:9i%;f2LD1sDEZr[[@2rSlPrf;\8H\@ce'4?h,*)stl8q-p&J4egYGA%eEK>dO!,Xh_<?cT*4RYg_9idp'B>>d8=`BjMJ9Z?0#Ob5tA;%'FWT\@^2$L?\I%Vg?c5FF9?lbde8?[Vq!e:NUM9mGNY^V\97IVma,^oJId&!6ei\YY&A*9cT7VtY<U?c"AY5ufi^?*.-o0C1:M_<%bak<b6dNE+c14?sO+m40WYO<fG't+^kZ$Y$kA(cD0rJ0REaJMUdO5sPa7[>b=JJY(NG^E(SpC?YG';SV[*r;`loL-+Sjoh&mHW_>%PrH;1n=XtT,;uQmbp:_TZ^m^93?-[#iO4h;_4(SRi@_W;mJ<,n8Rf"I"FhkoN=t+lZr-H8?JS(Z/=pHhiJh#2^TPEm7=-9o]nnRL%,`cADrRFEgl'3RG4Sd"lHmQ?DC)Bul2-,^jh*J\oo-^mbC("MB*uNi?O[jLD5N&Hch%gn&=&04BrhIViA(Hq?/U?SI??/5I)-rV(%_'29a;4a?pRomY/&;o4%R;HC,d$?oN&eu'<^Se!Yj9*O"gZsd&#*,8RPgFKQO@$Un]hK8Yg:fOtT<i8*;8"Hi7_UNF#DI(hEr!G]%:#dpD^d=AHb%^RSFP*>?Tf,,:a6j4`",e3'MKgf85&-oNE&.=lQJ@^JUH@QO$0fl9H&6u(I*+c`d.L]odXP^KSU@[3&YD1)Hm^@e%Ht9DH)klkC._7kGoE-'0E"MshJ'^htSYmNk0D%i(as$>SoYXcQ*T?;CON7cAL=ISW<DJ2mMVWoQIJ^SrbulZ+;,.Va/Eom#\rM@;%BY<B<&""HWVQhF[<=6T)UW[%UGu[YKeYd_rQeJ#8SC'^sM=`LO.-!"iKdrTFHW8>h/E+`*WOuR&L%^:E"EZa$@(7FIf)XTkmk0#d%.4XanWMGPM^sG"$rIYqS9;Hugo*fJ]3dPK3UNVfkh.Y-<[=`J3II`XoLJ:;,W+P:mJslS2/Ch>(^S;$u#c*cIGK:c_oK`rKoBlKZ%T<0a:(_E^3Rfm1A_e3[#9<EE#A%^i@1A,Pe.sp]=<Yel(0I(r+:2]gJh6ZYmA'@5:kHXiV58=Smm7,InnRi>J]u)-d-Nu-G6/cQI%\c4+?74+9hi'Rd-+0>&jLu$Ar0KuZMoMi4taH/"dcU-jK@VF)`[po%hA<=jHJugYm\eJX\P%`a$,l+f.d;rR"l4IY`(tDVFCgmaY%)8-f\9AOHW<[CZ.SX<m8pN9]CcHP[oYb#+c64R1$7:b)N6-*5Zc9uj_4`T\M;Rj"+Jii'rF($Dd[nG0^F/;OB(m>3_o5c8,Ya?J>%o8=;&@+#KM5La2na,A&=-Ir+F/q^/JF;_YFmt<I+?\5`QX6a]kqeBRW)dq8,1W[%jbg"'[k0n"]@Z3aaGT<Tina1C&Q,;'=W"SZ*%a0'8Q[AC@AmlTB_50BN-StL:HF_3"!O,4'aTWJ1rqOF"9<:8Z_b5O)TnpC]hhff]IF_5dr?nCXQG5Do)Z1F?B*C^;V9;l#2JkV5V%?AmR#7%CCgdK0M4Ju`fkO36*7#o.g8O[Qe<2dH.gSt^NMh2'`:a>5)7R`nDK6#OP)cLrmWPT.o&rqtFQ/Pn%>Dnm%9nCTGhh.CC=%oarMnIs-6PLY(Q*fI9U_HIHjKJ9TU>T?-Cp7KF(Fs(=:)!f.n)DfICCHn^k[OZpianFNa4E\tOtCH"&GT"Inp;jkGr\fZfF>K2SD%LA9ifnSI*2LGD4@4WLaO76CiYU_\n:pEOHE&bdEk/)XPgMg7_gCX4Nj+\pb,k`S!51,Tdo64t//ptCYqoD1h[_B-[F7[%PZ?r.tR%E(CaWj:urXbV7/jT"92mIMb,Q7%=743b*Y4j+K@im-d4jQ`[LtjI]A)(i4;Yc9nJB+0S.p*VU0/(IX3G>RVl'?F/gQf7\59FE"%l%CJ&NJSFh3+[(:OF:AL!tpF&KLe,;+:mgg-hF#8iBWAZEjkTHPU&e:B8pW585k/sX\Adh>B^$hKr8!B:aMtQmcpmc;DHf%'d`Jd9E%I(o/%jdl.!!@?1ASF5JZD+"OMnCW3IHoHWY!4;MJ3p[L63?0g)L"N\e*UcBT?lm0c\2>3Ze]gD'drWB(/:8rL/Ft`Db_">u7MW)O%7U2Ps8%!d9-*/E3RI;?Z<EPY&DiL!J)"CY*/6_gXl!tJHH/)La;JeVXX!N"MDf@iI6hMdF9q9_>30@&E2U#:r/B?sK,0%hs.a*i,%M71+0D4ftRqd%@Fo<D@6>R^e#q>@CXV]4uhB@/*`)IFmB?Y>W`lVInK!?.f^^ie&fI2WQ&.l#8XBj;Mn?qFU/N31Kh/mq]iA\glN%1oMlhUX:(o_lb+JAOC1=?qUgddd#JjNskIc'9N1lh%-2A2R&c43[D9PZ9NUlNqsUJRp;mjO.LT3ELh/J?Xt[;@#IlT6>Ylt5B<od%ie^sf$''oNqE,/b9jIaW6\m^KY);^^2g"FIVIapnkpfh"=,sqT$^D0%ZAH)+p+l((LEJJ7aStmU45-0a@7h35GrIU7C7'SFKUVV.%[<Uk,Vk.n;5gW[SLH9J;I:,3X2]a7H-SU$]UW'7h\PS+ScG@H2^$)'tX&B6XI$t(B2=^IEIS[hp^C/r,i)o$EB1&UKd_66\$U\C-%=P8N(]gu(I8tX$Q<h2:Aa=IPgN'I3$%#Dg+G7]nnKEpe\]l8ViO[Ed!kd`B4_oPd"_p=&LF5]^qpKIH,_j/H-?:;j]^`mm][`A@F%!Lp"BD&As=BI+>[NY5;<!X(8poaRFF&M;i<3'XBYB^$#o(Qn++W'Z`OojZ.$VIUlg=;>Oq)99l.>!3T_^8o?%Fng-kYV$5%iJCbK%(9\i.9ds=Q0DhUmhp.'<n`3Lom5euc&pLL0*XgW4jr]*3lGF^"*_Nq)EL=4EG(=KFGJb+qV+8mDW7;igC]G-hO,tcDl`&QG9FUqB%7"LQ*8XqAMAKeqig^VtblaA#.`5%@pUeBZT@D?b9](f`"U0)g$EA<a!5^$`r+PCcS`uj&qbN`SOqXpakZ"LKd.d%`uAWf?G85CRf%DD<o!:<47j.u-mT7+Inq-_:r):(CQO#+_583*m)cctGZKSZm0[X;nh8$p$+IE1@oZkR>%YCr)fckb9ls`,*80Ep05Rke,T#UZ]um%B@,%/D#>9akR9N5j@SFZ7;'upYmcsdkM;4>OnRqU"o.B;+M06g"7&$<QXW@/Ti6S%DBH<]NH;[hT]D0pO1ZA([cFiFPqaJr-Z_ZB%,nFAC].J:q9I&JPkEYkLD#/@EH!IMN,eV4sGX6+m&X<gZLD;R.J'LTDbdlBdo1,t'5l+u4ROIQ$XN\^NOfO9j[CpbSYXrn'kaI8^%Aj;7m4bV*&pS,-K:sU?*AruRCCNH5H6j>Sn]F'C:2shPfi3&Q#a_o"6"UX\m1"gF-LiNHF9%eGqd\(-[pfg$N[3ZqB?o,kpD?t9'%g^L;E>Hg#WQ'TaL+JIcqR?-l[f!Fp'-peP.ag=,%3&R'7JLRGsH$iI<N'dco0F"LE7!_")P*!JI2fOS=mZKM&ZAiNHHZs[mOd[%L%ZO'cKZ1>]3hB6lKLciD,T:n#8,4bLkQ<.H8hgu]P$;XBsKdOY2:$D\*i4#KT^`T10OlZW9@sNHSp;"_pisXWc0'9eWOiQXC?k-WM%Z6LR+Z2k7iEVi1PjNI$Mo:ZCLn<AH3.LTUs(]e+KdVjlXQo[uRhS:d-?IH1-M.Ag[aI\6"bO5.8^ASp:Y->siQ]'3++Vc,*#!%#u%]&eLsq0aX3faHF;)oL@pD%=YeE,B6s!cQ(TDf^*s.QeG^FJXM_;7tbd6g6:p$qc`lTo`Zume!W?7(?[!\TWP`lBV=!k_L6d#`FZQ%b*)([hEib0*0B;%:uC,,YBq"lPs844pp4Gu]C3EUPRBKP?99oqP@<_r.Vpgm=FC8aj9B:gn;Jdq%\f*QYs5jo'(:^(,*p.LSmmUn%cor_Aa8YE8(Z("i*:p>m!"8T#b*X_63&Ak/-0I\C^eP=RObr97mYI5=5=J"OS27e:F_\FBN6b/f`dcTereLu[,`NJ"EI$ndDsW:=%3jY!;$1d+E%273-fGd!u'C,%9m>W-KJY?eGnD,,Te'MPnA>7@J,&(`N7V"1Z:%`(nNY%?+M\2(C`66I7O3#73cJ^Yi@V;Y3SB+tK%3M3S#F0#T,TuJjRpHpl1%$QmbnnS4;6[aU$4]gq2Kc)+X1rd(7qsMb_YW]\)L,L-?5;>>;bb=ng[k8(]+2b2g0sUrfk1'oAZABED%F`HtB,6aEE5":4]ibT/<YS.cRol>)?r;*keJW?8lYG2.MS/I!N?%Wq87a?e\qI2Q3DUS?"j.8IN0->'CO%grCNh3'0c\NOST'1R3%pcDHqabLPrA0E18deRha:B[4Z5$Z$D-uNcp+<O@kaXBC_-^5-3pV?Y^i[13,(Qu`tiI&.K?S$"rBD\tlJ]rG1i!/NoO1cnRWflDq%Q8/)$6=n:BA0:;h(1Y<5cjUJ/6=*@&S0563m0k%bKpU<LFe/j3-7B?kl5;\(T%(W1:m`be7@Kon4GTL/*4,r7erFAs`&AJ0@T^>p%7O+#_l\cp@f4,g.bN"n,F+[4^M8(onmb9BTKCr@1f&XC1f]f3jep&o_CW"MXFubu>J4VnVcBa=G]om\r'Z7^hluF:ZGSrOYL7b=X%]$:)WmmuA&VkG\3T%42-le>EmYb<*&OGq]Se7n+I`c2UcH]f8G^F,G3qKjt8WH[55a@MSoQ7%iX$M@(<,8KM^59gnYR7'LoB!2Y-%#26Pi0/S.d"=3!Re6&3!]Jnu'K'4#ga3N=W/ZN64A@SmgoE;#-M6g<S*Bi7F`c^#@T*7B7<&dr/=Yec>8VJ,:Y8f#,0)Q-P8Z'AP%*>&D%,KEQ5,A3r=7*d/6rNk[)W+$qdXIp!],sHT58.7ZohRP-gJA2#XKh"='NFM69DujY9!&F8K(MM]c@)H7H%iHG$\.G*gN_+%A%Q>iQnk=&CB,?%oNhWs+\Am^mP-[g>%6J)G^]a*(FfF-bNO+?rBCXFr91M1Cdj3JTLMLLXXis"G'WJ1:N3OMgIrJ_VLTA]t5kGa1,%]Res8Y[fJr]`4p'\Z8Mi9h+HN:U/)*ioId*NojdWI\eFFm3F'9=SCgHFm!@?ioR/rA@KeSbirbBL7L5P(R=@\YT2@F\PtYd;.H&j%7>5C,4[^U.V=a7HnPX5%;76Ef^@8eA[FBWC-#13':5)/cf>Z]Ke"IY&qT$J(mtGpe$J9K#ZJ3"PCXd\Qhu-;pL0aX3GPN60BJlO3%D.t<e5/-d)l-MmuGLOQ#(j_OC1@1kf]<a]$U:;h>k/fQRM>-T[X5*5ec+Bl4XQ7n$H7DCDSY*qunK;]hZYP@XnM)Z-nFfc"2k`^[%NX'L5mB^1rB#"6_jo#eAO]$Pi4]^ss^f,4%,lA^aXh^^#6hai>VtLP3USWJ1.k&t-hG&%I0)bQgg/$u\\KK>>N5D.09oY>Gksfu;%97q.&na,S"\B<$FL"tT7g^ognKoU*@]l/NU)i6AbTX3-;:-jk\cU_<:&%IH>^:[!T#MNH74Gbf=n-eG"O)JL\F@#?6OE$X)flTN/%5[Y:DXDGJ@>e7c7_[N#/(DINVUaM^-(R.RJnhSm7\ff9i9K\ds1ho2$Cq?:!,f?,`&hf_lclU0JACC^adfckfNg!3#V('Zc$XXbh%24H4Cm<-k1FQ#5)PK]n^H-Xs-flY*NHRG.4E)h"]Cq?:].,bIF:*Q/[W(Y!Bon9X8Jo^)WDTitSRkBMGcC'b-bGGZIMQQAC0Uj[C%QS'CnAB\l$;)'t62Ve@l9dlJ`.$ngBN5`l8$d,:Rafua/RkDeQo]K89T1p,tE4kol9HorYBXNNgPnVE>o2[P,aEnp^RkBNBTdq?4%B@D\Oi_(d6o?2sCFMWE;-osiAVA#'MR$-Er>bbo["V"!^K.+ql`D2EW!0[$RQ#9t":8Tkp`/%"sj*g^/9,p4CBoSl74q6!W?L)&5%pXK_W/gb[Ih+#1sF[=SI4?O(cfiDKY&lB(P(N*V9Hor1[1PZ4k7(X"kF<BJ*D;\1dW8$D<>sTF^V7tb+fVpji*32`f_i1R',4K-]%f.`m>OZI!%k.Db_T&1dXhgOPrJq`!Gjh9kq`1/\D?6$Bq-Dj?Uo:!9ZS;?^ffA)M@`Lr.W@OBMti:QB@Y.54P3(#@1Mk?j\Em<F%%&]G?c\I4?EqCfE!10:ITR_-:t^k48N)e$&XbR;9nm%^.n[6MJiMt[-\:?tB\XS`tuQY/O/08?eHEaU(sd,)Y`pKAfda1`a15BQ@t%J#CH)$gPSfEQ$*o,BqTGf\RB^',ffLN5`o42f*aT5ism$N\Y5+GpYT"(E7,&#=J*f'>#H3VaEt^k_T!F]:k&*5FL>(,kle)*Wpf1%fa&<;o5Oh)+f#m7_&>T;R.UkDjb<-h_Kn\7^qO!fKcQ[4*95Ih;H`eJJh_.NpF"PkWFbo=C]DlgXsM%_r;'?MFldOlIFl6/)_,'J%V9FV'.hn7]9nLOHmX'ps=orKAIg>Wm4nLZ/QHV=^^LH*GOjPp_/gbjriPjkq0YHm$15mXYQ`ZtJp[HDI`Gs*.\!G*@S\rr5r[@lT%T$_GVp@p:C:W/QmiV':'J-7,QN3U5-[TC3\!\>IV@>"pa#WLNBk#YlL/VZSlPIn;Mcjb3hXRU:K\.^V>"7N`=1@ljRL:`Rcar<C6%.-.8<EQ-:K_d2@!r%[b0in\R?#d;IE=?Fq?GB$D9hnJt/40]/hBpPY$S7iL!Yu[G'oGbcU#NI2_b#?46Org(f=Gr;g0ei3]B=EqC%c5!<+<\u=QcP<El]YmuO$^iNc:TXL8GqRkfcBZ<.\+aaBM03*qBZ'VoR//bn@/e_GoE5pHf*]7d/OBl$9ObRW.nu_D=E#0W<0GsV%Gjp`af,*%YLWVeiC_u`UmD2[,Q$pZ6ar!]D=2]<TN*lD5M0@hUIV$Tj[$&O#lt%/M)#Bs6d&G)CVI9qOB=csbCB^Ap34fXkdp@_1%deu,d%@cB]b_GSmF&de[*;G>KY]5]#lGM8mY'YQa\dPa)\^`ENQt"X*0l+eA.IZOVr[jdOCJ!SV\qs_e#[N<K]-DKZX"1k&qI)1a%4[t!TDPs9%AeJgDUpjuD@s6`iIVbhr?a>$GelO--I9H6YSoI:[lbaS:k"/;5FQIVbD%o"`HOnkqZ=4(%_lZYXL??BrI\*k(8U/V)%Re#m]F)KC=LFqG-4XWnh-7\WUO6lOHI(=`F7q\NTcH:Kp04BjSL8LgodTu1;E$gOoS!qp!rhtP4_c]&?h_SWb8:C;Qo0O(]F'"f\%i,p?Q;5n"t7j3j1dkdn/b!T"#M):5M,2mL@dac2Rh-PE=$uL*hQ8(VZaH\t!0,rI*_-CZKSaOHd.]C`_RcaTdh(PCIW*6NQoAgi8%`-h+;od`eJLS(cIW*r"b)UmRSjf@Em2<l9Bn(9IR.5H*mT@)okLrau:79(g%Sa\)NRHS*rS"uX#^j=@EBd/lTPgJ$^GZUsND&J5@%JBhZr#2N`([o79*@eMHsM4,OM<f'#$-a':MnqD,eDJ"_G8\-J_]EH40#oS`#@CB2Ga@]YBFg$PC8djCIkrYe%(-`8=9.P+&%utSd%T(KNqG@5Vbb"MZ6])fOs&jpajr4ndFj^g=/<dNJhrk5RCf/hhD9QKaV,[?1HoPq5mA$FQX]lAX.*fQBQ/u,nm`*Ki):LoaRH?ji7%pfMeSk;HcZ+ICs4ca>)YlGX0Fdcb@X(>s]F46,E&`m,A>jL(3sGA5$RO*N[DaSfm9ccUJ(R,_qKC1VELo!:@lLCc32i2]e3K!O[r%FYi)e=+IB.U[WPZL1]#WMlM/.D?%"!rW$Ga4[Mr<)494aQ<T0nO-N8uXsC`!7pBju,a):p^A29/*386'k8_"j186A<ZeN@C3J_+'%Mj@7J^iS.-5_4Buji!hirRe*>"7NneUL2[1SklCC0Ms2U1N[*]Pnq-?d!SjVI^*<2)k,e30K(VOB,HS%lHBj=/9Kuo'T>I+V"LPl%HWGA]bQ<`=*I@0H)`A)N/!]'RJ,uQ_%$:_Wm6c+.T^R?j+gV1/jo@0]+6io]<AE9gH3*>@6Y$4PW4K\_^rST8#A*uHSm"JS.L_RG%(kU)J*5JKmX&*mHIA:,QNuU(d0Q%A.W/l=R&Nm(U0'+&B7^aHnjU9=(S`lnt"/6,9\s+i[?YPI=.A'CsrM<0_BQS@G)t;inb/^8r%J+li)j>$#Nhn>7mq"lR3\Wea$WdpY?"^\3#ChMIk6"`QA\,(rjQqcRVW8LnYL<eie\^tbQZ_9juf.V5Z'0$rR^"71mI7j%uoo%,,%S&!]RjBfUkc\@<uY@"C/b-CF.F0QAmap?qdOm_nsLqM7kOcEkU44jkSf5J/mY#4Z\o5fTZ<^6UZPu7#CM]Q'_rKTb*lPFuMhq0l<%Y^?>C#F(V&]mbTWW(uJ]^Z^T[''US5S426!(G3>U)Y^-O%=>9coL.lKa%!epca-'>moI1X:8%15lPI6W.P[WDr<?nU9]BBnkZe"?%]8nWC?GGIeiu@Yt5Ar.Q>Q$l`C*!.W^[UW$[$AbglPI7-6M9"+p\I=UViZ>ePKFLG^X^Z&pH%TQIaRI<3:BZ&?GG\5f:a(]6f.,F%Q3AV:-B+Ae!0n!i*f9Z;&%/?_rSl$"3;<80N#$Z=hh_$s%=*h$k^@j=k<0*[qMgcbE=qJ^qj*%JmC&!oY@$qA<[WCS&]<#aonu#[%_nDCL]R0UIPcMU<BJF!FIelqA]mbV,fHfnXMn[_[1AC;Jg8#>T5/*-idrE(Q$/FjeCC0^2LHE2Cs'EHk=7Lu[QkAcZMb:Ffqkei(%q"OUgZBoX5hmcg'n]Vt]]lL3$rM%OV+gZX!Hi72c#A)kSEZa3.=h#XLnVnL4o%iRihL0ckZZ%/_>QrpK2ek*1b=N]N?9aJfp>,"(%>+*1>IQX#Mpf9VZa2YmG07'B,Z!\quY@"Zkc7h/]S>Y:LrSkjL]bp@ulSl+V3Rk`k@60M,l8PEmK>m%YrHtNfO*n-<oW<S!F:?XF%9kPD"+Z=:/*oUG?kZduifOOFb@O#ga'-`<Dh<R"O%5Yl7I\DuO$TPDtCBrY\(MCMEq"OVR:C\3^ohQ++?GDI(YjfbcbmSq]5+KD@%ZXKZ=Mj9esZjX)D"WtGJhOCrEZ8i&:CAVIB5b+%4/,#Rbe]"DA!g4ngUd.qXRRMs,W62`)kcn1TF>cn[>IiVE?=('hT.+h#;^G<E%o;QmKcVLR3<;LKP2MH^TeD.se7k2.M-bm1&nSKq^Xe&iPT%?22;Ru]Q-^F]_Y=OrW?[:#rPudiKgAYY:9*`(!O4(krgUhR_W-q3L%LT2qsn('.gMseWTF=Hl$dcJCCO7[ep1*bU+?-Gt9cVqm4_o(#ooQ[D0UaPhM:3ntFr9AAbj]n^1f37S>aN_mr](>N,A\)sF/=H^>%4j<;`>HYa/*:Fm#Dd/S&2t*`"g%<h:N4%@fUef:EpLZWRdo01gmO0mIGY.@=p?_>@T<$Do!`&qmr@G@aUF/A@P'WEbVt-,Eo<^>Q%HNiV).o;!T\rcj<DAUbn%oUT)CJD;?P2.@m;XbifTF*B]rG+h(FSpMZ:MUL4S^,XRU-$r?O_XJhMehV5Q;f="(So4.bFZ(hI.Ys[%IP@?JF#Cqjg\<BSY$4E*;QfSXU,e(FV"1AX8?VcPElYR6T<[Jm+4$4#:RNjphC8rYSUI#RT4Zg&VWQKj[+',6mLh<n9<">BPtN^R%Df$Y60=CRjl3PjVO79ttC,rK3VNq^qG#A_*dkK58\&ET\?D"2JU>DE&(Q.cu,$h9OF#&dAEGP4ieKMl1Pa+TD^7D[nV>']npicI-%gj1FD3L(n/X#'HN:QdKd*;PF`0uLa(W@bn)47fhm\%1rr+tl$9%'Ymt`h1H@kCLXQ!%lPJ^O1Lb;GQ,7nmAMODLVW[msEC_4e$S8%_jkomO:gseld1OYW&dj^kDtMDmK9;)F0Wh/m,m(.@!fTMq1E21H11e:9/i[%pA+iA5q<3UgYOP8\])OR[s,0/n"g2Tb3g%=T':O^%^AI'u*h:C6Vn./9JtFDp$Vgkd`'d#YT2_,\ciR>&[0"`&W!Y-'V?[kbUgkP7a`.e8b=cC*KqB0Wg'(*=grZ[e4$<C>iSAQ?rq+o$%5$`gGZ<pMtqI!IAfFr2b#mbJ)/=1D-[Fpi>k1iC:XfVI5<$kVDgK2-Xa-D"TI-s/%\]T<*OSY0>O_[tF_tcI]QYgS@[cV>fV;9br%'_<h`>ZW]DhfEA6[$:QhA9N-?Q2/G[1h3`TWoa`&.^I[tnM6hP$'8m[iTEXiZ2O9Z,X3C;c6HVdDe3\Vk+3ZZ%=;/j_7-Ge^V+BX%$:`aq;c;X2RD.YC<K=ciGq8E'%kb=S_u+eaiCN(nX"$5X8?%Z8a8+J<jlu7rc,T>MAIuPL(+e!>XZanC'gIZ"EM6f8>=,9#U[lkV%dk2XP4l)?OVnkS=YEO"?X/se6$Y,LZK-YBY>8d3:Q2.mj`@V<.oI5a&pIFiJ#0-5-pF[s(o,Famjmpo0jlnI9P?CnVII*ENhY*ZR%[(813bEl9lq>DgXHGK0tCl3i[n,>%[Cl2I[]Pq6R_.hs;Y8AmE;Z(s.RQnC*0YR:g6LG`J!F<9^SsliA2H%`C?[&GAm@](>pmOWh%rL,2t&=S!$L`CK\5\75FeSirXf,_Z3L<.MJiTF^3Zf]OQDLqaUD7R`p-/MScd?`Cd/Clt^b\a3E$/s9N>U"stJCh??S#]ohZ8A"M%?WpSX`\Qb_nm5.+=5CMOg@(e#5.Z8FbYFdN,pE>8Q$7M'M.g_4,B5:3\]#$LEi8^)R=FmCeH8CkTD(&uYqO!s*!qk=$f;."kPZ5=%*A'82S#6STPkdS2;A`_^7PuUAS)Bq;.5[oj'mXH&,%Ce^>;KB04.E.HkC,#Xin)\2E2V9HosSZ(if9AJNbd8>=`p5&k0!YETq1'q%N%NDB42tHtn8pL86i\aDXjTgU]!etMr`uInDS;UaZg^pSX4Ynt7`CrZI4a=E:%,1_]RreJeN0$>h$_um%)?"743R,7"`cCifIX^9%p<05tAnJJPb27CnC9dDu5;,4UQ$6!go%&"KQS7`Te[q)E6S:'65qCKr):q#\7i2N?#A_i&;j]Gshro0k]NDrEaIci=m]>"+c=d.C%-hUnsn!kG`X4=asq;uhbK8:DP@f9,S9=O>IBM@L*'AB2dgu%[@V3K6-rN89VmcCS$^!G0kiKAGk4(*DMET:[ijmrP1+CWV,V/>[Z%*VE6S>U2)jl7?FkjkpiW?)nc*1RVTfbDGjV<("iuWuJAi[_019;n@T^[^XjQoB.FmHYB3*9&Wt1NIgX,nlTf_X6gV`]KW<i/Sca"%Ml83F\!?D3hi>ObWc"F&[Yjb#ChN'Smco/"[F;[h4>-"pkE"NP%KH[d9^1qGpQWa.2g%>dP$ZV^&kM-,0:0t4rr,ahNf39m>/9mL%HT+Z()l<1I]GWQu&I/da-LT7$@'i=JW1aG*>g7Ij--*j"Og;]DYu!mS;kn,DbIt=3:NcO7eEGQd\C$fCq&MWK!TdHF/!Q<i/\>i4%/<r:-.hA[>#L/7q`oY_k'Y0JAl)e4"rBWp:0b_P?Fs"a<O0;pCa&4_\@^5D_f=WVFc+,I#!)PnWY`GR6!+UWd4LT-#UgjfmFL],"%m27*=,_!%=n[MC*C71Z04<Yot\4:VnCA;<KB<a2AH43r/<lS/*1$8!#4QarK_m`<%^<%<G0kR\qN0Z^sZTD(iU3`3cp+mVT?Xf"@%S1uD>6'=)PO7cXkM=el8K`o]$hq=sD@*_(ScGn>r?F&Y%\O(%&W>s<Xo*Y^J[<u%>6Po1k]t8];Yh['FfGT[:6'8"nZF0Vgp%Td`%]LgpCa'V(Q@o9QmHGgU]cKh]kJX9s%1MM<XP,)up=ZAUu]!%??r@*61qBo4q]f#M6)O[S,[EV=pM$SUC'Zb]uRiV!*b'/'<J(4!m%^8u0Wm]Z'\%F.o6-fatHaGqIBc[!clopb2C)c^2c(UdB54s!AMe#,t2D8#`bdtY\.I7D0%ee:MD`\8BBl>r3gG]S(FlR;hgA@6_o%I)d9!GdH$VQ;Yd\3aVD!P_0-$&c3`_j[=E>5@Jg83`/[8[IDOV40D`+`V[__dSS/Jo8C?c,>Mtc0n97">j9LjJju%h4@mLHd'\,l%=$X!/WH>/uX8t-!9kFdrQ\JO4/Npi9+[AXOICF^TAX:;B;l_m1*2hqkhCKFHI!erY;5etYIMl,dJ@\JQ*HsBtr%`05jm#e?F0#,-%H\1BUY@2m:5IIqcr]cr\L7R#=]K^)FOi%>3F#d0V%`Y`d$53ifTMe#Ec"r6NaM>#Ns&FB7D,6o-r<t*!GmkTN>Bp`7U;es^]YXj%%+%En4A9#1NEV(qe]Ts5qTu:_7iM*s6-E0]`o[l-X@uT@R4;LH"7N?In4d:2N3,jGhieUZ0iPK0:bAT=!d!%]0H*LJm8kSo'iVFt;%e<[Q60>EMsV9MGW0>H"?R4I)mHM@4Uj6:7CmC^,9mbC#KYAVLL<b_F'Vd.q\.'&X):%R'JrINM^%K;>#q?s^r''VtXgOfnqn<#(<%Vhc98)00`9_u'85+=6p:I:QeU;dX@(EJgE?$bL<UJeQ%MW'ksM:uljUfTF)NrV#mQnZe3#F&'o8oNrrXi4TV>-2qKb2Um6J`lI/f%j("LFgFU@]Nq);S:qfP`Pd;7\0B_n2X]PESmqXXHr-ORn'\#>_HeRp1]"<Ttj9p<)isON&l,$a*r8Q$i/DWe0nU5g9Aa6Ub$'&mL%*HIn#<usRF$^H+7qBqSq7(trMMj80pZZaIa61?#\YhV.'.FqG,o7J54/rNXL_f*^+Zb*8K>D,naWqKn(d:B`Rh]t<g8c6bb-Y2BP%pqK:C6M<hD0,$PK.aL)--Y2CeY5T?uLKNRUKCFQ\7)Sps_@pBgV"_&*5*c?k8U,"(HNRpZqkjRf9_WN_N+G*raL4K;,3_%VZnR*U%Nb@g0?WrqG&r#e3&\:,Q9:2Pgoi=LpMSQ*Hq'fsQl-aW?&$96rXT7M+fqj#J=2eWgB!^i-Th<>=<o"?!f[SEjju2s0>79HSOlfT-%9%pBIpVT\h3F<M&=!r9kML%b5C`pq,,*8MQm`KaSbNeHZXUKY[Bh@01aO9-8!X&:)AdJksV>K[*mY/:=nst,g4hlV;`eQJo3EQ+5%]54a^qJpt>S(acfGQ,,,FidoIqT$J(mtIc\qi;uNo9mkXHg%E:%1cu&@kT`#?%,]>-Ms%Y]q+7_3Ic_nVV.F5ibIN587\R_V'a)^%@=E]ghcmF.T:Ph"60*o0p4QZ'S_c2.][KME.1/]'1D1k)8@T=qn8isC+Q:J$KLLZr*t,OuopMR_72A]r]Qnq`.*+%<p;35gJOin1%+\89>fdqT1dR4TO722sqg!r6B1aU7O,cENmB9"mMR`D$/"j2lGK+DY&-g.f/<N;<7;^?Glf=*@F1=%bSG9M>fT+S;p?;!HW(l@cb%A/4^`<=H$<+d!hT$BZ4Cj<9YGP)/q1EVm!,OiifdaMo&$)$J%r%BLa4mP#n`>E6^&nk`SJfh_SsQKEshDJo[d^'][e4BrW]CRCrp%O=K6f@qds%!eN-;:Pc^R=-8J.%<^u<-Gq=3DBA[!MG)tbeWLVM!V9V&=!>ULAZ1+m)eM\#<>a2fG]fpmpPYW?EXQcqRARQA_JbtA%;S;,h$kgco;5;9nTQPWEQ4%5c+o"/9a<9]'a-QMUW!q\V=ABcY(u\XG/s#+YEV_qF/>iuD[N05`Ydd6)k\TI_V[poMXi':f-ql$^%j7Zp71F%rI%4)sG,805hC++(\Rio]3<$7/_,86COr2Qm%Pge6NHs+ISo?EPiEp"TmPM\*TG)FiE]g(S*b6-SF_P'QEcFo3"Ie#Qf%r<YD/Vu3d)`q";5CJC*mG4iDI4RTj7OX)9:k6*EVa"iXlA;N7>DI-#aj<U>"#N,$D%-XuT:O[m)]%)D).uPs8M'RoA>Kc[%ICD[$%IHK%I[C%BJh=RrESk/H8e:"Ts92bB'H*ADT.&NW-#>='/$i/=uO;/kMYJ1CG8A_.`RGADQi.r_ab1d/"<<or\VDCAG?^qAEie-q3%;ZA0.S-H&:8]5V8GDlX"rXfUAaNkB2Vs[oM[)d;m7]lN&g$pt4W4*0hlMes[7M0G3,nW?A2#kbE0`eLn?Z'amQFM0F=`e[LC&XDR%DlbpS3R<S@i/P'bH-)Y-fNOOmB3ZfhM"@7edrTn,kWh;A\Fi8@,'dZj\`rP9il,ZQfXT:go&fmdL'B0jDpD6CQ1NR$6@<fV8X]U(%rT&V//[0q,g0(=(]Y>mC/#A_@R50'Pj]H0Q)A`bXp2g*rEu`?oeOT=-H,kl_h`@mtnR`.Dc:o(Xd:t+kN<>$M$_I.RcRGplC&Z96%X;`lGokF*lO7PVH3KV"*57:tHqOK)s_5>[J,Q#3:5C%N9..-K#cGUYe0\JEQ%aT*S\=+.mgYdto"Z?7b>N:_"kGUep.Mj!tm@IUs%e_.E0[8+jVN8:P9jQ0J"hk/rgq0f*hR!QlHT&7eXT9m$9UJ=u[c,!=bHYnC),\Xuonu-o0N4E)k@5;)$%\)h(j4XRRinXC`!m.Sk%q5ct7@45#_3pCk!8ejq"qM6EMaj@-3>5&].V4@e(hssL5asj1KgI7iFSXdo8EfL==MHN&#j2tfZH$4Rn?HEACfqn.04G+N4hK$rM%Q?!pJ#.#,PdVC29_K-u(a=oBBIp[+cQfY&r725XtAX6m&^7HkBXgKE&>fhk;lLnkC-:4H4EqL9J/!M$Rq*AY)g%`"b(/ai:OW#Rq%akN(l^tl?8FRo,kNb</L;,j9]EYTa)iC.msbd])$Il7q:AJn'4\#a-.oVYRP*-^]:ok&4nZ'rbqG@gTEq:_ijC:3ZeIs\$CbKj7l%fh8InF8<0%m]NCQC+l^@>*@Z@Y<SG8\m&eE_05!ua,G8Om1K%BPhtcoc^j=LokN_c]&)pplC1k!eo=XG.D;j2NNA,9Q9ORU\9BTa%3P]:;*`blb98<krljZ"n8-h*1(gf4;b>4Chq-0+j7I<S(q_1UF5NeBe7seJ;G'CjX=o4blZu37oEp)j[.c"(,cR\>WobWcugOE&B%JK6XR+f-'ri_+%3/6A`gI!bXnMFTq%^o1lf!g9#$IIZ^]Q:2ugmNDd&5:+a"3igPRh,-Tt[slR9ADug9bhgN:7.e)DrlfB0`Umd9%/OOU*5mA-1)+4cV,.YX9&%iX`6tEXLM`F9FhPm!2m/iUp/L-bpi>!gcI9Edj2R\piZQVks4b"a"Q?*#sYiTIO$UQ3t^V)tXRsD8M%O>5)7&45+oC+`]3%>\!?W++LFQ;E&_Z3)&S0,0RC/fmT'!gYS_n\F_#:Ni)\bdsDM-7UAJ=aCRrh"hafN@1V:b-qd$YP@^H<X\KH%Uo/Dbo/#'FDB\?Z8hPuK>$N.^=Y%B1/)X2bG7PFu50X8]QUm0Dj+SaLji.'g0n1piqGdAHpY5N8I.K9[1nns$n:5kfLf*Y^<Hfu9%eR>X/OhT-H9>]?no^me!dk!WtU3p%2Vr+LQQh73^G>?"<$9.5[fkO4/o>rp\g?3[NSc_8qT[/NI7\OCdRPdSV3(F9+M^O=.<YaQn%#dj'VZQ\0_5&oEBK&+4?g4q`0K?[QeN99OE5?JT0Z$2Z^:&soJ^HfQ!n+IO]2kf-BGEot._Y%Bkf,Nc4CSt$U96\]jp0-4`dcd)0%?seFM[J_Vn9TOLGQIpFg*Ea*&NWN1;-g<Sqh$eFhcC1Le2sIRY9Af-si0/8QUO!o<`O/b[J'h_Fm1gVahm-?hHNcG*DcnWo]u"Ua%^LFIXp58V<ZB19<7(q#m>,P^^M%9?-mZ6;hmfY63V7!)H0>>6R=nJg.FujE.B5Xe:g:^_5H7Sbu8L3#(O6f[-?3Dfk:5c0H2p._1%.8q_"*LE>IcsQ_dr(MH=6[*-d7*3m&k(n^VAj0V5,6^lk7crH.`,Ac`Q?-G!Q_cK#&gl)$^7(;.hXp2-+$Hc"<e]c]?MD<>?#-KJ%Vp7'W2;-Nrf?jH=LaZrs/0g=q`#6RL?:.(*pt#hH"'m2CmL+/Oh[U8?6mRkZ?&""O&I$N#&I!C^N>DbWP=6`rf8a)]W4*5h&f1%(%.^R#G-O],1`*":?ie+A*d$7SAB2hu0%d&E2':5!P_H88"!jY2TX>s#jjE/o8$HVYBkUNai0dIsC!d6Kr35^"-`2FeV.e,@=nV0=>%YGBlme7!`X1KDX^$JUP>gaYXte"t5c%hrNk9)$GMCFJiUA*L&RY!&A23I17t.#tRbe2VaA"SY3`i5Sh![:#OTC>H/g>ATgWoR[o!%`Y*b<T0FP-(Va<fj.qqYN/8t939fp,;;1]0>Cj/&Gl?X@f_(fQ44cf;V98askG[&!`u#5*jlJ5sG+Rmcn[-Sac-ILBO2Y\Zl]8jj%dan^G`]aK-A;FYNItCLR4;N8\SPceT_dh:_;r^IIc1LYd)-Q4\\Q,Hf/jIWDHNg%^dQ6GIVV:be9FU.&7u5aTIA$1)'IKD9]AmnL%F0k&$DDmsCHN&r"FTQ4:2KMF:8:4X`fKp9-F1\)Rb4??ob6K;dJ8_(:EL4PFd"O7W1/UC_Ng#;Y@Ok:fa2u7=OY0KCa2u7=Z'D8D%j(.//A?@%"i]*?N,<p*'/E/XWGb]TqCiI=41@`@P3]c7[R<Tsu&!)N+:+"hRqtZs1Ng#;Y1>*1t3)1gW8Fj\C,*"D<N<T(#A[Zf7%lA3,,IWlfGc?X^=CisKR:hYt-])9QjfIUd;N1d-ijhc3@l>hX7$4%a>0\bjS!o5b3SN>6PqCua@Dgiu*ehTf#^]Uo](,qO348^X2%F,^Anh_%rI"7I4THe>nC<o!MVHVn+<q]L5"o_j&TItZXqI6d[f:7#s)gMWLNUeQGk..!Q_Upou(eqC.>cAAd>,nmkY5XTjJ*K.(X%bM*gNb;g0#*A>&'Y2S[B;3o2oB!uqd&[W?OK]5kbmZP]@@Zs<a>Q8=\Z'n5D)WYD=q'rO3-IQUYSCMpMD(M>E(2E=2k!A[t=skI@%l$j?DLS(H7PSG^JkW8Xg&UNr:aH3]!Gs6KRm60V&SR/;pd]9jGe]tqO'a.e_*aJ&tOt0+-p(>HM-8X!fkn-P*UNp,:I"WP)-DY/n%rkJ;*iWoH&6PnV<mj\1j:.VH:nG(moP2(\^J)LA,,\8EMR(U,!P-=X1'Xl8fSl@!rX%JP?r(:Y..KULsTNN%X2HY7n0;3=cC>FMC%s!/:I_afTT<@u=IMH*m+g6/8BY_EP7$p/6n2HE+NliRN3<>+2"TFq[_)&j:c:I7pDX=bAk;Ub!6A?$u`X6@o[70/L8eLZp6B]rSl%et<c&aJu6k,KtgA<5S^'QB``u)cA4,R#KS;=]:MX!].-J@RE0+LAGFYcIT>5Noa5'Wu*27Vb6GY1?>58*S5/Q,VV#iBe#?G9W68[%j^]g@Qnn;&JPJcPKu#HR'AC6qla/iYb8N.18l;pXX]P^<A9GdT(lVfW.1Cq[Be$ok@Tb!jL<$0*!_`fEl%VN4)W3l4G+iAsB2p[l%M?8DuMH_"d$$9-*Cj]1'!h@-/X9BgM(pjW%!D&KK:BnN_AMr0P+9`/o5S=bi$o38H8-'5$#3.XA$Ic>9!o3j(Bn/SQ117%=TMEq@%-L_k'!QW;3<X6O/a9[k-Z=O,/af;d@7LFgS/JXYs#-?:)C=&mc[6YC<aeHb]XK"RY&>n*[:1-,A5slJGDj_SW.8Z"]'K.6m<o=j$%-1sRm/=!XEeYn3p?pHmOY0CBI<n7t;_(67H-Ng!nUmNcIAQciY5VM=<K:+L!Q>45IFc(<ITgGW.m+I[kb5q%P]9]$gOX(2gZEds"%],G6)KUL0haT.]s2'c34YQ7i0Qibbq$'KE=qLV':R%\6$Iiq>(@k%h<D.sDj><9WsXDHMlV$9a;.$mn-GR0g2?o#]UC'"p57*Z?U%C4J1l1paWiOEM)kG=s;+c)+rY!"V[_:r<DJQ"a;.(m0e`2K]jt_-o59"IS=0$eR.DQ,")n1(1lk(d>abXDM'm71GIc(#+h$baQCV%[\Tr,V?:TFR$C[%1K@Ar=tk+&iDX8Wcks-<$F:GB#/Dd\16i0Q=(j>AP\gU+q.DD9,V;9Z,R)lP5`2!;K>DdD#*K=h+u%A<-@$C5%C$Du2,VC3q:]Rj0K,H)+KMj-o>QirI6"))s6=<&tS\Z"3<Yu6u$t74jPT^'>BYZQ/:1IB13m32-J<Ngj!!MWgXTIql'5AF+)SeW2%BEZ=e$"P@"Pcu,=;Ple`Qt8Y0Wic@9.&8B/L9cbk"IR=c$8Bgl153Pp(lXCdaoLO+IINNQ#J=kN,m#dV[OKFG(E(Jj0O:F&"jt_.%PT^T+M[]cETTH<I^cur7!i]+/e"SOr6S6g/-lFuFn_/r'$*47`MlL"hZSe6]!G8+Z+Nsrk=U'FsWNo3T%"saWK#.ppZNs71=<$`E%GWptQLbL00OU2"r)H*0DCt+lO`OIaWOs(JGJLORe!t8d5K>:=$:lkmE7mX(".#d@'<0WnS5`a$mY)m[e8`)tmAs$Nc*2*?fA7SPb%eM&NY1JNeEA.VgS,05q)c"`9Q!0+"Q)V'B+MTnGq/L^h".hkjh$=&Cg#IB#ufZZf#+G5sDgdtqO7XE,;8IDdTA/0WG<"a?WjXsaU%KlMbIbYVi<^a,1?eGup%$gWF">#`ba"=!*/^&_ht4i(O3:&9W'!,GZ66;1de`8<Fp,UCTY(:Te6Og[U"8LDtn2G,"6$s67^."qYu%Rj]lh1NZ2u0T4/(#\05l2($dRM2";5-l,,mXA5Y*K(GgNZKg(QMFO6AlqcbW^aXm:2,jWUAC^tUW(^W_A94,m64+i%AI=#aiFp%u%:oNd`Qt^=M`q:CgCdk'P0M!YdCn/dR3C!t)JXJbg14L$t"&5Yp1(A%E.TDi,O36YqaqHb%^+'e`-:qU"U'=XqWem^-0Of/Kbd%om%1QX_4bL!3q6%ng)(tA]oZV?td5l2,l5St=CAG4%j,Vo6AN+tKjkt-O8@ChKq!_b"O78oS)JqGb8)BoGC/b1NYe"->OM9oJ)]S\E,%Jum?`/%TRP(n!Z]I3tXH0t27m[B$7=S8RW!S3`DB_?d7l9]p8[[UBgdl7`@WgaDEp3ZSWQ#*Tc/@U+X1B=,lX6C;18&=pKG7&M!*%N@IFT,Dd;AWh@:1PJ]4L>7aKbW^ckWb#(/d(nK0]S8@L"Ah+cgZD=M-?(IBh!!=a=_n[LjI:3I'@B)r#"+$sU6o^3KRF;pJX"rIE%()njh;dPJ=4MmU8*-sE=`Wss-1a\<6kkorb6X_+lj<,Xe#h,`7M71"6`ETdl</!$N6G!8o7?UV216?5[8IHG.<[A7)(oIp>7mTNj%,*I'Q0J,jB!/"e'U6@.F1ofLl$1/2OaB4Js"6<amBP#-JTeN4C#g>%`N)<eH#E?JkN(q_4NY9\?VG,`e6ibFWh58u&aD>*>f:_=W%l24gBP9\;;M2"NE85^_e5FKe"#Qm7gl+>GY8!pFl&QR4Z?m%h1V/2>D<<S^LL#@lt_EjiSBSU/6Yp0[s7:F[s5u3J[-e*'3nW[Ts%*fq-gS\qCN]&Ni/O[1aO:#k]218Bmur??ogf7Y8FEN6?fK5)uMe"J"c8.m5&/K5[?a\9^Q)b^*'9r:lH,[G%:1:7dQl&*SjVEm1B%F1;lkQHCVqXDW^E2T;643t."e7->%f"tp1<7q]b;A;^[X'U>U2pnG#jW,1/m(nKLpA=>P2k0P#C95K#VFgMDKgYh5;%&OsP-L3#G%MCN<eK/(c.B%]j&UF%dZa'a^h`QP5?l&b`MKt!c?(@)uZ6)R/-Paj%q,T<e8-B#g"BY<OY:BEMb7aahj+HZ`s4ON[;g:2[iYCpBC%2fQB+p5+#C-=R5lW$._2F+pk4i,Xd?!/5)+636Bcn>q_=#[#3e!e;/>pgY/mY[qR5UUJ%<L>mjh:^Bq_@oS)M5dEu[FA2s&8+<Io%)j4[YE!9A?:'a37OTUfQ$B6_fVEr*&?lT`Q5ijb\-5a)Y_1X*U+0i@6g,\XW-rZV6\4l>?g'5h.kUKKm8%22ZCP]Kqb^;1]n3GO"%S".^@/[K8YfXKX^Z4,k%W3YHQ'2JU"._0."9X$"TMPsGk$u,fY&2>?/QH<r))42.H0(']`9LcWaihd/bOsG_!jrn+L'hr1'2OX3j%HtB#]LuB`)j9cjq"rnuU4?>e#OGOW4^^Qb`@MDmI9"-'+&-Ap>h$!1K#7`W-N&>i2'=ef:oG3nhF!hG,A4kcT"\<8;K1]NI&5e,u%5V@CM3T_KslmZ?oOAJu_;<]5=dH=>^i_\"m,jliPN`6?+2Fb0HLNY'bPL'DC3uBK9EPZdOpPFkYA&M2%M%;&g\g]Bm3c5S:7:hup%LgL/I<MDgr\K,<kMfK+.&W+%B\-4A9S^a1j%MVUu`3Mco_S$m//JF[/P=5?_',Uf$XfOPA&b+p?ijVN<FepO"d`G[5lp9W/+]D%6%'>4FJ;=+h$Vl$cq>=PnA9QK.;!AN#(1k&.df7,Nbr/pcFBI80Slss]lH1a8(nDhHU1!V>T3&ASC0I5_&_1eQmVj3g`:oDPk&Z5/K%S0\q'8/,DT;1(-$B^k;OoFSON-6c!TG[Fbo;]:OFoMYfWW(<oEa#@_N8!/(Q:Ojnd$[n;],@Lh@6rFa'*IjS5K4&/pcqtPFm1>XY%2/3*3JmiRg"?BU/La1It4p8hJ1Lu*'Z<S559O_GO/DuEtb=7$dbm'2sQ@'iK"d2S@KPMJ#'BWqc-q)b8A,ubC77(dB^?!(#[*bu[%6guM=DIY)d.(q8?[nB6u<"j/Y!<P;W9=fc9&:>"I5f2&H+UJQ6gCc#gq*6^KbpbOY5WG;9#e0q&^BFTZ*!\J@E2m=pi[p!hjSa(<%c+5Hh_b7A'6j6]J7o%M*02eKY0QIdCl'>b_.1#SI6?J_4&7V>79KQ$2NL^/O#2N95HtcK9&e__dER52SFiLNi=%tNV3P_kN(*:@.%knLoaSB9TIF5[Z9arlo\$rmub_GWcUgmWc#(1RL(*nktZ&E00H926(Fc$p,68g2LDSLPTf3=Q:>FLpL?gZc"2OZp@i"ON=Qm0,W!%LrkK0PDfq@76l`*#(q@dNYp#@SF@)?P:&[*SR>Bo'?CQ,c-jr>6l8CG(#j]VCBkt/"XoPqr5P(Fl9:"mBET%(ZH-uMKkWLa@M^co%Nj"!;AtU^YqT-Yn,!n+1Af@4$7=^-A%"4%dA.63dJ0[u-YV@8\&E6)$`3aXCQpd6o!(N^_fL]I(P<a4^?e!+3X[rV%MN*V8+V^1G%F3.60%%I<NY`:CK?jBZpZot^"8QZI.#DGRF9WDaPFVb'.g(X*1$A)tlPA/QDMa=6R$n[XY&SDLp:+$K]%#r%:_RVoDYbh\VXPt?*%]H>UV:h&1JAr3>anS#lR#f[/^U8notb7kg$e+ZgqF\:%]>)FlI-o*[<:bZ]SVc@5KK$"E&.GVrk>Y<d8+&#1ShF.LQ7sn#TR"e;&%fes[NE:nhVMQsLHl_APY@'XLJ',%.P9]DW`67E=60YO<%0pM_m#"2Q^YluU2`j")@:DUMJ'hh21Z\0cS+iHNP[,Nd$Gr$o!6qpA'%*/Ug01D.i'-=aVT@8rhlgQG:a=0Z<dW&CWB!gkgF/u7HWYV6pQ!lOZH:i6`[Kb<!7==HU;(lqg)atV[>HYI1,o9LZq*g7\m;)TAa%"!M.6OYVk`O?"E]9gUq$H@Q8U'e9!ebZiP5VOAcqiIE'T#VG;"mgZFE&An3Kp(YqW85<TE9#C:f6(97L"o=[b'-C#f>m(@C9U"-#%)Q+l6U<0bNRttA;bWq/:KcLGF$T<scSe<mL,n^V%%!2_$>/q+PY`8lh*:)8>[]<dVM_K$ui`Z_Hlik3.q\U:hRm[D`qq-V5p+ZaX%L^tod_R@`6"$nWG?/gYhTeL?lpPgaAk1I`<0mRRgL/!a%Kb1H0L(IXtl4<sXVTfN6r+Xm'Eo<gW"**];%uf/.DDg2XAM(HYWnSD/%cak.Z2Qnndf.KOS,&+>j(u)K7F]60p+=(,?fYtAg,FP:2:?"Jh2F7j_&].6k#NhDn:/04pk%tEjZ-sj4c+MLX.=CdIQEg48)ofB)%AV^O+l'5\7VA_]>B8ddO\9)=rMI?.O,ArpX?lD';EQeoOS!ZrFg]hni'+@m=;iWm(FIZ!X92NY]-@DKOQ<6]?dlj`;6S+CsM6.pl%;[oWpptJUjg$Q-H&NH&n3!,Ur30'N;>XZ.DiokPIbt6>R\!MPA1:u0N=d[ILd%Qtg/"g5n9VWbBN$YGUIiE4#[-uh*_`n>7(8;Co%P6Y-g\Rq2FQ;p?jbRCAXdNFq:Ci@2`33iW5"NL0RO`tZo-DqtZ;aNadn8NeJO[EPPX2;LI0OYYJ;?B)n:AR5G?=D;'D@<b+J`':I%%a6`bEMtkQ\Zcq"*U`fu;\:c.CJ0>C`RP1GmNga."(@)!]*l)NEPIZY_ZRe^12NGF:=mC>X!,r/'A-`nn,m'-]*;Pq%"n(p?/O:d%@IA5mnOZHMF.o:[7E<cSZ1n?NiO1;KDMYSl>TnVoRiTHgNMRH&To0,d/_oV_9,T3S>-^l)!uHPn.u=ukJ7N7b3#*T+#o]As"NBJE%$=IE-P1+=Ld+Qkc*J_:hd7G7G*,-k_,`P6Y84C&,TUDD8!Q%fq3EWXa!)[i,kdCS4L;kC^n=<`&'KL":Lib]=U76A\-&J75cGV(o%+hdn"2-Q/X\hMPGZ4)Hl'\SCY=PV,@XVcR#[6`qg@X\<1DS:ZWrP+VGD6#S*ETSpAs)>[h*8!rr-+0Q*rFD)p&d#[UZYUa8_48_/%L3#Ic4P;%\If$.GhUH`kO(1!8gt,Di8u9!pWN%4u;$U"**SU1^mW<F3_jN#i.ra!$XPMsZ%S":Dc&^ANMJsh[_i%DScS\#Q6H$+"%lPi9rYad4'(A>\UrJn]d^`)YU>WuIiP+m$XZ?D8A5@/['rLkT]+bfOMGn-ElY'j>/VncKG:,_s!4@.L[!5uit=2dJN(Sdt-$imi]%*b&Cf@+L=#BOT^4hb##d*2G0QA3e'milJb$H&8`e;?pK(V##^op/Rqn'L%.PAll<4YNFBH*BK>%D)NQCM=NaK..X%<gG7m`mIXa2%Rp@TWo\pf>C:C'2l`-t/C3'F,gGmb^buQcj>X[@ZiDGdHYcHVkEkrc`*g"q7!i4SY6drHe+h+Z%3S-rs$(GgR)=4E+\)Y_M/fY%5%al4M^i6^^3()Q6,5*NrsOb$\@`3m,)>j)f+gQR#9R"iuHaIrYO[fP/O@@nG,2cf7,fE)l-4#gZ[=?<:)m1>9&cA.gMC[&j80'JQ.%!r5moTZA7`Y%FYhMp5/b.#lA/*<h5P1BkUK*PW6m7Bo&!75q*<NdGaQ*R.8J<ON?[nC.ibEgTKU&KQlR&$*N&p;cM/0=QK>e32X*%XVZJZ%ZF5qE#5bKaI#L9[Sg%G+m<%*H,-mXj:X9i>A+qDBa0l;_@M+F`P)u;6IX:T1U'Odf@JqiR:nXicnmT.$nTktf>c^Wop4+4%Kr1Q3Amc"k_iCRMVI:uL72MDQAX`*`Q94k0e$4V(Tp]M#$VfDdhV.DM8lO,kVIL"YTpnfSC"Q$Vd=nH-M5KVjo3;eZNb+Z>k/0i"%R:\=;UdW\:Kr1Q3Amh$=X0dXoRZ8sV%F$^3>A,3!BC2J0<gnmu1`aariC.b3[a9,4TkS2;)-EchiQJJZCIhh@9g^_]^_WA8V/C-o%Co+,p6IW2nk"ptAVJ4[T;pg;rA!uJ;@n1_9=D5FYH[KEVdJV^aHm7WaMK=]cX4$>]d=@7*#^.Y?]3l'ajFY_YFAfB>Nt=m*\<s<C%mUR3CN(nF="G5GO8=cLY_U%F!(o7G3aP[bf>o<Xe?RHk]hds7F:pOd@)3CU(D$^o[KM6^DnN4e@M\d?UB]B]9Wp./TLbGASFbJhR%IB-^@mBDDh;m*!i+obB0n=Qu(LO]2SV.TP4ce+noB>P5@LMJlf<1K6EL(bo&cH@5MgW:E$$YpIoI"5p$L4/S;U,H8D+N86"LtZ=!%Gq1`t%Kk[bn=>gF-PrXFTG5ilbF<?V\CNh9k_K!p"Dl/s;qVW3lR_gU`4d&ZU%eZ*=:0JH<^qhS+@lL8EO6$i1uC&t"j[(e`f<1*%ren8dOD;Ao_FD-FTgSM25WV83e<3Jk3b4PnmmouZUJbqB97WtW_:(8%L4&-2T6.R9`^MgSHZ^O\Jm+(]-SELr&l1*ui&-05S<F'=%38.1=0&:+U`d,B-SoEPr!4mqIOIBqr0$F^H.%/'Tcr:nBg5:<U/6+P:"PZB4E2bM0/,oLTHU"*pn&<k(SaU'kI]edX9C[btP5'^$%k0]a6IDEdpT$^h_3L-r4':-C%X?pc2@"V2s*tjB(PO0S1hkI\?c=\]u!bY:3SNUHX>6LMip&u5;MJo+A/sD.*8'&I;Q9A[4A(3hC%:KZmRQi&Y:XPCk=,BSno,TUQD6j94q4RbPs;)Hkr.Xq#dIXspim]HbiB?\tVZ$C2-IXqr_jfo<cld!A[jtSgQ-`f$p8]cgprJ3la%/cp:u^6d2rM7q%>ElKZ=)V8;$]Q7r`_^&o21KTAQrk7'tNa.qSO2Pe>,9RSA#[`\qM.J1k>MFam/UpW)/<[i7/Z$:o/[s+kf9cWo%h1M(acYZGcr,.t;DZW?p0(W+`@G2I)Tp1OdN'/PMBQIRiIg%.Qj.a9?#_OY^/q\6";IB:rrLr][dl*E#3^S=iHc+P6k%O]`1hoEJ%*b*pUOM]<Ylf/P)$@W"CN,0#,73k(i&@dBd#hWbb,6HTDbZr)=>gBO,isciW(Af>@l\%,g/;_]?`e;%6lPU)VAW.A8r?6O+?:>E]%.;8e`33-0E3\T-jl81Ms+a0+\NEB0!p+t@[!-e`4YANV%9)p@.G5.1b<A21Z$3U[+2QF@L.&u8'2o-#N!+lmW)*Z>J320]5i3TRf%=]('-&4*1C>MHej"trY)i]'U0@WnB3CI<-k*:rkCV%Ad>QfUc0>h$c8mZ"Wtgi#4Q7G.VSEqF'B8@Y="G,M67OcAcO,)0oQEL7^?%[ARJ:!`Fn6B.mm!;O\DQ7lD@?SB;$)M!0!?LjXA]0fc7[c/VLPUe'=@#Y2]N4VsPJ+bJ"I?5=Ob?JB2AFjAI8GKA(<!P)p)H2ERt%LrcU>Jt+Pg<SY`@oZ4`#hB0>Wgm53>aMn>fs$L\'Y+tj$j@POLqoIE-TuuWS-S2u[^qRQ3C=F3@,ko<N/(XAu\k?ksnHF*,B*q_X%leC,C6Q.ffF293@]'sREW(GMRJ;sN+?XTj>K^&360d6Jbd'dQq;S^OJVZVXK')<6CPrSpCa;AAL\RP"GK.[b:@N[sii-mAKPYP&A%p:/3J7La"O$^2_](_S%nBq&"ep&gGm6:^P$\:i\`>\\XjqaO`2Sde(#&hm(G9+Z!^TmTH80!;^7:cUg4.O)eH7':q4SRP$Ydm<s!%h!sV,#$&!Qg92e@=nt1&8"I^3+\:5X*2467@_QC?VEmI8[HhG@J4GhC]>VWO@Cs)BiZ>XrnI26;E2]9((RY!$IL%=7:/3]ZBEFti%)DoX#[!^o0Wj')8-k'iD@[`u9C7SW*U^I;c2*tL+n.m9@hD$b@#uUu&^8?&WDeROt-f);OpIdlupBF.d]gmm!.9P)1@+Bp,nlPG[%>&(NSm/;J!;$&?t^Y?7ma`+`R9ikt$VrK$HiIe<Im/:A@rCKU,;V8@OL(\49W^K=]:a0u&T3!5k_+BcS84c8qL\4I\T.ijkdnEUP%NU_NrN7":)1)$91OiQnMcSWWH.+`/?j!1F<pipK(1\RJ0,%]'XSn&b-6(tZZG"e&qm98[rPdEtLR.fnQV6M3.9'ZeN*l['aac46<%*+ht<W\-\E9!T4X8PR'%S`aLLMrA?9!a1<N1/ukWL8f:*-<'ho+&`Z%AOfY1*:q/hV3$bgQ\@u%6I<_omYnQo??O>4OT2+D)AF)/%dO*qg*I8`H2.:":3oku<qS:Y!VVY;RUc'0F4F($TS]\4bQRh>^2"+Su+ci1^[[_'$'2*6NP'"bnAEm@F0r6MSAu]5-AEmUmm7:u^%@kIeWj>+%+Z63dR;AH\3*BeH3[eGQ[I*j+@7^fYjM[jIRa,5`.e]7OR'5$,c?s/8$-d<3*LI@pu;db9mpkYoQ8(JK;@d2#Jjq0_Y%66;_[+OnA#/6-KNiY,qKpipK+1I`+B8m`?c@C[/sNUqrP+WMCWT7u3*#bc%8Df5'kka+dj<I6;_'&3&3jTaV3p5JqVRs1Ls;Y//f%J9CID@^14AP!?^,,7B6pRPL`M_6Hj%@:Sn2*8@IO>WLF7Hu.rJ*1Jm7Ds<_W47r]?la2ZJ$VYDDYO-YU*]@r4Gbh[ODhJ>6?AT)u%4>bfQg:OoJqR5-?I/n\*mXq[R!DEm1F$u)C60.*I)`<W"UH+j:Z&*\0F$)!Y`g^O1hRoTtG=ncBRq]%J[bP93[cQH#O_C(KhKC:-%ij%dS$p?P)b1V$bIBdtJleW)SGWI;N2J>qRPl794D!\&9)\sa\]5I)G_s#+qL\+C?N[>]cP)VljUapC`FU;.jL4^ZEmn+^rnSC!*%FlmT@ah@pJ+kn;qNpW[R2VW2'-ejl<Db$O=%U&CoNXNpCb@6tr6WMd]G4`hge(u0-nn%!=T0Di1jdk/1]Q7RnlY>LQ5!\Z"".&]K%Id4o(!\lQ7m*H9iW0RZ>2X"!hrT/W6g)JqWiK:`64mpZm=K9q1k\!FL2t!eoKOUdrfi[77\u)S,jCUE]*giJ_-**`Lfl+6'Zng;P%4/.d\nijWq+Pnpq"\^68@/ibcEr`iIp$sVe$;YVt:/M7gW3+G.Qf!q'Tddd/De/HV@TK_a)=jra`kE4ggIeDcQn6c2+eX(D4&_;8%F^a'fBUqL;!N4sEo%K6TNMd>tZ5n@6ml=`1o3X!"s!0lN:'(_DS&TY+ZJ3V>=@F-LU**C!"S?3=ho0>bm8c(E8_9MpghMP#qVD>u%9iN"\+WiKn+bQa%CLZZh^27U9?#'@?(^`rXmA1#)3,9jo`6%s_X2?f)bre_F"r_kN&rgtR-"(h"86/k/V6L^92n!e*X?H=Wd$m6=%,cB?CdM*oVQ"uinXP.8#$Z.\dr*%jV]XD=]k)E!!@g<[QA+a[WRJ_`/FG6IKa364.C*tfF/XU,Pa/;n#OMLWf%#K@/mKq(eC21\"%9UkSBd'RF:/YfgeBgPn&^7PI4MTcqT&1YiD+>5,/I@%;qPPJA=AWPm(RTL9L+[qcnBr]UGOR'-&UkS_A0g1mO8uHRL<nU'Ng\WqG%&CO+u<,,*680)/\eWq(<]n&e,(W*<RY'iW'9GY4h#48.DR5dOqd>CB;\IKn=(77Z9.%-=43gZYKjMH)KF,)<[(+Z?^Too4JdM!-\%_h9\bAi)@s4qIoH_Y"o]lf>cR"EI;_-nDmDk_@/YN\oc&=^%r[UoR1`F>@S`eTWT$f\oh6_U[0OP0>gD\&jd0;udC3.^;j,`k\7"%gn_586tMs2e61L`*c.A65gjUobX<#,9MAbuaO412JNMK?.JKE\J*fqY4-@(\GIC=I[SKc!MF;M'p9A)=h1VSBT<P*mhD&.ijQ<1T%,WakMU3]l]`"!8R34]mN["eGe0mM3#I4#u'C,BGk425aHQ:RRS7J<0Fqn")!"!Nfh;$q+$U%Qs"]/4S,UB-Qm;g)]3D&b'8Rt6CZ%59k)`e?L3\K)#;6KG>gV(J;!IT7ptdV*7I"IHjH,We?UhQt-[>o8?"US[t4^qk-WQM_ZG&T.#?9iZ%,QFG=$K*S@:9_P<(TUY)H[%jJeJ>UNAC_YB(=#mre+U`@bRCF-^Y;_SAi;F3J%:3eTT&ZZ$CmGX<[eo9r"/%me^>els8s=NZn7Peu-uEhCsSim@W#5h*[l?!NXS%02#%!GclR<=OZ6uooj!FTOOf\FbA0rZrTjDq@Dp*;9*7CMQ$V8`hel`Cr/4Ij`!1TH>o_SSIBiW4aAPJ+I!q.2S%>iTo=R!54^$$%:H0B\-)!^r@=R9WLD2C&AS;'hRA/=Tm*J]9I*&NG+r@PWH?"jl1lO=ZNbtXf6,NqFr%Qi@?rtNqC>*gr-`Lp^2_1!P;8U7U/J6^)%Q8mF&nMM/sWSD]gb'SV24Jr?Q>Gd2sQukjg;Q^!ZV'u`H:gH:pA0Vr`1u!^d@GtAq`i/qa6lo4Q^*/4Nq3@.J.2A94WOfrh;5ZLD%Ec'YNpFa"#h"sHOB)VQZs1"*F`'h*%Y%'Pt7`e%Qf<L[*5HA9eQJAQL94!#BP*dm##b=X6PB:MHRRVbBj<$t.QKP)XGW/Y!#tgJ_%,5h[eA0q(Fi'jK.GH"'R)RVl6^IjJ^H;qqMpT68TQg)?%-=T,C=(\''\f`6q;]LG'XLoiGRZP<842iJ:oP$m"cSaBXL0OG8FA<((%4ro>NGn!*?i24Xj#nDDX;0J6-Lirr6XUd`F+g3H8(`\sBSa4cE\\mjX[(Hfep8gn+j@ZJc$IRDH/ul%doe71V)UL_f!nWR^(<OX`%OJTpR9kFi/PYV3,<Hn!U8X"$55id=Y4NO(Mharlh,1KbJM!DCY-<#AG+&e8Rk<RH4Fj/P]PY=PQS]fD?E`kKMefD4@H[k:t]*aPK%ajY-!Km##Hd#F(G,HJhF=T8"/98eJkg*4eJ<E5e7PF'b.UZdV]=!r$(39s>6@a*C4"KCea5X[,rM95W+q]mAj4H?Afl53/Ck/^>O%cl61nX#k:"IV,Ge>:lE9KLk]VpGYe&%LYlG5!oq5LUdk<1>VoF'V5SH;g3`M><MDa,IPgYFLYFFN>G3OB!0Ei*_`DZ;9&(<QVEk<%#,FB!JbQhLGgn'O5?saC<R,6Tfrt(K'6;u9T<HiAOtkEbojrY5ic7drh:6?O-Ngf_;gYKg2aepr1I%cW11XK3c;NfqeX!?N]M>bT%Q*VUe4]'O).3*[i*@U49XgWilIYfFg^.7<H!,l%+g3u.jEb5n,>@TZp5p?ho:.,i+7/47@,HA+t\+-eR.0@H5Tq`Oh#'mR`dt:9'%'M3T3dLT;JZ;J2@"V1o1@psundcsk67+>KW#r+Q/ZZBGY\kO!:*%+0Z-^K+)q8?'sP"#nJ-t^nr;Ye+^*4jVk=%&C7>t!eNi1epA%8qX*ZQhgn.+%oiJlIUl67oK3sVGbcRk`V_q0P=PM.1nB_93iVY8j.6fG&cS?gOsY=\RHa2=U54R,4%u9%00,9N=r?MM+u.#SlLia%X\jf^f-Q?N"jr$i&"e.sjHgoXVPH,0V*8GR3KD>6_+cX$%j6iVK3HY9WKPs1mRX?oa)e,dbUQ8PR#e-1XM*4HkIBn'K'58MF?Ati%.],U*Kph4IOZQXD>En`+kIj*%k^VaI;m*A.98F[:$s8QR;(R_j\`D'YH][$0DIkj(J;'0n?i?MdLn/dQE%^=D17>1f_+q^#OO$*j%hGkQ=8`pE'p"ER3$V]:En^+^Wm.DK#2!o6G#oOLK%qHgNE>"Ga`oC<!6?mCBV,In6W&@XM'cCTp?SG'?S*6g!lug-m5W)_X7ru-d%Q;=CON-6Y3:I8C/cQ,d%%O\565J]<LI`cZ51Lb2/bTmaa-mPoH`#'JnUk@p]),$%(*/0IVH`/$dSLFu*F%=W"kA`OKHF?$(FM]gB%ni#_MMT6])f@2r*O4GX.2OPsI&Xn*Y0NE>&n+0rnO"o95$lQO"iN4mY+,?SPSj&[)*DfXFIYr-2r1r@h#Em*,@jZf#Uf-d;6B]WV%M;+Hl0"L`2qeK9I*/S231TuWWIgl3VZ-&ucQZ&KMs7R3)Sr2rm9u#uJaL"QsbuEb)e3MbsekX<EX.f<ko8R`eOSJ>A1Ucmt;]>/!%'0fr[Q%*?$ShT:#)>e]o9"Z]>7VkQl\Sai:,W;AFp%-p7X%Zum\"V@iB9K`o7gt.GgGX^TLJ,6H1?n?^"Ma7iG7rYM*jJ\Hm5U/o%2WNhkC!YGt0%;AQl$4(#/=-78Fu<fLCVY:4mC!J_NT"uMh%5:fo"HB1^[G[cKpo\s'4dt7;QX\3U3RQ<d$J;[C?F[Bm97@N\Y+9m%?h9hMD%*C%h`I>Qhd;o>5b`+HW;qM]-003&&;),>F>07HA*L7b?)[#?bI`jEZ/E+6Ceh5e[)UWFmm=-&cW8_,i1N<#D.mdm@Y5CC%9(JuhY&=(fFYIq^rck5EaQ>qZ:]^,>'SUYRG<3/cUrn)R0TLO-EM`h06e*n)5S,[oH#4]rkK(R^9O!k=qsF?i.pmHC`8^-29%%o'%_t#G0<3gdnH,S.?YLqi9.'=_TeN>e&,*Q[]a5fKag(6Y*mj)jG(<Ec6\TL7N-npML'GJ[:WSbnP<^^%j6OY]F;V(<$P.m``lFUZS%kuWbbe&duoi#@4Ke*I(_3^_bHWuXh^=@96$C8,g+BcOp1UIq_B[E5PL(f_-,+FJC>mhrDc8SGsn)'!s<X-DP7X*,7M=XMReF;L;(%W@gc?[:S7cXCL[`[I7Sd^gkG"TLC$X0j.\nfemlHD"ah[U/_IbJ4K8l="ul_g8Ls&A#VO=eYCO=Gj,T!&FCK3Ti=XfBna,95>D^[%F1P5O,@"1D=]1'l]%8o$g8:I@"I9X1cnVPHY=^-*X9e=N$UY<?H"nJ$\etJeLKR;@,LVL]SAK;]JD1%AR-A/lAjR%aB2\ojD!^+d%K>#2'3&uQcfT@'Gd#bN!"R)d[#/CfL_9b7d&mbfS%nDt@R(tn5X<PP"Y^W)gR?0)?Y?XjS@g]jr;f4'0qiLl$Wkh@[]0P]k+EdgL%eh_iuqN(q1e3!pU7i4:FIHT6`/65sJcP81of/BYC+]SnMO3ZSm&o)8FD=jAQmMn<(=^!0`"c3NC9&bZ0%<F+4Ag1(7U!`&JNlRFZ%AX4R8G&Oa+aUCQ_k1e(,I".]]J"jDc6b!=RE2Z1jmp!4j.hl`?.eiO\FK^(aicE*"VCLoUO4_B&a.bBa_5-N-2Q8-;4W6Tt<QUZS%r.q1a9kXG,/*Ao/Sb\=VYBk;oe./c*D-/3hW1AR5b&)&PPd;:ar>O"(A4/hN3\o,d3,?rjQkuPs)WCN?Pt`1:Z6kS/r+2BiPJ3-h%=?R)6R^<lO`RP9_G+35f"kYhU*SIt5,ha$$8K]GW`NiM,OpmXMfYMarOJUQ8FQr*%_L:"3%1BSO,JZ%5[Wle%Y(!*QbVa>h'_3;9%ahZ>8`J.Yr4!@;Flm<&OlSWg(1mnJ1ENKm!R\i>NUna$OX\Qo9gSi<G?Y@G[A7mrb1f>@Cp'2`SO]N<=FG;4/i7L*NhIH#XSbSpJ%bOE2ND]ADT@]eFgZG43QgK0?B*-"YgA*9u=B>uj0'C'IjaJMH9JK\ooOdp%c%J*#XRL=F#Qcd!W(@1+CB"id*8b[lI+'PE^VlK*[%PnFA3]8l6iWK^\F#m3?d63<9b/D[q#&-^]MRg'F`XbCj46sN2]]c3Dc=L>;#$+UAOT'J`pdG^[/j9g0#oS2JmN6ZRCGM_3EVliI?%W:Gfrg/Q4kLDZgc"YA8sTO$UC*m^MeAf(+V(SkB+hRma7\Q'*`%h+?Q*nIi%?Eg;0n\r'g23p.#%a4C:O#XGFZ\[+VWqpo`dgs"A%qC2_9-jRjg\We#%k%>JZMop-TQL/Qj@8j:="4rJ.%1-1a)@=o"OOVU:NN'I<PgZtd*u5sJ.n=bsL[g5j3t=,gfqsdYjr]N4SX+b!%HF]P=WIq'1+`n4-DX9hR@]"A]PCT2k<V`AqVOZoR.t_.tqXBD`anb&N8&B'_piom[T!:L'*kghH^n:2)GQQG%TdV8%rsKV24if_Z%Gbl[a.<)'E`=fRXdLtBo'boO&OdZ<[6oSF'W9'139msg0RK>E_?7\rH-&l*7kMqM)ZU`I[C0iGg9-oSO_5'po9n=6@0:&Q5P"&0l%;F+$.)`9:7W25Z>DWjQ,5#Rj\eE..HUIj/d-`4X[>$`UJV/f%>dMF6$.<)'D`=fFTddf/09L\!k%(PD1n7"[8QS`H2l)K?(!]Ok#%/5]%dNEY@X5XA+q)`9:7W25YHm@]^eW$u\\k/@t@<77^f&"HL3h4e-iC0iGg9-oSO@.7c))\rps;"J.Q=t6N$lt%38B#%"jM?UCm%d\mW3<X(DbDUc=$U6\DTA1$lgT4rrqE/Vs4@R2T41hrAK%)Y\6;rC-iM^<,;Uf"1?Sfjs\E22R7'"(]eW9HCd5tunL2(t8oV34;B%_u51U!]Ok#/5]%dNS:m@)irLg"1@Yc%IY),]_`SN;N#!M/XJ;/KC;kH2$ImI]NCno8fG,/gNfSIe_`;h<[a)fEYe,J?cOTCUd&e&%%U-fmUf'YcG*0/43,kYR`=f:Pd\pSISS+[o^l=d!9@Qj2UBWMZ*Jp3d2elYM;+i3p)U*iSSu=)WUZTN.[8^&'+Ur]WPM?RKWC=(b%Q:i,RG`H@l%(K1+@Yn8<C",nLD1\2X2elYM;+i4[_$jAEZu.jBF"m2p5qSE[C5$;PTVfMaRMSWH;G!Y74ACZ1CR.t2U#s<,[8bSQ%+ZqdP"V0=dH*KahPr*6HDcm6$"`Di&=JD*R.Q'fDR9OFA8hGo([9V.Y8J[tl,sQ=4Zq-qOV2WRX9/8e'JK#mgQ>!+XjuJ%ZNhfr@%E:Y.@@R2T41hqa?EJ'\]2elYM;+i3p)Re,-8fDZDk/@t@<77^&H,h=hnb8$/'hY9rS5D?.MC9knRNH^HA;(Ym.&W;i9AMb:]F7nV%7Bmu$9,]Zm^a?efpPkIR8u/2O;4?+0bE=gB7a$]9@]?0ZXN9G'M4+IS]+lt7e8e-UG*P;`ra`g(RMSWH;G!WaY9d_QVSJ1[(JE7U%8YaiJ24fWopPkIR8u/2O;1a3AcV"@X[(KKbQ:g`-X1\DugFgL,Q^9..+#<`a0o!`302F[BIem15`e[S$1Hgn&ZpV"Yq<";5[,BT[%4knl.XcJdc@?4A++0kjifYK)fO)L,==WV1)`3+)-60TKUgIH)[p;5pJP\ZsVO"[0ngMJGFiI0<2TX3j;PlX44fR]8tU3jZ]FW:[7%Gf9)XG-rf52giP_XaH*#gF!D)'O"#djV@CW-V]6Na"rIo7XSL>_A?R^H(QeXa,c"iIE'#$VRB3/KoTU3;_X,$\i3/gQi&]hedDoa%cd4EASr7D[kP,[r:\ScTU:OE@#9<r%4C-,@[pAFYA)Oc3bJ7aA)LIT^IEX@KoW<ka0A+;9,_S:+jabDEi2l5i313eH),#Q'C=n!R%d^SM/EMGJh6*]cnhmH^+Fm5KUgutM_"^+o+*7JkdnHENs_Y?7]S\5MsB?Y:t@D3^[r&Y*][=5:2[dh20^q))a!$q:DJ8OVrgFV%'%+IBpk<+&^DmkA1mc=G/U)eBF)?IjR)"Q+>nCpt)s^%Ib<P)FSQ=rf3_0R3#102e/u#?,_G4;S<WO/3"8^+E>O[h`f*amYH,S?H,!%DW4A_j&2;^Y[`,mZAf-SEoseZ6CFbT]Tc(RU=6CnnPEYZVi=%"fC3QH>8:EFa7"&_]lp:/C;]1^NYV_XYI^$:0?`QNO=pu:o*Ie"%k\f$U`W,$D=&-2=QWrb8A=T@#'05Z7[&KcqdZ>H"0S(/d50M<7$DsGH;"R\t`sW?i.Kf'ER!j?aCURNF36a#^c6lVNg9Reb].pHa%dr-<IMKHQR(_dHdI]%LpTm9<N:LjZtF`dPE?\f103hfK/:_qc,06O(5l8Z'TiC^cK="<Bc+W774%S]pk*HkQaon;:0`5Yr?+;rj0%T!:pOgt.,JN;9qHm%1FDmV\,s3$ICi4KQh^Q.ca2'2P1$JplFY?-]DUl^BL8*eiSkj,;IhKtMKEk]G5S-CK`ZI)jatqr52Bok<['%-4E*@^h;8:M*+)':q:maOH<]\!g.GA)(Y>j"Em<qi?@`I;J7&6UZZ//s2)Qfd3n]+4]6(U=\=<1"B$VuK=CJ<G2%c+Y1^;GU/_Cj%hfiY)<>#6gDWJX"X"!3kH5_TQmlm)cMWZ$g*DV;HhRX(<=TV?1"-`T9j<-[\&ola!k@?"J23E>KA\:'ek$c-P_'JaFZA?`dU$i[(%Gt_Jp@ktT=?#^E6-ClXf.DBgn')e-I&rK)oCf@=M)i6t^i:Q-3p3Z3-%IobCH^m6dIMpHIO=M%[2G]JGHkP-opOO>K_9u?TXJsHh%j<!!GA1^!X6ariVI$-FOiF-H#@d1qI[TX4L9@E+&;Ft%a$/+?2Mm]27'l#tEW^?"1Z5\b#q5JWT?<[9s"F\VF&Hi5$W1lB$Up2GS%aTPkA0b@'/gp(kAc91dmN57b0Ba1Ys5cA+kce5pX,pA/S014p)4VTLK+r(4L:$;I`Pj.HX!lD5IB]_53KkiCiqG_<!=9^OY%dn1P%$NdJSrCip36kAg204/+\fj=]Sa7:I@^:e\D%bN.&SsGo?mA@q2-d6[fi;![XI>9q'NE(d)Nejg/*1ZRPV+C=0%:6Jj'n=\(.GcN;%,P=M!W@Si8BaN.hY")Vf?)J5h.aCgFY_pi:[1eEb=6f?[1kr[<PQqHfJc#F#QrPT=L\cndgeB_`N9gcj_o22CP7al&7=_r[>(e`3%-a8=F$$(JbE\Z&HD#ai_Jfa3hjTn)7(JC)m-f$52&e=g9lq;IAnY!2k:L2GP"ksn,s0./mRW.&]Cto,h/ih<bs6)@H:31$Y:8@c`%7-(U@60'o.BU^4D:*kuo;+QP*8ogn+`GJ:;QRLb#?GiKIcHDN6Z(D*>6T03F"dULpe7J+M9%+?NUZPXFCKLMs'4OneR=0T$?>koV%cghVIeUtu^JY.ObkFj[Kl,hj-+:/lrHa-iT%1dd+$l50`nK[O;[riH!X-:k'\CT?gZ2*/'0j74a9SM5WJCL9YOA^@WK@f\NC+T6I%jP^2DMs#P$AFOkII]$;2cH580T!@KOn6]/>J&TjFf@j-JnHChpd[2^VYu!]#[@$f*DO8u:\-^9p*#+g\,#%]p4<)XNR",0-HrA\U%cp'[1H1EN)e@n/.V42m__d`e<<\Kr9N/kSk'BJ+0&Du@H8cjO88M=FY8YGSK..ms!I=!Yjkq`Nf7NQILK=au*_cp-sKA,0NhtJjF%K7'"H2%%:"!M#^E<DD7p`$[61)=QN)W<i.;@jE4)Whs;C8j]\.5<0&G3h=N8Ag'5K6?Xa`TRQbAP(^C;@cSD"?U@&lRH+DWAHC\/%N'(Ua/31I@===`:eYp(%M#m[Q'f@ikSK<<1W8OjkQoH@NC2Dek*ZdFkBk_tQDcqT/\pRY2I)PeP-4-%21fEtXK2Ya:C.$n(;<*Ph%&A50KmggqOkn!9+3bS]+o.hAMiUJtSb6t31jhU5qN(6Jc23FMtnW6>il"B2@$e%J'SX0SQc.%q*O2:u(hmjeq7q!=e<2q]bDB,#s%`9i>+?H*?QUU-&qg<o6I3m%!aKo@d$[F+U:,o7WArO@4ujiF@]$eR?p4S,ogb$'uLQLW,9IW05f@2WuUcn]D"i).]P)lMdj,eDBJ%.G2"eP!0P$*P/bQgM%ODr7&R9_pe11ptZ!IbCRTG3Fd+!"<hY:G&igkU%Y]sP0'ij!JcG8oW>+h*7een/SI';nK(<gfc5cBZJAk:%<O^WN[-[@mjV("jjV.WA/GiRq<*L0uY`'KGGdT=T\uMBLDXt2'*dZ.BLLorrL<H,t[Ia$*a5G`b4"QFuj#j&8P*Jr!24n,7/E=j@%erpCQ6GM+Ob]oSHG$'3-o#Dsja5q:pI8mp>$nTuh$_r%@!4g*/ODM5rY97&)7t84r#V=Qhd5>UjfB-Kr[^J)T&[s-r2NNt)UTD`0%`M>61#Mui/bVVF01ZbH2a>HqQ:cTMnc"g<Sn_IoG?+T?.5\HSJrJgRiMIBm9caiRgX_02n:[g!WTgp[,cP.1U7js?,KCho;J5,bH%SI^N6TA43-;NAV'ni9cR"uICM!r&8!`?V'"g,Z::L!$)]hq86sc*S>"6Q&%/<GF+2^eeeQ`3kn]OphQ@VpAHXl$[/+A)CXaKRi3p%,5Dp`Z1r^JO:D'Yi>pna&O=b:pD(fB_<8Gu?Xh#CqXasV%#&"AH`S(*:`GQ]YEI,U,0"j&mb7#M6^K1?B!F592Xae:PTXo7(KRGO%c!K[3o2L99FT(WEduKY@27ago4t'2P!O1kt\QKX-XIL#a;1h^!VNuVLkQ5e$j66?@7-Wt^U$ZNP#*Gr)aHm=ZVO&hIB,ff5/-in9%UU=@2@ZM&aHE"cokT!VbV5raPX1h0MI3NI#cLHLFjY;2oIC%Z/mE>6j_>3VOI'<',nFW[KZJFCrq/:WWa'VCHOgrfOrDS43DuXHs%q\M^8L$&dUU\)9HXr%AhQ!8M.gHPuVF^-B>?j_t$Idh)40YB2$H,j7<bJsu;lAMIb3V`IGOJEZ_f\FU3gQ0La/=WG1KZch6KaDV9%3VaA5Qd$:.bbD;pMdb!EI+R:ndW6kZ<Q\3Lb$4KTSpT'/5$Y_b6/<J2lt9h-\OhgN6WU2jcl:;]1c,sR_tBJ3Ic*sNnmHLic]j"+%[2K<Td^_GFc&a;Ad6k2`;'[WA_.3=s@!(%7K1h)X>HU&L+CmS/+FFnK3po(*%QJR%R)ka[(g(uGaN?%q,&g&F(%K^0A$]isH^2hr%#t,,IP9#ZG#fjJkII]FTjKRibn7?_p3ma:l^'W,lZQeb]A)#U%'%JE))_1?J$3AR/E"[n4d)MlO5if%#+QJQMh)jM(!@%9Dn)"9!%49:"T1%PFJ(qX)Ep2[BZC877^J)l#/WDAuQ[9$)2Ep97`B?<dsZGP.n$u/@:CC#8ngs&csb+,Iul.@E1rQl>&\u8Na6moc#\qRgT%1s:oHL,70pmHt:D)b0o!,R`(t2-/%mEt"B%Yi/a=Y"?@G,)ZIP=-a\69fa;GrOZZ5):`=?D(eH/JkX]/YXJ=[QBkf;MhZ]io6h14%RfadRen4Xs8)[.:Q?",hI]\b8$L*6[A<1V0%-bCu+f1WPLgWO&N<>$c`k$3em+4)sRoAK$4sh']8bOYD4u?Q4+;E<>]5Ejr!.[]&%d)D$Y$.<t*3AffC&/\_@_8JMV=%%%AGZgp$+-pfN0%;?=FiXiO\@D_^Vt:a2`mq.^K<#sNI>=\o;6HeXFM[kg/nW<2aZCUgUi_\p%K\r>sS@OlS-5.C^2`&KP)<TkYR3S:X'%6lgDVlkXB@nu%rLEdT?:GT=dl$3n];CRUR"aS3C\"4VAnmYUC_p<J9=]_GP)I`R9>X`4%U-Fn4V8qY+U>e>MWThTfXmD7sFJn8sS'4jB@$3iHh:7s3T21i&$i\,.o8(5\\uqYh5]GK2L3gE[a%og;i>(AV"ZGbNq8Dud(DQ8p%/"_u=8^'YCY1[rMlfUQeG#tbSUT;"dkSD#CN$[KE23^25EY(Gh0f0iD*_TEFK4ubSOLf$['RLd".b6e<3Mt3E_REe:d+he/Q,Wui%J.I)f/Kp[/-S>M`q'BY/ft.#[I"D+&6h@TJ@`Uhb6#-it+"II5%Fm$A_^)OeCh9U6i76/5=KD!TIA^#5NKl!iiYLQG4(mt=PrWB?%'D^&/,k^\FY#'m#h331!(><LRWp>rS\X7%#W.ZGtaLS="M7GmVHC*YbbeKG)^41^u2Klt`nfGl$'T-@`-bZ#&2^R2r%qs$1.;g7_%$-\k'+uG3j&p*#iJPi:HVGW[94B3q6S]TROU*8a;$cS46!D1K>,mb8<pKq>];8'pH$M/1[]et5VXu7?5Ip9X;@V'S7+/$_T@"b[k%Xbko3b_q&m-e+4B:19*TP+Rp$9p-</[e_!'<*>X!+g!9H39m9@X&$E0M`u22+#1Ki2'2+[\usrLNC>HkP93Nh?N\bG]hm=Gp&/=,%'k7UKj/+<A,*u)O9MrkSX2(Gc%^UD-JQ_0QQVK/b*\gde%ALl^aPf!cGYs<c*=<<`'G)?9">g,;6dt$_eQ#N]^D;+rlBn>I`a!FR%Ro=f';u*fMAnU@d&gT(.;,u*CRMH*O[X%GUZP@f/Ff)r:pkhR.kV'j"]&h5e4]SfCf(KLuad[5#,K9s+([0cZS5kRdNI8hMG1,Mu%;E`l0<AD]i&YE:*oNXPF:)/'FUo9*\<UT7qV+TqtPRG(kj>gJ.V5R=fGfmRGT#\Z0(I295hXb,p8]A2fJ<HR3Z1#XRM4Wg#f7HL*%;gkOZS1l%p0M?6B9?b.6oWI9^1Sm$[qhXY5:dOUKK]P7$Ym;nB808kPEejX^Ytc>7KDn>M]O5U?R7o=2f;OB+R=F/3U,k]?U.h2Z%0h$gVP'8@N3^fn?@6ue2,<p7.0+843*DcPe[CW@'_qB<u4&5HlD1!F"fKP=+=otG0IMeR4i`+3V!GN=<8RiF(O1%?mN(n7Ki]Jo)%;\lWO7^#/Q!._fTX^9BmE4te0Z09YCR(`&@bf4)@oSdL=$q[AFCg@^l!*lYEdn[?@K3[`I>ZX;$G3^W/13<eXfdj2!Vl`=#Xi4R5%/qZ02.%eOfkK3n:cB3GC<R\8!6#TS*.VN[Xh`bijl**q047MSU&N\_jFG-Z+k<"&PfT*rsYRH`20TnB$cnfdTop-*&D%,)Ip9A)$%`SWA`WZL1)ceMIuVkt2p9Y$ro+!0e?)u]8JBi\GtpsX4K&*j[pc2)E1[I7,%(`+O^3D5pCjk),\Z#qfDR`In6?(/?"9!@nWX6$,h%;(bB3PV^iYe02J8f$-oa_QHUEip8i\q/p7k''nM6O1P+C.g"4qD:cTMcD@ZtTj,IC1oXIdgq!)W8j!/X^LU<Z/<a^^RFmoW/c8er%'NWCb.A*4GQS,HtpAJD8])uB9j^5Kq:O3,bX]4Xj!QD5'+21(K(sm+lY;KXJr)kt$lj4%Hr6klVWU+k,Q*Gb9dg[t1)IF^(cRQK'%9$.4JE9*V5/8d^t:BdP:]&h.!!'8TuQ7A.[oO'U93puL#W_('OrJ$Y<Z6O$+hGX0P!CUh)YX$ZV$'.TR&19jhnWjOFa\=q^GY8dR%k^#l*WuZk//jOST00:2.GY@/A*u_b0lOk)0ohnM&WQ]<05#4k2IFVC9bD2UX[_*+\=rTTh&"WgdaS2$`q=0!^Zm[@.ZY;,p[*esl%MeNbp$0_fXeirV=lm8&&O\=sro=l+Oi?)3@VF<IAp;OCpb_:,]7S:1TNn(YlVg5R.:\3=EZZ.]#3nse0N@km<)%SULS$>caZ)mVf%H?Gfhf?EsE4?r/V\EN>+V-HJbaT^r%-#kG:d3Hg/dV&2uSsDW)'OKibX>f0K`a")1buQ?%@fGak^PkZ6#+C&<!2W-,3I\hC%Bl.Q%WR3/ofR3j'O\^Q#8jF1.pklW)N;TF0nn'hOZ>.b<8*i$\M^Y/jQ(%)p34]:XF#+UU`J+S%"sFggP`f(&m*,@+*`0unN6[[uCs'5(%m*W>qrl(^NjR"&2.UD&0"=H.9U3M*r?n4$S[HWZOE:-83?c#bL:<<Y#eKnqtkt)Q2g_l/j=h;o/k55He.mLeB;qI.5=g1asV6/fO%Nos=%4R!-12^8Mg[8q:n4\_iePg;LA7uIfo&pu&PnD:jGoT7Zj.b`Cnf6W6smhE<W=XB)&98RhG/gKeO[H1:dA'9I%[9Kh6+'u$G%1TYVNrFGP.4FkqNN`l73O@^k#$TSDi->_l"qr?OKmghQqWme`qlV&\pcP<eN5@Egpo*`cD(jt%@I>23^)0i60IYEK@E:bjHcq4S!%WNg"j+aiIkd5]@'n=Gi%+ZC'p@:S/@GNe^C*WqVOG,a!`h4!W8\B_)%hjJDPc>u%iC&T-_)V/s>cQO12CPonoVGlC&rX,uk@19bN%HcE^ZO=\)j0/.XH]j_V1%S&L"GL1=m)$I#/#>nf=kktq7k82!3@C$Q(j<^>K&FH)a8U7:0h!XN2-66spGd$B9g?IH1(A&G#AjR"R%D!6Er+UgI(4C^"nqZM2aeCOs4Q/S!VXk!A<NpBF>^Y`:VY'Km-EeG\oNQImLjiFZuFZJ0DDACjI/0Rht9ql.I]1?bM:XCP.argGs%=/]sEn>A2SK,c[*e=6s1NS[_bW0uhi"-eX:50i_TV,)k1%eKn?O.?Xcp^i]5A+a&G7E(P#gA;is#snNV%XNZ*#:$p(_)%B4OB@[6%Ms`K;RDO*'\:kbHG9c)u0?t0#[j?Z4-r(\(2f]InJI_n'B66LVD'kqII)E,rP0!Ddjq?2^(!2Y,;fAIr)(=E[InL2WF1!a5[C1t.%4"lh;>Y@NHji^$qH3=X@\Ls6NYmM@-Ri6I&hh66L*:oIX*>aafQ:0q!\X8@lmtlC@7?S8_M[h?$-k[2\6'=KH&t!0lN?*djd&Z7b%QORrE!]Gf.[[`e?!\RC&OA8'J3b)*II39d;FO5[i[E2\_KYC<7!D@GQJia-/):rhl*rFZ^JoDDpr'`(=jgm'tW^[?Wl>Yjrf?@2m%Xk!6mM"dlY.Y8dR;Msa+QGJeYg_oi]\bFnV6Z9Oh`R*5cdNTWt0+Le^`3K1G6LlqW:'B>5(XStIg'<g+aEVr[:j#ckp/]NiEa<sj%7q>UQHFZrfmh0W2BmO.+Wrrtu]3`f(=rhr*L\\LL9E4&K8eR.QWVnkHn!rC><9BL.gN[/"qDG!8=!4u:BXtY!;@uHIC&f9"G'PUG%XeJ3Q&D;2tTNHKU\&:9h@e&]cC<R?E0V]S?=#(]cU6JAb'8J>r,0+YE9=O7!N8d6XBB=8EkEO$Y*]pPiCY<GFg+TS8<!kRR@QXlA%4Gj<<aU9k(6UUVhh</=fSBMAXTlR+E>?M!KhtN^s;iK:+(%!@s`;)//T!@`9S]s00NtsF`^K^^Gp9A'gD6E]`#=uW-l\rtrDRVY@%>O"K+hQ[]@JC9dffO>.QZte4+`jYNrW'nZq!ir(a)r"gJOg/p5$AVnLpI&dC'@q[[*#lhj.uF)'p4NjGG5.V;E.?:3PS-+JC9A&-%L:RCgR6p0W%G)odE/,q^H`IAR7;1i=7?*+$"WHlm.2DM0cLhp\4d`f;$+Z-,^)]eIF3J4RKNq8Y?';'@jYAd7UL3H&(RKsWQe:5C%d6L[g9Yd.M>G*$\\]CH()t](Vq:PB%2(6Q*S:kYjZ'E5m>2i?[8aU[0=%2.$&Xm=?p$*+%j\f+mcit:h$C,Ep;`a'pWLCd608e0*%?tK7Z_9'LO!-Zgrfc_;4iomm9g\/Rm"0#jlH2ES]Mo[DAJi&cefZ%uSa1]sY+$*:InGi@I(]XCL^\[Ju^\lpb:VZecpV6Oo5MlD*%"oT'G@f5]@hYuMarq,7>IfJ03?iKoR^NtD0pWpVSiMYS+kb#QeQ`D7Q$%ML>hu2]tm?bTaS+H#c56(#*++JV6oah*%qg\FZgY`&!%\,Z:<bMhQn0?a=MGMd2@\m7\ul[lnNiMW;spsbbqq8\Bl_[ldeErYP'n!iq9Q[e`&O8o*H^\d[_^\H@:*<5q<^]0Y8qosV<pZ%nG%q)?(``W,_XDnl1)++NmoO7.Pqk-oj8c2[b1m5Mf[4^.[;^Kl>7qsBI%rSaXrIf/X$&-)LDrr[:i@`<ieMnf,WJ,RXl#Q)dk\,~>%AI9_PrivateDataEnd
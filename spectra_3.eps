%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: spectra_3.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Troy Carter
%%CreationDate: 6/4/12
%%BoundingBox: 0 0 201 174
%%HiResBoundingBox: 0 0 200.5205 173.8735
%%CropBox: 0 0 200.5205 173.8735
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.2 x399 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 112 8%%BeginData: 10176 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD14FF27F827F827F827F827F827F827F827F827F8F8F827F827F8%27F8F8F827F827F827F827F827F827F827F8F8F827F827F827F827F827F8%27F827F827F827F8F8F827F827F827F8F8F827F827F827F827F827F827F8%27F827F827F827F827F827F827F827F827F827F827F827F8FD14FFF87D7D%A87DA8FFFFA8FFA8FFA8FFA8FFA8FF7DFFA8FFA8FFA8FF7DFFA8FFFF7DA8%FFFFA87DFFFF7DA8FF7DA8A8A8FFA8A87DA8FFA8FFA8FFA8FFA8FFA8FF7D%A8A8FFA8FFA8FF7DA8A8FFFFA87DFFA8FF7DFFFFA87DFFA87DFFA8A8A87D%A87DFFA8FFA8FFA8FFA8FFA8FF7DF8FD14FF277DFFFFA8A8FD2BFF7DFD2B%FFA8A8FD0BFFA8F8FD14FFF87DFFFFA8FD2DFFA8FD2BFFA8FD07FFA8FFFF%FF7DF8FD14FF27A8FD4AFF7D527DFD0DFF7D7DFD09FF7DA8FFFFF8FD14FF%277DFD08FFA1FD40FF7D27FF7DA8277DA87DA8FF7DA87DFFFFA8527DFF7D%A8FF7DA87DFF7D527DFF7DF8FD0FFF52FD04FF27A8FD08FFBC93C2CAFD2C%FFCF9AC29AC29AC29AC299CAFD06FFA85252A8A852A8A85252A8522752A8%7D52527DA85252A87D277D277D27A8FFFFF8FD07FFA87DFFFD05A87D7DFF%FFFFF8A8FD09FFCA9A9393CAFD2AFFCAC3A0C3A1C3A0C3A1C3A1FD07FFA8%7DF8A852FF7D7D27A87DA87D7D27FFFD047D277DA87DFF27FF7D7DFFA8F8%FD07FF7D52FF7D527DFFA852A8FFFFFF27A8FD0CFFC393BCC3FD39FF7D52%A852FF7D7D527D52FD047D527D5252527D5252527D52FF527D277DFFFFF8%FD08FF52FF52FF27FD07FFF8527DFD0DFFA1BC93C2A8FD37FF7D7DA8FFA8%A8FFA87DA87DA87DA8FFA87DA8FFA87DA87DA8FFFF7DA87DA87DF8FD07FF%A852FF527D52FD07FF2727FD10FFCA9AB599CAFD52FFA87DF8FD07FF7D52%FFA87DA8FD07FFF852FD12FFCAC29299A1FD51FF7DF8FD14FF2752FD15FF%C3BB93C9FD4FFF7DF8FD14FF277DFD17FFC993B5A0FD2EFFA87DFFA8A8A8%FD10FFA87DFD07FF7DF8FFFFFFA8FD10FF277DFD19FFC3BC93C3CAFD2BFF%A8F87DFF27A8FD0FFFA8525252FD06FFA8F8A8FD0452A8FD0EFFF87DFD1B%FFCA99939ACAFD18FFA97F7FA37F7F7FA37F7FA3FD07FF2727A87DA87D52%52A8FFA8522752FFA8527D52A8527DFF27A8FD05FF7DF8FFA8FFFFFFA8FD%0EFF277DFD1DFFCAC393BCCAFD16FFA92B554F552B554F552B7FFD06FFA8%A8A8277DFF27FF527DFFFF52A852A87D525252A87D7DFF27FD06FFA8F8FF%FF52527DFD0FFFF8A8FD20FFA09393C9FD25FFA852FF52F8A852A8527DFF%FF52A8527DA87D7D7DFF7D527D52FD07FFF8FF7D7DFF52A8FD0EFF2752FD%1DFF4FA3FFFFFFC993BBC3FD23FFA87DFFFF7DFFA87D7DFFFFFF7DA87DA8%FD06FF7D7DA8FD06FFA8F87D52277D27FD0AFF7DA8FFFFFF27A8FFFFFF52%F8FD042752275227525252277D7DA8A8FD06FF79034FF979FD04FFA1BB93%C3A8FD3FFFA8F8FF52A8A8FFFFFFA8A8FFFF7DFFA8A827FD04FF27A8FFFF%FFA8A87DA87DA87D7D527DFD055227F82727527DCF7F4F4FFFFFFF2555FD%05FFCA99BB9ACAFD3EFFF8FF7D277D7DFFFF7D52FF527D52A8A8527DFFFF%FF27A8FD14FF7D7D5227F800007DA7FFFFFF2B2BA9FD05FFA8C39399A1FD%3BFFA8F8FFFF7D527DFFFFA87DFF52FF52FD07FF2752A8A8FD14FF79257F%A87D2727F8527DFF792BA3FD07FFC3BC93C3CAFD1BFFA8FD1BFF7D7DF8FF%A8272727FFFFA827FF527D52FD07FFF852FD12FF7F792B252AFD05FFA8A8%5227F852292BFD09FFCA999399C9FD17FF7D277D52A8FD1AFF52F8FF7DA8%5252FFFF7D7DA8FF7DFD08FF2752FD0FFF7F552B2B4FA3A9FD0AFFA85227%007DFD0BFFC393BCC3FD15FFA852A8A8A87DA87DA87D52A8FD13FF7DF8A8%A8FFA87DA8FD0EFFF87DFD0CFF794FF92B55A9A9FD0FFFCF53002627FD0B%FFA1BC93C3FFFFA827F8272727F827272752FD07FF277D52FF52277DFF27%A827A8FD12FF7DF8A852FD047DFD0EFF277DFD08FFA9554F255579A9FD14%FF7F4FA852F852A8FD0AFFCA93BCCAFFFD09A8FD07FFA852FD04FFF8A8FF%52FF527DFD12FFA8F8FFFF7DA8A8FD0FFFF87DFD08FF2A557FFD19FFF9FF%FFA827F827A8FD0AFF9A93A0FD10FFA8277D527D525227A8275252FD13FF%7DF8FD14FF277DFD24FF557FFFFFFFA852F852FD0AFFCABB99FD11FFA8FD%05FFA852A8FD15FFF8FF7D7DFFA8FD0FFF277DFD24FF554FFD05FFA827F8%7DFD0AFFC392C3FD16FF7DFD15FF7DF8FFA827277DFD0FFF27A8FD24FFCB%25FD07FF7D2727A8FD09FFCA93C2FD2CFFF8FFA8277D7DFD0BFFA8FFFFFF%F87DFD25FF2B7EFD07FFA852F852A8FD09FF9399CAFD29FF7DF8FFFD047D%A8FD08FFA852FD04FF27A8FD25FF5579FD09FFA82727A8FD09FF99BCFD2A%FFF8FFA852277DFFFFA87DFFA87DA8A87D7D7DFFFFFFF8A8FD25FFA925FD%0BFF52F852FD09FF9A93CAFD28FFF8FF7D527DA8FFFF7D52FF7D7D52A8A8%7DA8FFFFFF277DFD26FF2BA9FD0BFFA82727FD09FF9AB5CAFD25FFA8FFF8%FFFF7D5227FFFFFF52FF52FF27FFA8FD05FFF8527DFD25FF2B79FD0CFFA8%27F87DFD08FF9A93CAFD23FFA87D52F8FF7D2752FFFFFFA852FF7D7D7DFD%07FF2752FD26FF7F2BFD0EFFA8F852FD08FFC3B5CAFD24FF7DF8FFFF7D27%27FFFFA87DFFA8A8FD08FF2752FD26FFA925A9FD0FFFF827A8FD07FFA093%A8FD23FF7DF8FFA85252FD10FF2752FD27FF2B7FFD10FF52F87DFD07FFC3%93CAFD22FFA8F8FFA8525252FD0FFFF87DFD27FF7F25FD11FF7DF852FD07%FFA093A8FD21FF7DF8FF52A8FF52A8FD0EFF277DFD28FF2B7FFD11FFA827%27FD07FFA1BBCAFD20FFA8F8FFFF525252FD0FFFF87DFD28FF552BFD12FF%A82727FD07FF9ABBFD20FFA8F8FF7D7DA8FD10FF277DFD29FF25A9FD13FF%27F8FD07FF9ABCFD1FFFA8F87D7D52A8FD10FF27A8FD29FF554FFD14FF52%F8FD07FF93BCFD1EFFA8F87D527D277DFD0FFF2752FD29FFA92BA9FD14FF%52F8A8FD06FF93C3FD1DFFA8F8A87D7DA87DFD09FF7D52A8FFFFFF27A8FD%2AFF2B79FD15FF7DF852FD06FF92C3FD1CFFA8F8FD07FF7D7DFFFF52FFA8%5252A8FFFFFF27A8FD2AFFA925FD17FFF852FD05FFCA92CAFD1CFFF852A8%FD05FF7D27FF527D52FFA87DA8FFFFFFF8A8A8FD2AFF4F55FD17FFF852FD%05FFC992CAFD18FFA8FFA8F87D2752527DFFFFA87DFF52FF52FD07FF2727%A8A8FD29FFA92BA9FD17FFF87DFD05FFC393FD19FF7D52F8527DA8FFA8FF%FFA827FF527D52FD07FFF852FD2CFF2B55FD17FFA8F852FD05FF9A99FD19%FF7DF87DA8A8FD04FFA87DA8FF7DFD08FF2752FD2DFF25A9FD18FFF827FD%05FFB5A1FD18FF7DF852A8527DA8FD0FFFF87DFD2DFF552BFD19FFF852FD%04FFA892A1FD17FF7DF8A827525252FD0FFF2752FD2DFFA92BA9FD19FFF8%7DFD04FFC3BBFD17FFA8F87DFF7DFD11FF277DFD2EFF2B7FFD19FFA8F852%FD04FF9ABCFD16FF7DF87DA8527DFD10FF277DFD2EFF7F2BFD1BFFF87DFD%04FF93C3FD15FFA8F87D52275252FD0FFFF87DFD2EFFA92BA9FD1AFFA8F8%7DFFFFFFCA8CCAFD14FF7DF8FD14FF27A8FD2FFF4F79FD1BFFA8F8A8FFFF%FFCA93FD15FFF8FFA87DFD0BFFA8FFA8FFFFFFF87DFD2FFFA925FD1CFFA8%F8A8FFFFFFBC99FD13FF7DF8FFA87D5252A8FD08FFA852A8FFFFFF27A8FD%30FF2BA3FD1CFF7DF8A8FFFFFFBBC3FD13FFF8FFA8FD0452A8A852FF7D7D%A8A8A87DA8FFFFFF27A8FD30FF544FFD1DFF7DF8A8FFFFA893A8FD11FFA8%F8FF7DA8FFFFA8FFA852FF7DA852A8FFA8FD04FF27A8FD31FF25A9FD1DFF%7DF8FFFFFFC3BBFD10FFA8FFF8A827527D27FFFFFF52FF52FF27FD07FF27%277DFD30FF554FFD1EFF52F8FFFFFF99BCFD0EFFA87D27F8FF527D52A8FF%FF7D52FF7D527DFD07FF2752FD31FFA92BA9FD1EFF2727FFFFFF93CAFD0F%FF7DF87D7D525252FFFFA87DFFFFA8A8FD07FFF852FD32FF2A55FD1EFFA8%2727FFFFC992FD0FFF7DF8FFA8FF7D7DFD0FFF2752FD32FFA925FD20FFF8%7DFFFFBC9AFD0EFFA8F8FF7D277D52FD0FFFF87DFD33FF5555FD1FFF7DF8%7DFFCA93A1FD0DFF7DF8FFA87DA8A8A8FD0EFF277DFD33FFA92BA9FD1FFF%7DF8A8FFC3B5FD0DFFA8F8FFA8525252FD0FFFF87DFD34FF2A55FD20FF52%F8A8FF99BCFD0CFF7DF8FF527DFD11FF277DFD35FF25FD21FF5227FFFF92%CAFD0CFFF8FFA8525252FD0FFF27A8FD35FF554FFD21FF2727FFC393FD0B%FFA8F8FFFF7D7DFD0BFFA8FD04FF277DFD35FFA925A9FD21FFF852FFBC9A%FD0AFFA8F8FF7D527D7DA8FD08FF7D277DFFFFFFF8A8FD36FF4E55FD21FF%A8F8A8CF93A8FD0AFFF8FFA87D527DFFFF7D7DFFA852FFA87D27A8FFFFFF%27A8FD37FF25A9FD21FFA8F8FFC3BCFD0AFFF8FFA8F8F8A8FFFF7D52FF52%A852FFA87DA8FFFFFFF8A8A8FD36FF7FF9FD22FF52F8FF93C3FD06FFA8A8%A8F8A852A87D7DFFFFA87DFF52FF52A8FD06FF2727A8FD37FF4F4FFD22FF%5227CA92FD07FF7D52F852A8FFFF52A8FFA827FF527D52FD07FFF852FD38%FFA92579FD22FF2752C393FD07FF52F87D527D7D52A8FFA8A8FFFFA8FD08%FF2752FD39FFA9257FFD21FFA8F87DBCC3FD06FFA8F8A8FD047DFD0FFF27%7DFD3AFF7FF97FFD21FF7DF876BBCAFD05FF7DF8FD14FF277DFD3BFF7F25%79FD21FF7DF86EC3FD05FFA8F8FD14FFF87DFD3CFFA9252AFD21FF52F892%CAFD04FF7DF8FD14FF277DFD3EFF5525A9FD20FF272099FD04FFA8F8FD14%FFF87DFD3FFF7FF955FD20FFF844C3FFFFFFA8F8FD14FF277DFD41FF2B2B%7FFD1EFFA8F86FCAFFFFFFF8FD0EFFA8FD05FFF87DFD42FF7F252AA9FD1D%FF7DF89AFFFF7DF8FD0EFFA852A8FFFFFF27A8FD44FF79F97FFD1DFF7DF8%C9FFFFF8FD07FF7D52FF7D7D7DA87D527DFFFFFF27A8FD45FFA92B257FFD%1CFF2E20FFFF20FD07FF7D52FF52A852FFA87DFD04FF277DFFA8FD45FF7F%2B2BA9FD1BFF2727CAF8FD08FF52FF52FF27FD07FFF8277DFD48FF550355%A9FD19FFA8F8F8F8FD07FF7D52FF7D527DFD07FF2752FD4BFF4F257FFD19%FFCA27F8FD07FFA8A8FFFFA8FD08FFF87DFD4CFF7F2B25A9FD18FF76F8FD%14FF2752FD4EFF7FF955A9FD16FFA8F8FD14FFF87DFD50FF4E2555FD15FF%7DF8FD14FF277DFD51FFA94F257FFD13FFA8F8FD14FF277DFFFFA8FD2CFF%A8A8FD22FFA3252B7FFD05FFA8FD0BFF7DF8FD14FF27A8FFFFA8A8FD2BFF%7DFD25FF554F4FFFFFFFA8A8FD0CFFF8FD14FFF85252522752527D527D52%7D527D527D527D277D527D527D5252277D527D5252527D5252277D525252%7D27FD08527D527D527D527D527D527D2752527D527D527D2752527D5252%277D527D27525252277D5252530101282752277D527D527D527D527D527D%52F8FD14FF7D275227525252275252522752525227525252275252522752%525227FD075227FD075227FD075227525252275252522752525227525252%2752525227525252275252522752525227FD075227525252275252522752%525227FD0452FD9BFF7DFD2CFFA8FD2BFFA8A8FD20FFA8FFA8FFFF527DFD%25FFA8FD04FF7D52FD25FFA8FFFFA8A8A852A8FD1EFFA852FFA87D7DFF7D%7DFD24FF52A8FF7D52A87D52FD24FFA852FFA8527DA87D52FD1EFFA852FF%7DA87D7DA8A8FD24FF7D7DA852A852FF7DFD25FF52FF52A8527D7DA8FD1F%FF52FF52A87DA8FD26FF7DA8A87DA852FD27FF52FF7DA87DA8FD20FF7D27%A8A8527DA8FD26FF5227FF5252A8FD26FFA852A8A87D7DFD22FFA8FD2BFF%A8FD82FFA8FFFFFFA8FD7AFF52A8FFFF7D7D7DFF52A8FFFFA87DFD71FF52%52FFFF52A87D52A852A87D52A852A8FD70FFA87DFFFF52FFA852A852FF7D%52FF7D7DFD70FF527DFFFF52A87D7DFF52A8527DFF52A8FD70FFA87DFFFF%A87DA8A8FF7DFFA8A87D7DFDAEFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2012-06-04T10:40:49-07:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>224</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA4AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq+WPyQ/&#xA;I38vPOvlhtV13TzcXqahOZnC6hb+pEs86en6wnW3lrRTWFAUpRqlsVeg6J/zi7+T5iu/0l5YPMXd&#xA;wLat7fD/AEYSH0fsXH8njv44qmP/AEK5+RP/AFLP/T9qH/ZRirv+hXPyJ/6ln/p+1D/soxVQl/5x&#xA;W/JJruCVNBMdvGria3+t3xEhanA8jccl4UPTrXFVf/oVz8if+pZ/6ftQ/wCyjFVB/wDnFb8kjfRT&#xA;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&#xA;XYq7FXYq7FXYq//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2.802083</stDim:w>
            <stDim:h>2.496528</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.062;PS 2.000;hotconv 1.0.57;makeotf.lib2.0.21895</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -173.874 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 173.874 li
200.521 173.874 li
200.521 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
32.3701 150.51 mo
199.771 150.51 li
199.771 .709961 li
32.3701 .709961 li
32.3701 150.51 li
cp
clp
1.5 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
47.7939 9.58691 mo
68.8091 18.7681 li
81.1021 24.5557 li
89.8237 28.4409 li
96.5894 31.6069 li
110.839 37.5498 li
114.41 39.0557 li
117.604 40.6851 li
125.558 45.8848 li
129.897 49.2539 li
135.424 54.2598 li
144.146 62.8921 li
147.717 66.9858 li
154.706 75.0786 li
161.826 84.2388 li
169.835 95.1626 li
171.927 98.1743 li
177.454 106.465 li
185.859 119.657 li
194.179 132.807 li
195.368 134.526 li
200.505 140.993 li
202.412 142.85 li
204.032 144.153 li
205.901 145.415 li
208.277 146.717 li
210.762 147.754 li
213.447 148.594 li
216.149 149.2 li
218.738 149.549 li
220.62 149.637 li
220.62 149.637 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 .993988 1 0 cmyk
@
47.7939 42.8418 mo
68.8091 36.582 li
81.1021 29.4819 li
89.8237 36.4678 li
96.5894 59.6797 li
102.117 72.3203 li
106.79 81.0435 li
110.839 92.0317 li
114.41 99.856 li
120.494 111.764 li
123.132 116.01 li
125.558 119.176 li
127.805 121.586 li
129.897 123.479 li
133.692 126.377 li
138.619 129.588 li
146.573 134.356 li
163.205 144.002 li
177.872 152.276 li
188.014 157.754 li
195.368 161.489 li
201.282 164.247 li
206.065 166.233 li
210.052 167.653 li
213.447 168.629 li
216.383 169.247 li
218.953 169.567 li
220.62 169.635 li
220.62 169.635 li
.883665 .769161 0 0 cmyk
@
40.377 30.7959 mo
61.3921 31.4009 li
73.6846 33.6338 li
82.4067 35.9351 li
89.1719 38.3828 li
94.6997 40.7197 li
103.422 45.0811 li
113.076 50.9497 li
115.714 52.8628 li
118.142 54.8691 li
120.388 56.1631 li
122.48 57.6777 li
124.437 59.3179 li
126.274 60.6558 li
129.647 63.4067 li
132.681 66.0718 li
134.091 67.2427 li
135.439 68.728 li
136.729 69.6279 li
137.967 70.73 li
140.3 72.3965 li
141.403 73.5381 li
143.495 75.9263 li
144.489 76.688 li
146.384 78.4653 li
147.289 79.0903 li
149.854 82.0239 li
151.449 84.0239 li
152.217 84.3716 li
152.965 84.9985 li
153.696 86.1548 li
154.409 86.9692 li
155.106 87.4556 li
157.106 89.7017 li
157.744 90.606 li
158.982 91.6763 li
159.582 92.4849 li
160.171 92.9712 li
163.482 96.7192 li
164 97.5903 li
165.011 98.5317 li
165.504 99.3188 li
165.989 99.5278 li
166.937 100.817 li
167.855 102.088 li
168.304 102.336 li
169.183 103.432 li
169.613 104.362 li
170.455 104.854 li
171.676 106.079 li
172.464 107.288 li
172.851 107.508 li
173.231 108.223 li
173.608 108.504 li
175.424 110.725 li
175.775 111.028 li
176.121 111.747 li
179.384 115.737 li
179.692 115.866 li
179.997 116.573 li
180.298 116.545 li
180.894 117.147 li
181.187 117.926 li
182.048 119.145 li
185.015 122.467 li
185.524 122.989 li
185.776 123.204 li
186.026 123.786 li
186.273 124.008 li
186.52 123.545 li
187.004 125.2 li
188.414 126.635 li
188.644 126.786 li
189.541 128.014 li
189.762 128.659 li
189.981 128.801 li
190.198 128.762 li
190.841 129.827 li
191.262 130.534 li
191.47 130.831 li
191.677 130.713 li
192.29 131.368 li
192.691 132.311 li
193.088 132.272 li
193.284 132.592 li
193.673 133.336 li
194.056 133.815 li
194.623 134.536 li
194.811 134.409 li
195.179 135.198 li
195.362 135.094 li
195.545 135.286 li
195.906 135.877 li
196.084 135.987 li
196.789 137.03 li
196.963 137.104 li
197.136 137.317 li
197.308 137.321 li
197.479 137.459 li
197.985 137.37 li
198.152 137.575 li
198.484 137.477 li
198.648 138.297 li
198.974 138.506 li
200.244 140.62 li
200.86 141.043 li
201.313 141.983 li
201.463 142.03 li
201.612 141.813 li
201.76 142.239 li
201.908 142.153 li
202.346 142.393 li
202.778 142.938 li
202.921 142.881 li
203.063 143.366 li
203.345 143.413 li
203.624 143.776 li
203.763 143.575 li
204.313 144.303 li
204.448 144.012 li
204.717 143.995 li
204.852 144.502 li
204.984 144.358 li
205.117 144.036 li
205.38 145.145 li
205.772 145.497 li
205.901 145.711 li
206.286 145.616 li
206.539 146.01 li
206.665 146.047 li
206.791 146.25 li
207.164 146.127 li
207.288 146.565 li
207.411 145.518 li
207.533 141.028 li
207.777 146.635 li
208.258 147.006 li
208.377 146.877 li
208.496 147.122 li
208.614 146.952 li
208.849 131.184 li
209.082 147.063 li
209.198 147.198 li
209.429 147.893 li
209.544 147.985 li
209.658 147.84 li
209.771 147.885 li
209.885 147.522 li
210.11 147.917 li
210.222 147.87 li
210.445 148.186 li
210.556 148.188 li
210.667 148.051 li
210.886 148.26 li
210.996 148.174 li
211.429 148.583 li
211.536 148.618 li
211.644 148.219 li
212.172 148.993 li
212.277 148.778 li
212.485 148.948 li
212.692 148.805 li
212.795 148.792 li
213 148.401 li
213.103 148.649 li
213.203 148.534 li
213.405 148.233 li
213.706 148.282 li
213.905 148.319 li
214.103 147.985 li
214.201 147.983 li
214.396 147.258 li
214.494 147.17 li
214.591 147.292 li
214.784 146.235 li
215.356 141.579 li
215.45 141.934 li
215.917 143.516 li
216.286 148.624 li
216.56 149.342 li
216.65 149.167 li
216.831 149.417 li
217.01 149.153 li
217.099 149.44 li
217.188 149.356 li
217.277 149.583 li
217.366 149.329 li
217.542 149.59 li
217.63 149.641 li
217.717 150.02 li
217.804 149.948 li
217.891 149.665 li
218.065 150.006 li
218.408 150.116 li
218.493 149.883 li
218.578 149.971 li
218.748 149.711 li
218.832 148.827 li
219 150.079 li
219.084 149.883 li
219.167 150.02 li
219.499 149.606 li
219.581 149.788 li
219.745 149.106 li
219.826 147.282 li
220.07 148.913 li
220.151 148.817 li
220.312 149.235 li
220.392 149.288 li
220.631 149.67 li
220.71 149.682 li
220.868 150.305 li
220.946 150.2 li
221.025 150.667 li
221.104 150.645 li
221.491 150.719 li
221.646 150.7 li
221.798 150.874 li
221.951 150.877 li
222.027 150.581 li
222.103 150.627 li
222.178 151.01 li
222.253 150.829 li
222.328 150.723 li
222.37 150.85 li
0 0 0 1 cmyk
@
grestore
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
39.1353 .75 mo
39.1353 4.75 li
39.1353 150.51 mo
39.1353 146.51 li
false sop
0 0 0 1 cmyk
@
32.186 162.75 mo
32.186 162.334 li
33.2021 162.334 li
33.2021 157.485 li
32.0264 158.247 li
32.0264 157.733 li
33.4502 156.813 li
33.9863 156.813 li
33.9863 162.334 li
35.002 162.334 li
35.002 162.75 li
32.186 162.75 li
32.186 162.75 li
cp
ef
38.874 162.854 mo
38.2339 162.854 37.7383 162.59 37.3862 162.061 cv
37.0342 161.534 36.8579 160.797 36.8579 159.838 cv
36.8579 158.885 37.0342 158.141 37.3862 157.614 cv
37.7383 157.086 38.2339 156.813 38.874 156.813 cv
39.5063 156.813 40.002 157.086 40.354 157.614 cv
40.7061 158.141 40.8901 158.885 40.8901 159.838 cv
40.8901 160.797 40.7061 161.534 40.354 162.061 cv
40.002 162.59 39.5063 162.854 38.874 162.854 cv
38.874 162.854 li
cp
38.874 162.477 mo
39.2739 162.477 39.5703 162.262 39.77 161.823 cv
39.9619 161.389 40.0659 160.725 40.0659 159.838 cv
40.0659 158.958 39.9619 158.293 39.77 157.854 cv
39.5703 157.422 39.2739 157.198 38.874 157.198 cv
38.4741 157.198 38.1699 157.422 37.978 157.854 cv
37.7783 158.293 37.6821 158.958 37.6821 159.838 cv
37.6821 160.725 37.7783 161.389 37.978 161.823 cv
38.1699 162.262 38.4741 162.477 38.874 162.477 cv
ef
41.9131 154.76 mo
42.126 154.682 42.3276 154.622 42.5239 154.577 cv
42.7197 154.538 42.9043 154.514 43.0781 154.514 cv
43.4756 154.514 43.7891 154.604 44.0132 154.772 cv
44.2373 154.946 44.3491 155.186 44.3491 155.489 cv
44.3491 155.735 44.271 155.942 44.1143 156.106 cv
43.9575 156.274 43.7388 156.385 43.459 156.442 cv
43.7949 156.491 44.0527 156.614 44.2373 156.811 cv
44.4219 157.006 44.5171 157.258 44.5171 157.567 cv
44.5171 157.948 44.3887 158.239 44.1309 158.44 cv
43.8735 158.641 43.5093 158.743 43.0278 158.743 cv
42.8149 158.743 42.6021 158.721 42.4004 158.676 cv
42.1987 158.637 41.9971 158.569 41.7959 158.473 cv
41.7959 157.678 li
42.1035 157.678 li
42.1206 157.948 42.21 158.143 42.3667 158.278 cv
42.5239 158.413 42.7476 158.479 43.0391 158.479 cv
43.3188 158.479 43.5371 158.401 43.6997 158.239 cv
43.8564 158.077 43.9404 157.852 43.9404 157.573 cv
43.9404 157.252 43.8564 157.012 43.6885 156.844 cv
43.5205 156.682 43.2798 156.598 42.9604 156.598 cv
42.7031 156.598 li
42.7031 156.317 li
42.8374 156.317 li
43.1567 156.317 43.3975 156.256 43.5542 156.122 cv
43.7109 155.987 43.7949 155.792 43.7949 155.522 cv
43.7949 155.288 43.7275 155.102 43.5991 154.973 cv
43.4644 154.85 43.2798 154.784 43.0332 154.784 cv
42.7871 154.784 42.5908 154.844 42.4565 154.963 cv
42.3223 155.081 42.2437 155.254 42.2212 155.477 cv
41.9131 155.477 li
41.9131 154.76 li
41.9131 154.76 li
cp
ef
108.945 .75 mo
108.945 4.75 li
108.945 150.51 mo
108.945 146.51 li
@
102.026 162.75 mo
102.026 162.334 li
103.042 162.334 li
103.042 157.485 li
101.866 158.247 li
101.866 157.733 li
103.29 156.813 li
103.826 156.813 li
103.826 162.334 li
104.842 162.334 li
104.842 162.75 li
102.026 162.75 li
102.026 162.75 li
cp
ef
108.474 162.854 mo
107.834 162.854 107.338 162.59 106.986 162.061 cv
106.634 161.534 106.458 160.797 106.458 159.838 cv
106.458 158.885 106.634 158.141 106.986 157.614 cv
107.338 157.086 107.834 156.813 108.474 156.813 cv
109.106 156.813 109.602 157.086 109.954 157.614 cv
110.306 158.141 110.49 158.885 110.49 159.838 cv
110.49 160.797 110.306 161.534 109.954 162.061 cv
109.602 162.59 109.106 162.854 108.474 162.854 cv
108.474 162.854 li
cp
108.474 162.477 mo
108.874 162.477 109.17 162.262 109.37 161.823 cv
109.562 161.389 109.666 160.725 109.666 159.838 cv
109.666 158.958 109.562 158.293 109.37 157.854 cv
109.17 157.422 108.874 157.198 108.474 157.198 cv
108.074 157.198 107.77 157.422 107.578 157.854 cv
107.378 158.293 107.282 158.958 107.282 159.838 cv
107.282 160.725 107.378 161.389 107.578 161.823 cv
107.77 162.262 108.074 162.477 108.474 162.477 cv
ef
114.368 158.67 mo
112.509 158.67 li
112.509 158.379 li
113.165 158.379 li
113.165 157.579 li
111.384 157.579 li
111.384 157.282 li
113.17 154.514 li
113.713 154.514 li
113.713 157.288 li
114.492 157.288 li
114.492 157.579 li
113.713 157.579 li
113.713 158.379 li
114.368 158.379 li
114.368 158.67 li
114.368 158.67 li
cp
113.165 157.288 mo
113.165 155.114 li
111.77 157.288 li
113.165 157.288 li
ef
178.755 .75 mo
178.755 4.75 li
178.755 150.51 mo
178.755 146.51 li
@
171.866 162.51 mo
171.866 162.094 li
172.882 162.094 li
172.882 157.247 li
171.706 158.006 li
171.706 157.495 li
173.13 156.575 li
173.666 156.575 li
173.666 162.094 li
174.683 162.094 li
174.683 162.51 li
171.866 162.51 li
171.866 162.51 li
cp
ef
178.314 162.614 mo
177.674 162.614 177.178 162.35 176.826 161.823 cv
176.474 161.293 176.298 160.557 176.298 159.598 cv
176.298 158.645 176.474 157.901 176.826 157.374 cv
177.178 156.846 177.674 156.575 178.314 156.575 cv
178.946 156.575 179.442 156.846 179.794 157.374 cv
180.146 157.901 180.33 158.645 180.33 159.598 cv
180.33 160.557 180.146 161.293 179.794 161.823 cv
179.442 162.35 178.946 162.614 178.314 162.614 cv
178.314 162.614 li
cp
178.314 162.239 mo
178.714 162.239 179.01 162.022 179.21 161.583 cv
179.402 161.149 179.506 160.487 179.506 159.598 cv
179.506 158.717 179.402 158.053 179.21 157.614 cv
179.01 157.182 178.714 156.958 178.314 156.958 cv
177.914 156.958 177.61 157.182 177.418 157.614 cv
177.218 158.053 177.122 158.717 177.122 159.598 cv
177.122 160.487 177.218 161.149 177.418 161.583 cv
177.61 162.022 177.914 162.239 178.314 162.239 cv
ef
183.867 154.588 mo
183.867 155.036 li
181.996 155.036 li
181.996 156.206 li
182.086 156.139 182.198 156.094 182.327 156.061 cv
182.45 156.026 182.596 156.01 182.753 156.01 cv
183.189 156.01 183.536 156.133 183.794 156.379 cv
184.052 156.625 184.181 156.956 184.181 157.375 cv
184.181 157.813 184.052 158.149 183.794 158.383 cv
183.536 158.625 183.173 158.743 182.708 158.743 cv
182.518 158.743 182.327 158.721 182.131 158.676 cv
181.93 158.637 181.728 158.569 181.526 158.473 cv
181.526 157.678 li
181.834 157.678 li
181.851 157.942 181.935 158.143 182.08 158.278 cv
182.227 158.413 182.438 158.479 182.708 158.479 cv
182.993 158.479 183.212 158.383 183.368 158.194 cv
183.525 158.004 183.604 157.735 183.604 157.375 cv
183.604 157.024 183.525 156.754 183.374 156.565 cv
183.218 156.374 182.999 156.278 182.708 156.278 cv
182.54 156.278 182.395 156.313 182.271 156.368 cv
182.147 156.424 182.036 156.514 181.94 156.637 cv
181.705 156.637 li
181.705 154.588 li
183.867 154.588 li
183.867 154.588 li
cp
ef
199.771 136.36 mo
195.771 136.36 li
32.3701 136.36 mo
36.3701 136.36 li
199.771 .75 mo
199.771 2.75 li
199.771 150.51 mo
199.771 148.51 li
175.562 .75 mo
175.562 2.75 li
175.562 150.51 mo
175.562 148.51 li
171.99 .75 mo
171.99 2.75 li
171.99 150.51 mo
171.99 148.51 li
167.941 .75 mo
167.941 2.75 li
167.941 150.51 mo
167.941 148.51 li
163.269 .75 mo
163.269 2.75 li
163.269 150.51 mo
163.269 148.51 li
157.74 .75 mo
157.74 2.75 li
157.74 150.51 mo
157.74 148.51 li
150.976 .75 mo
150.976 2.75 li
150.976 150.51 mo
150.976 148.51 li
142.253 .75 mo
142.253 2.75 li
142.253 150.51 mo
142.253 148.51 li
129.96 .75 mo
129.96 2.75 li
129.96 150.51 mo
129.96 148.51 li
105.751 .75 mo
105.751 2.75 li
105.751 150.51 mo
105.751 148.51 li
102.18 .75 mo
102.18 2.75 li
102.18 150.51 mo
102.18 148.51 li
98.1318 .75 mo
98.1318 2.75 li
98.1318 150.51 mo
98.1318 148.51 li
93.458 .75 mo
93.458 2.75 li
93.458 150.51 mo
93.458 148.51 li
87.9302 .75 mo
87.9302 2.75 li
87.9302 150.51 mo
87.9302 148.51 li
81.165 .75 mo
81.165 2.75 li
81.165 150.51 mo
81.165 148.51 li
72.4434 .75 mo
72.4434 2.75 li
72.4434 150.51 mo
72.4434 148.51 li
60.1504 .75 mo
60.1504 2.75 li
60.1504 150.51 mo
60.1504 148.51 li
35.9409 .75 mo
35.9409 2.75 li
35.9409 150.51 mo
35.9409 148.51 li
32.3701 .75 mo
32.3701 2.75 li
32.3701 150.51 mo
32.3701 148.51 li
@
11.5459 139.469 mo
11.5459 139.053 li
12.562 139.053 li
12.562 134.206 li
11.3862 134.965 li
11.3862 134.454 li
12.8101 133.534 li
13.3462 133.534 li
13.3462 139.053 li
14.3623 139.053 li
14.3623 139.469 li
11.5459 139.469 li
11.5459 139.469 li
cp
ef
17.9941 139.575 mo
17.354 139.575 16.8579 139.309 16.5059 138.782 cv
16.1543 138.254 15.978 137.518 15.978 136.557 cv
15.978 135.606 16.1543 134.862 16.5059 134.334 cv
16.8579 133.805 17.354 133.534 17.9941 133.534 cv
18.626 133.534 19.1221 133.805 19.4741 134.334 cv
19.8262 134.862 20.0103 135.606 20.0103 136.557 cv
20.0103 137.518 19.8262 138.254 19.4741 138.782 cv
19.1221 139.309 18.626 139.575 17.9941 139.575 cv
17.9941 139.575 li
cp
17.9941 139.198 mo
18.394 139.198 18.6899 138.981 18.8901 138.542 cv
19.082 138.11 19.186 137.446 19.186 136.557 cv
19.186 135.678 19.082 135.014 18.8901 134.575 cv
18.6899 134.141 18.394 133.918 17.9941 133.918 cv
17.5942 133.918 17.29 134.141 17.0981 134.575 cv
16.8979 135.014 16.8022 135.678 16.8022 136.557 cv
16.8022 137.446 16.8979 138.11 17.0981 138.542 cv
17.29 138.981 17.5942 139.198 17.9941 139.198 cv
ef
20.7363 133.917 mo
22.1367 133.917 li
22.1367 134.342 li
20.7363 134.342 li
20.7363 133.917 li
20.7363 133.917 li
cp
ef
24.1406 131.743 mo
23.8828 131.743 23.6812 131.838 23.5469 132.03 cv
23.4067 132.219 23.3398 132.489 23.3398 132.84 cv
23.3398 133.2 23.4067 133.467 23.5469 133.659 cv
23.6812 133.848 23.8828 133.938 24.1406 133.938 cv
24.3979 133.938 24.5942 133.848 24.7339 133.665 cv
24.8687 133.485 24.9414 133.221 24.9414 132.875 cv
24.9414 132.516 24.8687 132.237 24.7339 132.04 cv
24.5942 131.844 24.3979 131.743 24.1406 131.743 cv
24.1406 131.743 li
cp
25.0308 133.799 mo
24.9077 133.938 24.7622 134.04 24.6055 134.106 cv
24.4487 134.174 24.2695 134.208 24.0732 134.208 cv
23.6646 134.208 23.3452 134.09 23.1104 133.844 cv
22.875 133.596 22.7627 133.266 22.7627 132.84 cv
22.7627 132.426 22.8862 132.096 23.1436 131.85 cv
23.3955 131.604 23.7373 131.475 24.1631 131.475 cv
24.6221 131.475 24.9805 131.649 25.2271 131.991 cv
25.4731 132.336 25.5967 132.825 25.5967 133.463 cv
25.5967 134.18 25.4453 134.729 25.1543 135.12 cv
24.8628 135.512 24.4487 135.704 23.9165 135.704 cv
23.771 135.704 23.6196 135.686 23.4629 135.663 cv
23.3062 135.641 23.1436 135.602 22.9756 135.545 cv
22.9756 134.868 li
23.2837 134.868 li
23.3062 135.053 23.3735 135.194 23.4966 135.293 cv
23.6143 135.395 23.771 135.44 23.9727 135.44 cv
24.3252 135.44 24.5884 135.311 24.7622 135.042 cv
24.9302 134.774 25.0195 134.358 25.0308 133.799 cv
ef
199.771 116.118 mo
195.771 116.118 li
32.3701 116.118 mo
36.3701 116.118 li
@
11.5459 119.309 mo
11.5459 118.893 li
12.562 118.893 li
12.562 114.045 li
11.3862 114.805 li
11.3862 114.293 li
12.8101 113.374 li
13.3462 113.374 li
13.3462 118.893 li
14.3623 118.893 li
14.3623 119.309 li
11.5459 119.309 li
11.5459 119.309 li
cp
ef
17.9941 119.415 mo
17.354 119.415 16.8579 119.149 16.5059 118.622 cv
16.1543 118.094 15.978 117.358 15.978 116.397 cv
15.978 115.446 16.1543 114.702 16.5059 114.174 cv
16.8579 113.645 17.354 113.374 17.9941 113.374 cv
18.626 113.374 19.1221 113.645 19.4741 114.174 cv
19.8262 114.702 20.0103 115.446 20.0103 116.397 cv
20.0103 117.358 19.8262 118.094 19.4741 118.622 cv
19.1221 119.149 18.626 119.415 17.9941 119.415 cv
17.9941 119.415 li
cp
17.9941 119.038 mo
18.394 119.038 18.6899 118.823 18.8901 118.381 cv
19.082 117.95 19.186 117.286 19.186 116.397 cv
19.186 115.518 19.082 114.854 18.8901 114.415 cv
18.6899 113.981 18.394 113.758 17.9941 113.758 cv
17.5942 113.758 17.29 113.981 17.0981 114.415 cv
16.8979 114.854 16.8022 115.518 16.8022 116.397 cv
16.8022 117.286 16.8979 117.95 17.0981 118.381 cv
17.29 118.823 17.5942 119.038 17.9941 119.038 cv
ef
20.7363 113.516 mo
22.1367 113.516 li
22.1367 113.942 li
20.7363 113.942 li
20.7363 113.516 li
20.7363 113.516 li
cp
ef
24.9077 112.133 mo
24.9077 111.887 24.8403 111.69 24.7173 111.551 cv
24.5884 111.417 24.415 111.344 24.1909 111.344 cv
23.9668 111.344 23.7876 111.417 23.6646 111.551 cv
23.5356 111.69 23.4741 111.887 23.4741 112.133 cv
23.4741 112.385 23.5356 112.581 23.6646 112.715 cv
23.7876 112.856 23.9668 112.922 24.1909 112.922 cv
24.415 112.922 24.5884 112.856 24.7173 112.715 cv
24.8403 112.581 24.9077 112.385 24.9077 112.133 cv
24.9077 112.133 li
cp
24.6108 113.057 mo
24.9189 113.102 25.1597 113.213 25.3335 113.399 cv
25.5068 113.588 25.5967 113.825 25.5967 114.116 cv
25.5967 114.497 25.4731 114.793 25.2324 114.995 cv
24.9863 115.202 24.6387 115.303 24.1909 115.303 cv
23.7373 115.303 23.3901 115.202 23.1494 114.995 cv
22.9028 114.793 22.7852 114.497 22.7852 114.116 cv
22.7852 113.825 22.8691 113.588 23.043 113.399 cv
23.2163 113.213 23.4575 113.102 23.771 113.057 cv
23.4907 113.012 23.2837 112.907 23.1382 112.743 cv
22.9927 112.586 22.9199 112.379 22.9199 112.133 cv
22.9199 111.809 23.0317 111.551 23.2559 111.36 cv
23.4795 111.17 23.7935 111.075 24.1909 111.075 cv
24.583 111.075 24.8965 111.17 25.1206 111.36 cv
25.3447 111.551 25.4619 111.809 25.4619 112.133 cv
25.4619 112.379 25.3838 112.586 25.2383 112.743 cv
25.0923 112.907 24.8799 113.012 24.6108 113.057 cv
25.0195 114.116 mo
25.0195 113.825 24.9468 113.6 24.8013 113.438 cv
24.6558 113.276 24.4487 113.192 24.1909 113.192 cv
23.9277 113.192 23.7261 113.276 23.5806 113.438 cv
23.4351 113.6 23.3623 113.825 23.3623 114.116 cv
23.3623 114.407 23.4351 114.637 23.5806 114.799 cv
23.7261 114.961 23.9277 115.04 24.1909 115.04 cv
24.4487 115.04 24.6558 114.961 24.8013 114.799 cv
24.9468 114.637 25.0195 114.407 25.0195 114.116 cv
ef
199.771 95.8735 mo
195.771 95.8735 li
32.3701 95.8735 mo
36.3701 95.8735 li
@
11.5459 98.9106 mo
11.5459 98.4946 li
12.562 98.4946 li
12.562 93.645 li
11.3862 94.4067 li
11.3862 93.8931 li
12.8101 92.9731 li
13.3462 92.9731 li
13.3462 98.4946 li
14.3623 98.4946 li
14.3623 98.9106 li
11.5459 98.9106 li
11.5459 98.9106 li
cp
ef
17.9941 99.0142 mo
17.354 99.0142 16.8579 98.7505 16.5059 98.2212 cv
16.1543 97.6938 15.978 96.9575 15.978 95.9985 cv
15.978 95.0454 16.1543 94.3013 16.5059 93.7739 cv
16.8579 93.2466 17.354 92.9731 17.9941 92.9731 cv
18.626 92.9731 19.1221 93.2466 19.4741 93.7739 cv
19.8262 94.3013 20.0103 95.0454 20.0103 95.9985 cv
20.0103 96.9575 19.8262 97.6938 19.4741 98.2212 cv
19.1221 98.7505 18.626 99.0142 17.9941 99.0142 cv
17.9941 99.0142 li
cp
17.9941 98.6372 mo
18.394 98.6372 18.6899 98.4224 18.8901 97.981 cv
19.082 97.5493 19.186 96.8853 19.186 95.9985 cv
19.186 95.1177 19.082 94.4536 18.8901 94.0142 cv
18.6899 93.5825 18.394 93.3579 17.9941 93.3579 cv
17.5942 93.3579 17.29 93.5825 17.0981 94.0142 cv
16.8979 94.4536 16.8022 95.1177 16.8022 95.9985 cv
16.8022 96.8853 16.8979 97.5493 17.0981 97.981 cv
17.29 98.4224 17.5942 98.6372 17.9941 98.6372 cv
ef
20.7363 93.356 mo
22.1367 93.356 li
22.1367 93.7817 li
20.7363 93.7817 li
20.7363 93.356 li
20.7363 93.356 li
cp
ef
25.5684 91.2681 mo
23.9727 95.0708 li
23.5635 95.0708 li
25.0869 91.436 li
23.1997 91.436 li
23.1997 91.9399 li
22.8804 91.9399 li
22.8804 90.9868 li
25.5684 90.9868 li
25.5684 91.2681 li
25.5684 91.2681 li
cp
ef
199.771 75.6294 mo
195.771 75.6294 li
32.3701 75.6294 mo
36.3701 75.6294 li
@
11.5459 78.7505 mo
11.5459 78.3345 li
12.562 78.3345 li
12.562 73.4858 li
11.3862 74.2461 li
11.3862 73.7339 li
12.8101 72.814 li
13.3462 72.814 li
13.3462 78.3345 li
14.3623 78.3345 li
14.3623 78.7505 li
11.5459 78.7505 li
11.5459 78.7505 li
cp
ef
17.9941 78.854 mo
17.354 78.854 16.8579 78.5903 16.5059 78.061 cv
16.1543 77.5337 15.978 76.7974 15.978 75.8384 cv
15.978 74.8853 16.1543 74.1416 16.5059 73.6138 cv
16.8579 73.0859 17.354 72.814 17.9941 72.814 cv
18.626 72.814 19.1221 73.0859 19.4741 73.6138 cv
19.8262 74.1416 20.0103 74.8853 20.0103 75.8384 cv
20.0103 76.7974 19.8262 77.5337 19.4741 78.061 cv
19.1221 78.5903 18.626 78.854 17.9941 78.854 cv
17.9941 78.854 li
cp
17.9941 78.4771 mo
18.394 78.4771 18.6899 78.2622 18.8901 77.8228 cv
19.082 77.3892 19.186 76.7251 19.186 75.8384 cv
19.186 74.9575 19.082 74.2939 18.8901 73.854 cv
18.6899 73.4219 18.394 73.1978 17.9941 73.1978 cv
17.5942 73.1978 17.29 73.4219 17.0981 73.854 cv
16.8979 74.2939 16.8022 74.9575 16.8022 75.8384 cv
16.8022 76.7251 16.8979 77.3892 17.0981 77.8228 cv
17.29 78.2622 17.5942 78.4771 17.9941 78.4771 cv
ef
20.7363 72.9561 mo
22.1367 72.9561 li
22.1367 73.3818 li
20.7363 73.3818 li
20.7363 72.9561 li
20.7363 72.9561 li
cp
ef
23.3511 72.4243 mo
23.4741 72.29 23.6143 72.1836 23.771 72.1162 cv
23.9277 72.0488 24.1016 72.0156 24.3027 72.0156 cv
24.7061 72.0156 25.0308 72.1387 25.2661 72.3853 cv
25.5015 72.6313 25.6191 72.9619 25.6191 73.3818 cv
25.6191 73.7964 25.4902 74.1265 25.2383 74.373 cv
24.9805 74.6196 24.6445 74.7427 24.2188 74.7427 cv
23.7598 74.7427 23.4014 74.5747 23.1548 74.2329 cv
22.9087 73.8916 22.7852 73.3984 22.7852 72.7603 cv
22.7852 72.0488 22.9307 71.4946 23.2222 71.1025 cv
23.5132 70.7104 23.9277 70.5146 24.4653 70.5146 cv
24.6108 70.5146 24.7622 70.5313 24.9189 70.5537 cv
25.0757 70.582 25.2383 70.6211 25.4063 70.6772 cv
25.4063 71.3491 li
25.0981 71.3491 li
25.0757 71.1699 25.0029 71.0298 24.8853 70.9292 cv
24.7676 70.834 24.6108 70.7832 24.4092 70.7832 cv
24.0508 70.7832 23.7876 70.918 23.6143 71.1865 cv
23.4404 71.4556 23.3511 71.8696 23.3511 72.4243 cv
23.3511 72.4243 li
cp
24.2412 74.4795 mo
24.499 74.4795 24.6948 74.3896 24.835 74.1992 cv
24.9692 74.0093 25.042 73.7402 25.042 73.3818 cv
25.042 73.0293 24.9692 72.7603 24.835 72.5698 cv
24.6948 72.3794 24.499 72.2842 24.2412 72.2842 cv
23.978 72.2842 23.7764 72.3794 23.6421 72.5586 cv
23.5078 72.7437 23.4404 73.0068 23.4404 73.3481 cv
23.4404 73.7124 23.5078 73.9922 23.6475 74.1885 cv
23.7822 74.3843 23.9839 74.4795 24.2412 74.4795 cv
ef
199.771 55.3867 mo
195.771 55.3867 li
32.3701 55.3867 mo
36.3701 55.3867 li
@
11.5459 58.3496 mo
11.5459 57.9336 li
12.562 57.9336 li
12.562 53.0859 li
11.3862 53.8457 li
11.3862 53.334 li
12.8101 52.4141 li
13.3462 52.4141 li
13.3462 57.9336 li
14.3623 57.9336 li
14.3623 58.3496 li
11.5459 58.3496 li
11.5459 58.3496 li
cp
ef
17.9941 58.4541 mo
17.354 58.4541 16.8579 58.1899 16.5059 57.6621 cv
16.1543 57.1338 15.978 56.3979 15.978 55.438 cv
15.978 54.4858 16.1543 53.7417 16.5059 53.2139 cv
16.8579 52.686 17.354 52.4141 17.9941 52.4141 cv
18.626 52.4141 19.1221 52.686 19.4741 53.2139 cv
19.8262 53.7417 20.0103 54.4858 20.0103 55.438 cv
20.0103 56.3979 19.8262 57.1338 19.4741 57.6621 cv
19.1221 58.1899 18.626 58.4541 17.9941 58.4541 cv
17.9941 58.4541 li
cp
17.9941 58.0776 mo
18.394 58.0776 18.6899 57.8618 18.8901 57.4219 cv
19.082 56.9897 19.186 56.3257 19.186 55.438 cv
19.186 54.5576 19.082 53.894 18.8901 53.4541 cv
18.6899 53.022 18.394 52.7979 17.9941 52.7979 cv
17.5942 52.7979 17.29 53.022 17.0981 53.4541 cv
16.8979 53.894 16.8022 54.5576 16.8022 55.438 cv
16.8022 56.3257 16.8979 56.9897 17.0981 57.4219 cv
17.29 57.8618 17.5942 58.0776 17.9941 58.0776 cv
ef
20.7363 52.7964 mo
22.1367 52.7964 li
22.1367 53.2217 li
20.7363 53.2217 li
20.7363 52.7964 li
20.7363 52.7964 li
cp
ef
25.2271 50.4272 mo
25.2271 50.8755 li
23.3564 50.8755 li
23.3564 52.0459 li
23.4463 51.9785 23.5581 51.9336 23.687 51.9004 cv
23.8101 51.8667 23.9556 51.8496 24.1123 51.8496 cv
24.5493 51.8496 24.8965 51.9731 25.1543 52.2192 cv
25.4116 52.4658 25.5405 52.7964 25.5405 53.2163 cv
25.5405 53.6528 25.4116 53.9893 25.1543 54.2241 cv
24.8965 54.4648 24.5327 54.5825 24.0679 54.5825 cv
23.8774 54.5825 23.687 54.5601 23.4907 54.5156 cv
23.2891 54.4761 23.0879 54.4092 22.8862 54.314 cv
22.8862 53.5186 li
23.1943 53.5186 li
23.2109 53.7817 23.2949 53.9834 23.4404 54.1177 cv
23.5859 54.2524 23.7988 54.3193 24.0679 54.3193 cv
24.3535 54.3193 24.5718 54.2241 24.7285 54.0337 cv
24.8853 53.8433 24.9639 53.5747 24.9639 53.2163 cv
24.9639 52.8633 24.8853 52.5947 24.7339 52.4043 cv
24.5771 52.2139 24.3589 52.1187 24.0679 52.1187 cv
23.8999 52.1187 23.7539 52.1523 23.6309 52.208 cv
23.5078 52.2642 23.3955 52.354 23.3003 52.4771 cv
23.0654 52.4771 li
23.0654 50.4272 li
25.2271 50.4272 li
25.2271 50.4272 li
cp
ef
199.771 35.1431 mo
195.771 35.1431 li
32.3701 35.1431 mo
36.3701 35.1431 li
@
11.5459 38.1899 mo
11.5459 37.7739 li
12.562 37.7739 li
12.562 32.9258 li
11.3862 33.686 li
11.3862 33.1738 li
12.8101 32.2539 li
13.3462 32.2539 li
13.3462 37.7739 li
14.3623 37.7739 li
14.3623 38.1899 li
11.5459 38.1899 li
11.5459 38.1899 li
cp
ef
17.9941 38.2939 mo
17.354 38.2939 16.8579 38.0298 16.5059 37.502 cv
16.1543 36.9736 15.978 36.2378 15.978 35.2778 cv
15.978 34.3257 16.1543 33.582 16.5059 33.0537 cv
16.8579 32.5259 17.354 32.2539 17.9941 32.2539 cv
18.626 32.2539 19.1221 32.5259 19.4741 33.0537 cv
19.8262 33.582 20.0103 34.3257 20.0103 35.2778 cv
20.0103 36.2378 19.8262 36.9736 19.4741 37.502 cv
19.1221 38.0298 18.626 38.2939 17.9941 38.2939 cv
17.9941 38.2939 li
cp
17.9941 37.918 mo
18.394 37.918 18.6899 37.7017 18.8901 37.2617 cv
19.082 36.8301 19.186 36.166 19.186 35.2778 cv
19.186 34.3979 19.082 33.7339 18.8901 33.2939 cv
18.6899 32.8618 18.394 32.6377 17.9941 32.6377 cv
17.5942 32.6377 17.29 32.8618 17.0981 33.2939 cv
16.8979 33.7339 16.8022 34.3979 16.8022 35.2778 cv
16.8022 36.166 16.8979 36.8301 17.0981 37.2617 cv
17.29 37.7017 17.5942 37.918 17.9941 37.918 cv
ef
20.7363 32.6362 mo
22.1367 32.6362 li
22.1367 33.062 li
20.7363 33.062 li
20.7363 32.6362 li
20.7363 32.6362 li
cp
ef
25.5684 34.3496 mo
23.7095 34.3496 li
23.7095 34.0586 li
24.3647 34.0586 li
24.3647 33.2578 li
22.5835 33.2578 li
22.5835 32.9609 li
24.3701 30.1948 li
24.9131 30.1948 li
24.9131 32.9668 li
25.6919 32.9668 li
25.6919 33.2578 li
24.9131 33.2578 li
24.9131 34.0586 li
25.5684 34.0586 li
25.5684 34.3496 li
25.5684 34.3496 li
cp
24.3647 32.9668 mo
24.3647 30.7939 li
22.9702 32.9668 li
24.3647 32.9668 li
ef
199.771 14.8999 mo
195.771 14.8999 li
32.3701 14.8999 mo
36.3701 14.8999 li
@
11.5459 18.0298 mo
11.5459 17.6138 li
12.562 17.6138 li
12.562 12.7656 li
11.3862 13.5259 li
11.3862 13.0137 li
12.8101 12.0938 li
13.3462 12.0938 li
13.3462 17.6138 li
14.3623 17.6138 li
14.3623 18.0298 li
11.5459 18.0298 li
11.5459 18.0298 li
cp
ef
17.9941 18.1338 mo
17.354 18.1338 16.8579 17.8696 16.5059 17.3418 cv
16.1543 16.814 15.978 16.0776 15.978 15.1177 cv
15.978 14.166 16.1543 13.4219 16.5059 12.894 cv
16.8579 12.3657 17.354 12.0938 17.9941 12.0938 cv
18.626 12.0938 19.1221 12.3657 19.4741 12.894 cv
19.8262 13.4219 20.0103 14.166 20.0103 15.1177 cv
20.0103 16.0776 19.8262 16.814 19.4741 17.3418 cv
19.1221 17.8696 18.626 18.1338 17.9941 18.1338 cv
17.9941 18.1338 li
cp
17.9941 17.7578 mo
18.394 17.7578 18.6899 17.542 18.8901 17.1021 cv
19.082 16.6699 19.186 16.0059 19.186 15.1177 cv
19.186 14.2378 19.082 13.5737 18.8901 13.1338 cv
18.6899 12.7017 18.394 12.478 17.9941 12.478 cv
17.5942 12.478 17.29 12.7017 17.0981 13.1338 cv
16.8979 13.5737 16.8022 14.2378 16.8022 15.1177 cv
16.8022 16.0059 16.8979 16.6699 17.0981 17.1021 cv
17.29 17.542 17.5942 17.7578 17.9941 17.7578 cv
ef
20.7363 12.2363 mo
22.1367 12.2363 li
22.1367 12.6621 li
20.7363 12.6621 li
20.7363 12.2363 li
20.7363 12.2363 li
cp
ef
22.9531 10.041 mo
23.166 9.96289 23.3677 9.90088 23.5635 9.85645 cv
23.7598 9.81689 23.9443 9.79443 24.1182 9.79443 cv
24.5156 9.79443 24.8291 9.88428 25.0532 10.0522 cv
25.2773 10.2261 25.3892 10.4668 25.3892 10.769 cv
25.3892 11.0156 25.311 11.2227 25.1543 11.3853 cv
24.9971 11.5532 24.7788 11.665 24.499 11.7212 cv
24.835 11.7715 25.0923 11.8945 25.2773 12.0908 cv
25.4619 12.2866 25.5571 12.5386 25.5571 12.8467 cv
25.5571 13.2275 25.4287 13.5186 25.1709 13.7202 cv
24.9131 13.9219 24.5493 14.0225 24.0679 14.0225 cv
23.855 14.0225 23.6421 14 23.4404 13.9556 cv
23.2388 13.916 23.0371 13.8491 22.8359 13.7539 cv
22.8359 12.9585 li
23.1436 12.9585 li
23.1606 13.2275 23.25 13.4233 23.4067 13.5576 cv
23.5635 13.6924 23.7876 13.7593 24.0791 13.7593 cv
24.3589 13.7593 24.5771 13.6812 24.7397 13.5186 cv
24.8965 13.3564 24.9805 13.1323 24.9805 12.8521 cv
24.9805 12.5332 24.8965 12.292 24.7285 12.124 cv
24.5605 11.9619 24.3198 11.8779 24.0005 11.8779 cv
23.7432 11.8779 li
23.7432 11.5977 li
23.8774 11.5977 li
24.1963 11.5977 24.4375 11.5361 24.5942 11.4019 cv
24.751 11.2676 24.835 11.0713 24.835 10.8027 cv
24.835 10.5674 24.7676 10.3828 24.6387 10.2539 cv
24.5044 10.1309 24.3198 10.0635 24.0732 10.0635 cv
23.8271 10.0635 23.6309 10.125 23.4966 10.2427 cv
23.3623 10.3604 23.2837 10.5337 23.2612 10.7578 cv
22.9531 10.7578 li
22.9531 10.041 li
22.9531 10.041 li
cp
ef
199.771 .75 mo
197.771 .75 li
32.3701 .75 mo
34.3701 .75 li
199.771 2.71191 mo
197.771 2.71191 li
32.3701 2.71191 mo
34.3701 2.71191 li
199.771 5.24072 mo
197.771 5.24072 li
32.3701 5.24072 mo
34.3701 5.24072 li
199.771 8.80566 mo
197.771 8.80566 li
32.3701 8.80566 mo
34.3701 8.80566 li
199.771 15.8257 mo
197.771 15.8257 li
32.3701 15.8257 mo
34.3701 15.8257 li
199.771 16.8608 mo
197.771 16.8608 li
32.3701 16.8608 mo
34.3701 16.8608 li
199.771 18.0347 mo
197.771 18.0347 li
32.3701 18.0347 mo
34.3701 18.0347 li
199.771 19.3906 mo
197.771 19.3906 li
32.3701 19.3906 mo
34.3701 19.3906 li
199.771 20.9927 mo
197.771 20.9927 li
32.3701 20.9927 mo
34.3701 20.9927 li
199.771 22.9551 mo
197.771 22.9551 li
32.3701 22.9551 mo
34.3701 22.9551 li
199.771 25.4839 mo
197.771 25.4839 li
32.3701 25.4839 mo
34.3701 25.4839 li
199.771 29.0488 mo
197.771 29.0488 li
32.3701 29.0488 mo
34.3701 29.0488 li
199.771 36.0688 mo
197.771 36.0688 li
32.3701 36.0688 mo
34.3701 36.0688 li
199.771 37.105 mo
197.771 37.105 li
32.3701 37.105 mo
34.3701 37.105 li
199.771 38.2788 mo
197.771 38.2788 li
32.3701 38.2788 mo
34.3701 38.2788 li
199.771 39.6338 mo
197.771 39.6338 li
32.3701 39.6338 mo
34.3701 39.6338 li
199.771 41.2368 mo
197.771 41.2368 li
32.3701 41.2368 mo
34.3701 41.2368 li
199.771 43.1987 mo
197.771 43.1987 li
32.3701 43.1987 mo
34.3701 43.1987 li
199.771 45.728 mo
197.771 45.728 li
32.3701 45.728 mo
34.3701 45.728 li
199.771 49.293 mo
197.771 49.293 li
32.3701 49.293 mo
34.3701 49.293 li
199.771 56.313 mo
197.771 56.313 li
32.3701 56.313 mo
34.3701 56.313 li
199.771 57.3477 mo
197.771 57.3477 li
32.3701 57.3477 mo
34.3701 57.3477 li
199.771 58.522 mo
197.771 58.522 li
32.3701 58.522 mo
34.3701 58.522 li
199.771 59.8779 mo
197.771 59.8779 li
32.3701 59.8779 mo
34.3701 59.8779 li
199.771 61.48 mo
197.771 61.48 li
32.3701 61.48 mo
34.3701 61.48 li
199.771 63.4419 mo
197.771 63.4419 li
32.3701 63.4419 mo
34.3701 63.4419 li
199.771 65.9707 mo
197.771 65.9707 li
32.3701 65.9707 mo
34.3701 65.9707 li
199.771 69.5361 mo
197.771 69.5361 li
32.3701 69.5361 mo
34.3701 69.5361 li
199.771 76.5571 mo
197.771 76.5571 li
32.3701 76.5571 mo
34.3701 76.5571 li
199.771 77.5923 mo
197.771 77.5923 li
32.3701 77.5923 mo
34.3701 77.5923 li
199.771 78.7661 mo
197.771 78.7661 li
32.3701 78.7661 mo
34.3701 78.7661 li
199.771 80.1216 mo
197.771 80.1216 li
32.3701 80.1216 mo
34.3701 80.1216 li
199.771 81.7231 mo
197.771 81.7231 li
32.3701 81.7231 mo
34.3701 81.7231 li
199.771 83.686 mo
197.771 83.686 li
32.3701 83.686 mo
34.3701 83.686 li
199.771 86.2153 mo
197.771 86.2153 li
32.3701 86.2153 mo
34.3701 86.2153 li
199.771 89.7798 mo
197.771 89.7798 li
32.3701 89.7798 mo
34.3701 89.7798 li
199.771 96.7993 mo
197.771 96.7993 li
32.3701 96.7993 mo
34.3701 96.7993 li
199.771 97.8345 mo
197.771 97.8345 li
32.3701 97.8345 mo
34.3701 97.8345 li
199.771 99.0083 mo
197.771 99.0083 li
32.3701 99.0083 mo
34.3701 99.0083 li
199.771 100.364 mo
197.771 100.364 li
32.3701 100.364 mo
34.3701 100.364 li
199.771 101.967 mo
197.771 101.967 li
32.3701 101.967 mo
34.3701 101.967 li
199.771 103.928 mo
197.771 103.928 li
32.3701 103.928 mo
34.3701 103.928 li
199.771 106.458 mo
197.771 106.458 li
32.3701 106.458 mo
34.3701 106.458 li
199.771 110.024 mo
197.771 110.024 li
32.3701 110.024 mo
34.3701 110.024 li
199.771 117.043 mo
197.771 117.043 li
32.3701 117.043 mo
34.3701 117.043 li
199.771 118.079 mo
197.771 118.079 li
32.3701 118.079 mo
34.3701 118.079 li
199.771 119.252 mo
197.771 119.252 li
32.3701 119.252 mo
34.3701 119.252 li
199.771 120.608 mo
197.771 120.608 li
32.3701 120.608 mo
34.3701 120.608 li
199.771 122.211 mo
197.771 122.211 li
32.3701 122.211 mo
34.3701 122.211 li
199.771 124.172 mo
197.771 124.172 li
32.3701 124.172 mo
34.3701 124.172 li
199.771 126.702 mo
197.771 126.702 li
32.3701 126.702 mo
34.3701 126.702 li
199.771 130.266 mo
197.771 130.266 li
32.3701 130.266 mo
34.3701 130.266 li
199.771 137.286 mo
197.771 137.286 li
32.3701 137.286 mo
34.3701 137.286 li
199.771 138.323 mo
197.771 138.323 li
32.3701 138.323 mo
34.3701 138.323 li
199.771 139.497 mo
197.771 139.497 li
32.3701 139.497 mo
34.3701 139.497 li
199.771 140.852 mo
197.771 140.852 li
32.3701 140.852 mo
34.3701 140.852 li
199.771 142.454 mo
197.771 142.454 li
32.3701 142.454 mo
34.3701 142.454 li
199.771 144.417 mo
197.771 144.417 li
32.3701 144.417 mo
34.3701 144.417 li
199.771 146.946 mo
197.771 146.946 li
32.3701 146.946 mo
34.3701 146.946 li
199.771 150.51 mo
197.771 150.51 li
32.3701 150.51 mo
34.3701 150.51 li
@
1.5 lw
2 lc
32.3701 150.51 mo
32.3701 .75 li
32.3701 150.51 mo
199.771 150.51 li
199.771 150.51 mo
199.771 .75 li
32.3701 .75 mo
199.771 .75 li
@
107.29 167.22 mo
106.895 167.22 li
106.887 167.019 106.828 166.86 106.719 166.75 cv
106.601 166.649 106.441 166.59 106.223 166.59 cv
105.938 166.59 105.744 166.674 105.626 166.825 cv
105.509 166.977 105.459 167.254 105.459 167.648 cv
105.459 168.211 li
106.677 168.211 li
106.677 168.649 li
105.459 168.649 li
105.459 172.133 li
106.425 172.133 li
106.425 172.571 li
103.98 172.571 li
103.98 172.133 li
104.703 172.133 li
104.703 168.649 li
103.98 168.649 li
103.98 168.211 li
104.703 168.211 li
104.703 167.667 li
104.703 167.178 104.829 166.817 105.081 166.565 cv
105.333 166.313 105.702 166.186 106.198 166.186 cv
106.383 166.186 106.559 166.204 106.744 166.237 cv
106.929 166.272 107.105 166.322 107.29 166.389 cv
107.29 167.22 li
107.29 167.22 li
cp
ef
112.238 173.874 mo
111.565 173.571 111.062 173.1 110.726 172.461 cv
110.39 171.823 110.222 171.008 110.222 170.034 cv
110.222 169.061 110.39 168.254 110.726 167.607 cv
111.062 166.96 111.565 166.491 112.238 166.186 cv
112.238 166.59 li
111.817 166.883 111.515 167.295 111.33 167.817 cv
111.146 168.345 111.053 169.084 111.053 170.034 cv
111.053 170.993 111.146 171.731 111.33 172.251 cv
111.515 172.772 111.817 173.176 112.238 173.469 cv
112.238 173.874 li
112.238 173.874 li
cp
ef
113.212 172.571 mo
113.212 172.133 li
113.993 172.133 li
113.993 166.883 li
113.212 166.883 li
113.212 166.448 li
115.606 166.448 li
115.606 166.883 li
114.824 166.883 li
114.824 169.001 li
117.999 169.001 li
117.999 166.883 li
117.22 166.883 li
117.22 166.448 li
119.612 166.448 li
119.612 166.883 li
118.831 166.883 li
118.831 172.133 li
119.612 172.133 li
119.612 172.571 li
117.22 172.571 li
117.22 172.133 li
117.999 172.133 li
117.999 169.504 li
114.824 169.504 li
114.824 172.133 li
115.606 172.133 li
115.606 172.571 li
113.212 172.571 li
113.212 172.571 li
cp
ef
120.478 172.571 mo
120.478 172.219 li
123.208 168.649 li
121.05 168.649 li
121.05 169.403 li
120.612 169.403 li
120.612 168.211 li
124.183 168.211 li
124.183 168.564 li
121.452 172.133 li
123.821 172.133 li
123.821 171.344 li
124.257 171.344 li
124.257 172.571 li
120.478 172.571 li
120.478 172.571 li
cp
ef
125.106 173.874 mo
125.106 173.469 li
125.526 173.176 125.829 172.772 126.013 172.251 cv
126.198 171.731 126.29 170.993 126.29 170.034 cv
126.29 169.084 126.198 168.345 126.013 167.817 cv
125.829 167.295 125.526 166.883 125.106 166.59 cv
125.106 166.186 li
125.771 166.491 126.274 166.96 126.61 167.607 cv
126.946 168.254 127.122 169.061 127.122 170.034 cv
127.122 171.008 126.946 171.823 126.61 172.461 cv
126.274 173.1 125.771 173.571 125.106 173.874 cv
125.106 173.874 li
cp
ef
124.067 10.8438 mo
138.067 10.8438 li
0 .993988 1 0 cmyk
@
149.98 13.96 mo
149.98 12.2998 li
150.54 12.2998 li
150.55 12.8599 150.71 13.27 151.021 13.5298 cv
151.32 13.7998 151.79 13.9297 152.41 13.9297 cv
152.99 13.9297 153.43 13.8198 153.73 13.5898 cv
154.03 13.3599 154.19 13.02 154.19 12.5801 cv
154.19 12.23 154.09 11.96 153.91 11.77 cv
153.73 11.5898 153.34 11.3999 152.75 11.2197 cv
151.79 10.9297 li
151.09 10.7197 150.59 10.46 150.311 10.1396 cv
150.03 9.83008 149.89 9.3999 149.89 8.83984 cv
149.89 8.21973 150.11 7.73975 150.55 7.3999 cv
150.99 7.06006 151.601 6.88965 152.4 6.88965 cv
152.74 6.88965 153.11 6.92969 153.51 7 cv
153.91 7.08008 154.34 7.17969 154.8 7.31982 cv
154.8 8.86963 li
154.25 8.86963 li
154.19 8.35986 154.021 7.98975 153.73 7.75977 cv
153.44 7.52979 153 7.40967 152.42 7.40967 cv
151.9 7.40967 151.51 7.52002 151.24 7.72998 cv
150.97 7.93994 150.84 8.23975 150.84 8.63965 cv
150.84 8.98975 150.94 9.25977 151.14 9.45996 cv
151.34 9.65967 151.771 9.85986 152.43 10.0498 cv
153.33 10.3198 li
153.99 10.52 154.46 10.7798 154.74 11.0801 cv
155.021 11.3896 155.17 11.7998 155.17 12.3198 cv
155.17 13.0298 154.94 13.5601 154.49 13.9097 cv
154.03 14.27 153.36 14.4399 152.47 14.4399 cv
152.07 14.4399 151.66 14.3999 151.24 14.3198 cv
150.82 14.25 150.4 14.1299 149.98 13.96 cv
149.98 13.96 li
cp
0 0 0 1 cmyk
ef
157.09 9.63965 mo
156.3 9.63965 li
156.3 9.11963 li
157.09 9.11963 li
157.09 7.50977 li
157.99 7.50977 li
157.99 9.11963 li
159.68 9.11963 li
159.68 9.63965 li
157.99 9.63965 li
157.99 12.9399 li
157.99 13.3799 158.03 13.6699 158.12 13.79 cv
158.2 13.9097 158.36 13.9697 158.59 13.9697 cv
158.82 13.9697 158.99 13.8999 159.101 13.7598 cv
159.2 13.6196 159.26 13.3999 159.271 13.0898 cv
159.95 13.0898 li
159.92 13.5698 159.79 13.9097 159.561 14.1196 cv
159.33 14.3301 158.98 14.4399 158.51 14.4399 cv
157.99 14.4399 157.62 14.3198 157.41 14.0996 cv
157.19 13.8799 157.09 13.4897 157.09 12.9399 cv
157.09 9.63965 li
157.09 9.63965 li
cp
ef
164.73 11.0698 mo
164.73 13.79 li
165.53 13.79 li
165.53 14.3101 li
163.83 14.3101 li
163.83 13.75 li
163.63 13.9897 163.4 14.1699 163.14 14.2798 cv
162.88 14.3799 162.57 14.4399 162.23 14.4399 cv
161.65 14.4399 161.19 14.29 160.851 13.9897 cv
160.51 13.6899 160.351 13.27 160.351 12.75 cv
160.351 12.2197 160.54 11.8101 160.93 11.5098 cv
161.311 11.21 161.86 11.0601 162.57 11.0601 cv
163.83 11.0601 li
163.83 10.6997 li
163.83 10.3101 163.71 10.0098 163.47 9.79004 cv
163.23 9.56982 162.89 9.45996 162.46 9.45996 cv
162.101 9.45996 161.82 9.5498 161.61 9.70996 cv
161.39 9.86963 161.26 10.1099 161.21 10.4297 cv
160.75 10.4297 li
160.75 9.37988 li
161.061 9.25 161.36 9.1499 161.66 9.08008 cv
161.95 9.02002 162.24 8.97998 162.521 8.97998 cv
163.24 8.97998 163.78 9.15967 164.16 9.52002 cv
164.54 9.87988 164.73 10.3896 164.73 11.0698 cv
164.73 11.0698 li
cp
163.83 12.6797 mo
163.83 11.5801 li
162.67 11.5801 li
162.22 11.5801 161.89 11.6797 161.67 11.8696 cv
161.45 12.0698 161.351 12.3599 161.351 12.75 cv
161.351 13.1099 161.46 13.3999 161.68 13.6099 cv
161.9 13.8301 162.2 13.9297 162.58 13.9297 cv
162.95 13.9297 163.25 13.8198 163.48 13.5898 cv
163.71 13.3599 163.83 13.0601 163.83 12.6797 cv
ef
166.26 14.3101 mo
166.26 13.79 li
167.07 13.79 li
167.07 9.63965 li
166.21 9.63965 li
166.21 9.11963 li
167.97 9.11963 li
167.97 10.04 li
168.13 9.69971 168.351 9.42969 168.61 9.25 cv
168.87 9.06982 169.18 8.97998 169.54 8.97998 cv
170.11 8.97998 170.53 9.1499 170.8 9.46973 cv
171.07 9.7998 171.21 10.3101 171.21 11.0098 cv
171.21 13.79 li
172.01 13.79 li
172.01 14.3101 li
169.53 14.3101 li
169.53 13.79 li
170.311 13.79 li
170.311 11.29 li
170.311 10.6597 170.23 10.23 170.07 9.98975 cv
169.91 9.75 169.64 9.62988 169.25 9.62988 cv
168.83 9.62988 168.51 9.79004 168.29 10.0898 cv
168.07 10.3999 167.97 10.8398 167.97 11.4199 cv
167.97 13.79 li
168.75 13.79 li
168.75 14.3101 li
166.26 14.3101 li
166.26 14.3101 li
cp
ef
176.68 11.9697 mo
176.68 11.46 li
176.68 10.8398 176.561 10.3696 176.32 10.04 cv
176.08 9.70996 175.73 9.54004 175.28 9.54004 cv
174.82 9.54004 174.47 9.72998 174.23 10.0898 cv
173.99 10.4497 173.88 10.9897 173.88 11.71 cv
173.88 12.4297 173.99 12.98 174.23 13.3398 cv
174.47 13.71 174.82 13.8896 175.28 13.8896 cv
175.73 13.8896 176.08 13.73 176.32 13.3999 cv
176.561 13.0801 176.68 12.5996 176.68 11.9697 cv
176.68 11.9697 li
cp
177.58 13.79 mo
178.44 13.79 li
178.44 14.3101 li
176.68 14.3101 li
176.68 13.5 li
176.5 13.8301 176.28 14.0698 176.01 14.2197 cv
175.73 14.3599 175.4 14.4399 175 14.4399 cv
174.36 14.4399 173.83 14.1899 173.43 13.6899 cv
173.03 13.1899 172.83 12.5298 172.83 11.71 cv
172.83 10.8999 173.03 10.2397 173.43 9.73975 cv
173.83 9.23975 174.36 8.97998 175 8.97998 cv
175.4 8.97998 175.73 9.06006 176.01 9.20996 cv
176.28 9.36963 176.5 9.60986 176.68 9.92969 cv
176.68 7.22998 li
175.83 7.22998 li
175.83 6.70996 li
177.58 6.70996 li
177.58 13.79 li
ef
183.69 11.0698 mo
183.69 13.79 li
184.49 13.79 li
184.49 14.3101 li
182.79 14.3101 li
182.79 13.75 li
182.59 13.9897 182.36 14.1699 182.101 14.2798 cv
181.84 14.3799 181.53 14.4399 181.19 14.4399 cv
180.61 14.4399 180.15 14.29 179.811 13.9897 cv
179.47 13.6899 179.311 13.27 179.311 12.75 cv
179.311 12.2197 179.5 11.8101 179.89 11.5098 cv
180.271 11.21 180.82 11.0601 181.53 11.0601 cv
182.79 11.0601 li
182.79 10.6997 li
182.79 10.3101 182.67 10.0098 182.43 9.79004 cv
182.19 9.56982 181.851 9.45996 181.42 9.45996 cv
181.061 9.45996 180.78 9.5498 180.57 9.70996 cv
180.351 9.86963 180.22 10.1099 180.17 10.4297 cv
179.71 10.4297 li
179.71 9.37988 li
180.021 9.25 180.32 9.1499 180.62 9.08008 cv
180.91 9.02002 181.2 8.97998 181.48 8.97998 cv
182.2 8.97998 182.74 9.15967 183.12 9.52002 cv
183.5 9.87988 183.69 10.3896 183.69 11.0698 cv
183.69 11.0698 li
cp
182.79 12.6797 mo
182.79 11.5801 li
181.63 11.5801 li
181.18 11.5801 180.851 11.6797 180.63 11.8696 cv
180.41 12.0698 180.311 12.3599 180.311 12.75 cv
180.311 13.1099 180.42 13.3999 180.64 13.6099 cv
180.86 13.8301 181.16 13.9297 181.54 13.9297 cv
181.91 13.9297 182.21 13.8198 182.44 13.5898 cv
182.67 13.3599 182.79 13.0601 182.79 12.6797 cv
ef
189.59 9.10986 mo
189.59 10.4097 li
189.07 10.4097 li
189.05 10.1499 188.98 9.95996 188.86 9.83008 cv
188.73 9.70996 188.54 9.63965 188.3 9.63965 cv
187.86 9.63965 187.521 9.7998 187.28 10.0996 cv
187.04 10.4097 186.93 10.8496 186.93 11.4199 cv
186.93 13.79 li
187.97 13.79 li
187.97 14.3101 li
185.22 14.3101 li
185.22 13.79 li
186.03 13.79 li
186.03 9.62988 li
185.17 9.62988 li
185.17 9.11963 li
186.93 9.11963 li
186.93 10.04 li
187.101 9.67969 187.32 9.41992 187.601 9.23975 cv
187.88 9.06982 188.22 8.97998 188.62 8.97998 cv
188.76 8.97998 188.92 9 189.08 9.02002 cv
189.24 9.04004 189.41 9.06982 189.59 9.10986 cv
189.59 9.10986 li
cp
ef
193.72 11.9697 mo
193.72 11.46 li
193.72 10.8398 193.601 10.3696 193.36 10.04 cv
193.12 9.70996 192.771 9.54004 192.32 9.54004 cv
191.86 9.54004 191.51 9.72998 191.271 10.0898 cv
191.03 10.4497 190.92 10.9897 190.92 11.71 cv
190.92 12.4297 191.03 12.98 191.271 13.3398 cv
191.51 13.71 191.86 13.8896 192.32 13.8896 cv
192.771 13.8896 193.12 13.73 193.36 13.3999 cv
193.601 13.0801 193.72 12.5996 193.72 11.9697 cv
193.72 11.9697 li
cp
194.62 13.79 mo
195.48 13.79 li
195.48 14.3101 li
193.72 14.3101 li
193.72 13.5 li
193.54 13.8301 193.32 14.0698 193.05 14.2197 cv
192.771 14.3599 192.44 14.4399 192.04 14.4399 cv
191.4 14.4399 190.87 14.1899 190.47 13.6899 cv
190.07 13.1899 189.87 12.5298 189.87 11.71 cv
189.87 10.8999 190.07 10.2397 190.47 9.73975 cv
190.87 9.23975 191.4 8.97998 192.04 8.97998 cv
192.44 8.97998 192.771 9.06006 193.05 9.20996 cv
193.32 9.36963 193.54 9.60986 193.72 9.92969 cv
193.72 7.22998 li
192.87 7.22998 li
192.87 6.70996 li
194.62 6.70996 li
194.62 13.79 li
ef
124.067 25.5156 mo
138.067 25.5156 li
.883665 .769161 0 0 cmyk
@
149.54 28.9497 mo
149.54 28.4297 li
150.521 28.4297 li
150.521 22.1797 li
149.54 22.1797 li
149.54 21.6597 li
151.41 21.6597 li
155.78 27.4097 li
155.78 22.1797 li
154.8 22.1797 li
154.8 21.6597 li
157.36 21.6597 li
157.36 22.1797 li
156.38 22.1797 li
156.38 29.0801 li
155.79 29.0801 li
151.12 22.9497 li
151.12 28.4297 li
152.101 28.4297 li
152.101 28.9497 li
149.54 28.9497 li
149.54 28.9497 li
cp
0 0 0 1 cmyk
ef
160.94 29.0801 mo
160.18 29.0801 159.58 28.8398 159.12 28.3398 cv
158.66 27.8398 158.43 27.1797 158.43 26.3496 cv
158.43 25.5298 158.65 24.8696 159.11 24.3696 cv
159.57 23.8696 160.18 23.6196 160.94 23.6196 cv
161.7 23.6196 162.3 23.8696 162.76 24.3696 cv
163.22 24.8696 163.45 25.5298 163.45 26.3496 cv
163.45 27.1797 163.22 27.8398 162.76 28.3398 cv
162.3 28.8398 161.7 29.0801 160.94 29.0801 cv
160.94 29.0801 li
cp
160.94 28.6099 mo
161.42 28.6099 161.78 28.4199 162.03 28.04 cv
162.271 27.6597 162.4 27.0996 162.4 26.3496 cv
162.4 25.6099 162.271 25.0498 162.03 24.6699 cv
161.78 24.29 161.42 24.0996 160.94 24.0996 cv
160.46 24.0996 160.09 24.29 159.851 24.6699 cv
159.601 25.0498 159.48 25.6099 159.48 26.3496 cv
159.48 27.0996 159.601 27.6597 159.851 28.04 cv
160.09 28.4199 160.46 28.6099 160.94 28.6099 cv
ef
167.46 28.9497 mo
167.46 28.4297 li
168.271 28.4297 li
168.271 24.2798 li
167.41 24.2798 li
167.41 23.7598 li
169.17 23.7598 li
169.17 24.6797 li
169.33 24.3398 169.55 24.0698 169.811 23.8896 cv
170.07 23.71 170.38 23.6196 170.74 23.6196 cv
171.311 23.6196 171.73 23.79 172 24.1099 cv
172.271 24.4399 172.41 24.9497 172.41 25.6499 cv
172.41 28.4297 li
173.21 28.4297 li
173.21 28.9497 li
170.73 28.9497 li
170.73 28.4297 li
171.51 28.4297 li
171.51 25.9297 li
171.51 25.2998 171.43 24.8696 171.271 24.6299 cv
171.11 24.3896 170.84 24.27 170.45 24.27 cv
170.03 24.27 169.71 24.4297 169.49 24.73 cv
169.271 25.04 169.17 25.48 169.17 26.0601 cv
169.17 28.4297 li
169.95 28.4297 li
169.95 28.9497 li
167.46 28.9497 li
167.46 28.9497 li
cp
ef
174.59 26.4199 mo
180.851 26.4199 li
180.851 27.1997 li
174.59 27.1997 li
174.59 26.4199 li
174.59 26.4199 li
cp
174.59 24.4297 mo
180.851 24.4297 li
180.851 25.21 li
174.59 25.21 li
174.59 24.4297 li
ef
185.11 29.0801 mo
184.311 29.0801 183.69 28.75 183.25 28.0898 cv
182.811 27.4297 182.59 26.5098 182.59 25.3101 cv
182.59 24.1196 182.811 23.1899 183.25 22.5298 cv
183.69 21.8696 184.311 21.5298 185.11 21.5298 cv
185.9 21.5298 186.521 21.8696 186.96 22.5298 cv
187.4 23.1899 187.63 24.1196 187.63 25.3101 cv
187.63 26.5098 187.4 27.4297 186.96 28.0898 cv
186.521 28.75 185.9 29.0801 185.11 29.0801 cv
185.11 29.0801 li
cp
185.11 28.6099 mo
185.61 28.6099 185.98 28.3398 186.23 27.79 cv
186.47 27.25 186.601 26.4199 186.601 25.3101 cv
186.601 24.21 186.47 23.3799 186.23 22.8301 cv
185.98 22.29 185.61 22.0098 185.11 22.0098 cv
184.61 22.0098 184.23 22.29 183.99 22.8301 cv
183.74 23.3799 183.62 24.21 183.62 25.3101 cv
183.62 26.4199 183.74 27.25 183.99 27.79 cv
184.23 28.3398 184.61 28.6099 185.11 28.6099 cv
ef
124.067 40.187 mo
138.067 40.187 li
@
149.601 43.5898 mo
149.601 43.0698 li
150.53 43.0698 li
150.53 36.8198 li
149.601 36.8198 li
149.601 36.2998 li
155.47 36.2998 li
155.47 37.9199 li
154.87 37.9199 li
154.87 36.8999 li
151.521 36.8999 li
151.521 39.3398 li
153.91 39.3398 li
153.91 38.4297 li
154.51 38.4297 li
154.51 40.8496 li
153.91 40.8496 li
153.91 39.9399 li
151.521 39.9399 li
151.521 42.9897 li
154.95 42.9897 li
154.95 41.9697 li
155.55 41.9697 li
155.55 43.5898 li
149.601 43.5898 li
149.601 43.5898 li
cp
ef
159.16 40.4199 mo
160.25 38.9199 li
159.55 38.9199 li
159.55 38.3999 li
161.55 38.3999 li
161.55 38.9199 li
160.86 38.9199 li
159.47 40.8398 li
161.09 43.0698 li
161.771 43.0698 li
161.771 43.5898 li
159.37 43.5898 li
159.37 43.0698 li
160.03 43.0698 li
158.9 41.52 li
157.771 43.0698 li
158.44 43.0698 li
158.44 43.5898 li
156.47 43.5898 li
156.47 43.0698 li
157.16 43.0698 li
158.59 41.0996 li
157.01 38.9199 li
156.37 38.9199 li
156.37 38.3999 li
158.69 38.3999 li
158.69 38.9199 li
158.07 38.9199 li
159.16 40.4199 li
159.16 40.4199 li
cp
ef
163.16 38.9199 mo
162.3 38.9199 li
162.3 38.3999 li
164.061 38.3999 li
164.061 39.21 li
164.23 38.8896 164.45 38.6499 164.73 38.4897 cv
165 38.3398 165.34 38.2598 165.74 38.2598 cv
166.38 38.2598 166.9 38.52 167.3 39.02 cv
167.7 39.52 167.91 40.1797 167.91 40.9897 cv
167.91 41.8101 167.7 42.4697 167.3 42.9697 cv
166.9 43.4697 166.38 43.7197 165.74 43.7197 cv
165.34 43.7197 165 43.6396 164.73 43.5 cv
164.45 43.3496 164.23 43.1099 164.061 42.7798 cv
164.061 45.1396 li
164.91 45.1396 li
164.91 45.6597 li
162.3 45.6597 li
162.3 45.1396 li
163.16 45.1396 li
163.16 38.9199 li
163.16 38.9199 li
cp
164.061 40.7397 mo
164.061 41.25 li
164.061 41.8799 164.18 42.3599 164.42 42.6797 cv
164.66 43.0098 165 43.1699 165.46 43.1699 cv
165.92 43.1699 166.26 42.9897 166.5 42.6196 cv
166.74 42.2598 166.86 41.71 166.86 40.9897 cv
166.86 40.27 166.74 39.73 166.5 39.3696 cv
166.26 39.0098 165.92 38.8198 165.46 38.8198 cv
165 38.8198 164.66 38.9897 164.42 39.3198 cv
164.18 39.6499 164.061 40.1196 164.061 40.7397 cv
ef
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 68 /D putdup 70 /F putdup 80 /P putdup 84 /T putdup 97 /a putdup 98 /b putdup 101 /e putdup 105 /i putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdup 119 /w putdup 121 /y putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings19 dict dup begin/space <1C60D8A8C9B896187A> |-/parenleft <1C60D8A8C9B84E0A47D7FED6098F93D599A35099EC3AF2C571CF0E48D8A711D412E34AAB2732DF92ADCDC95C7C6D97E8C44CE2751654BC55BD12CD842E> |-/parenright <1C60D8A8C9B84E0A47D7FED609B3683507871E5C5015E3549BF91653A329EF8D5BF37DF948A5A8471707D087A577F9EE79FD91DC92667BCDE588EC87D3> |-/D <1C60D8A8C9B64FADC8BE4593403BE5D574FAA91D24903C73A9847FBCFF2CCAE7B82F347344B6D75D9DA8CFD564A5192C31CC0F81E85BFE65DA0E98609881F08E27947C3AA06FD0D02C1BFBD8926D8C270B5E2950C4A34E562381A9DCE503FFFA3F4060AB2DBCCA9D5531B6> |-/F <1C60D8A8C9B7544E530E823999841DA2F8EC66E9CFE2CD6B50437205F942FF37E122B69D17C7AA691A603207160811AFB791> |-/P <1C60D8A8C9B7876E235FC614E63EC6DDBF5153E7285DD594B4A59D9CFED19B0A38B3CB0F4F897304E6BAD66C826BEE7E4169B0E7C80E2CF9471E5F92DE30A72B04AC0EEA14B3B5B59AE75C5D253EAF073DA7CF16B6D745CDF6FBBE2E5B43C2B5E88E6AFB64C1CBC51F> |-/T <1C60D8A8C9B7AA91799D50BEC147DC15659E7F5EC34F826A01358F7E6EB53E56E1831B0550D2FE4055F5> |-/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A261528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D88393EC5B1BCAE7CEACDFA7D9A043D> |-/b <1C60D8A8C9B7E2CE503F0CE2BC5634A8F8728B9E7DF78E9EB37EA1AAF5A6E14429B2FFC30BA7B2B7F7056F226E2401F24ABDAD5426247AC27BE4FA97CE94C91E5B97490DDD42E9AC1499720E52A641A6B5FD3039B53C33A6C3FB59A9FDC5809A26029808C985DEBED644B28F1427AE3990CDC08FE3F67389E1C6D971D03C58C4203806687562D626FE9888BA19E8E374C457B0F0CAD2096A35C2A25CA9F88F3E7B91EC8C23BC> |-/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6A9740420B265CA4AC9DE99AD8AEDC4233110D7344BA8969F49ACBE3164296BAF8D8824063AB5A81F8F9142D2C0492C8D085FBBDD29052840FCC873C574581FB314AC3521D9DA4AE8E6D987C45E9E8106797186054DABC39E6B> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A54C45E2D6E21C6C79BBDA40B7772F2DEC85ADAD3476B> |-/n <1C60D8A8C9B790A816BA887E1EEC2C6B98EC99098FC021FEBA148F884875E3B03D8F5BA9B51A6918EFA4195D8FABF82DC961545110C1672CA0A5B167A36646DBDC6B2B1EB2CCFFCB412605A41F5E921E35125025B68561FC08FF5F5A87F0318D13C761F9DF> |-/o <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B566E5BD4E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC65B190F81C7A4B1ED6D074E407F8CF228B147D6A94BC016CC67> |-/r <1C60D8A8C9B825FA276057E430FDF01407E8A25201058EF45B5C185214AB1116383552C8A26ACD44FF0BE1E00A052AF17C7B552C44648BDA524B50952CB0AE525A4563499AD1C42D4D0C12A5AD458628362FB1B81E032637466F> |-/s <1C60D8A8C9B70FAD6F31E6985338EEEA1793890FC3B3DC4027B9CC9488D5A6B4D4C4E3E08CED307B2C798C1699A9DD310011666D86920512F1C3EB9CEE4F24B897BB1E950EE111237B9A2BC5BBB8732A07D9407EA3C86D8241785B5209F0AEBA9DE73147EEE82D829B87C7> |-/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E6402088837AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3D16C57> |-/w <1C60D8A8C9B615D1D39C3ADF830FB08A1A35A87DCFD157E58FABDD21BA80846DED508D58D627D5468CDEA878B4EBB2BC39F9E17357A3B538845D213A53BE481E0D6B92FA11EAB84DAA099CD1E52DEE6734C0A900F3A37F8B6CBD74174B2BAF5100CBE402299FC69ADD471E1494375657D0074EB17A39D5C9C17257D613AB99E3> |-/y <1C60D8A8C9B74451438745C9BFBA6ADBF77C623A74806E5154FE3B1D23AD89884413882DCD456BA075554715051F4B509904A44C98E8994424C1B156D65DBD9989905EF3DE501EC4A81DE7294F3DD868FBAE7BF61D1105CF8B349074D58AEC16A3DDE7732615028813D74148E904C1C87C7D157893B843DFD35C187593AC68163F56BACA6337> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/IUYDGB+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/IUYDGB+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 26{/.notdef}rp /D /.notdef /F 9{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp /a /b 2{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n /o 2{/.notdef}rp /r /s /t 2{/.notdef}rp /w /.notdef /y 134{/.notdef}rp]IUYDGB+MyriadPro-Regular nfIUYDGB+MyriadPro-Regular*1 [4.48965e-10 -10 -10 -4.48966e-10 0 0 ]msf8.37012 122.415 mo(Density FFT Power \(arb\))[-6.69971 -5.01025 -5.5498 -3.95996 -2.33984 -3.3999 -4.70996 -2.11963 -4.87012 -4.87012 -4.96973 -2.12012 -5.06982 -5.42041 -7.25977 -5.00977 -3.27002 -2.12012 -2.83984 -4.81982 -3.31006 -5.66016 0 ]ysh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/IUYDGB+MyriadPro-Regular*1 uf/IUYDGB+MyriadPro-Regular uf/MyriadPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.2%%For: (Troy Carter) ()%%Title: (spectra_3.eps)%%CreationDate: 6/4/12 10:40 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6GC/m?o-f"#!8dg?O?c@P($p$WHLF!B3!fll6J6#?kE#5fh\d.fCh(WecCXbkpKgKXQ:I^t1lX=i4C2^oS$dS6UX8ja-+]V+%C/Ii0US9)*ipiT9RF-.X:t&TC&>c=kcDk"R.d@@g',5[Y8un,X_/#mu>Q;`Wp.dZN2l#+Z[Ml8CG9pGj;f+u7Wupi,)SJ!HNRiTR%Kgtb&g\+79ea,TP_`s]<[0H(QT,AaL7^Za,Eo(`D)g.q<?T#U!5$."YUXJH*<-qJ>9FFrN9$`3?]hplVs1B8@Q)LeM==cZM">@B;%)'FdnC%6*4XjO<i-\.pgg\l]D?$q`\-K!./?4Wt9(l3]InaL_ZhVFHqONshW,f8GT:=!Z1q'&@m"CH7:bUV#Y4^_O`p,^`1^"%L(%11WGJp.r*fh'JhY9-]9nJ-?)$V'VC-\hJTeNG?c^@j28UQCs@9o/iuZFJ'j+Bl[C1&R-#n5R"kMWW7[N7V,:gb;iV\)EZu_]()DX%k`/NB)2tNi:@Gjp?_ER\."X]Kl'&H&_rt>`lSp)a8>fEMCt4IK+VB(9d\nA7"S/0uIF8H=e]rrt"/]ikqFHj9W5`%l;*1`U0fiSE%9n,?E)pO;l'u=o.HR?j$'H&VQ7<MUk8m)3Z)\lAlCf%K&.9qOX0KAPAN91G*mr>9);/`Tke8imiSU/O!F(dn8*sDJJB)>rus&1bJ%a1\(lA7u&Y((VuVJri/YV[ZmY!adjdFX3:VE)F[VQNHYIZW-<lEM19U('`jgB]2_tR8JKaZAbF//:QkFIMRjS<0m'X/E9Z3`i$+9%T2mH:2LR*F`ELqGrlSiX<]5lDZIqj(_pih1U[)#Pf26MV0@nQoXG,R$'5J>@=K>QB2iC+P;Cl:J8d1hf.bQAe?)ccR8qjuH0rF_D%Ht\H1.DEorbFk6l'5M$Kn.TSGT6O/r1[G^&@NFeIIU^&P-0Vtn-iCnifH^;^8<cj`1A1u<Z/><m9<h:F-D`&++)><"n.Y+e.Tj^2%#;N,5VGs?j_GC"Tm5`.Wi_FKgXWutUN-Gg.%r5VRn.Qtm&Z!+;cfg2D?`\t[j!.6s6Joc]i@"WAhU1l6:Pq/ui$[*mro#4F7EQp@%Y-`UnOn/Q^cM<6V)9%Y7*G\N`EOsMg;sY*;MAL,r6K[;sC[cgU#CFKO'75LQdpCM$fK];P>*Qe,J!;;P?2VW%fXj\EF#K@*8ibT,%j_iA]S6%\Z+m,"f-nfPMi+#CD:9gQnVsRBn+m+/?Gi'q;=GsX`U!rc#F8Cr,:*l*E1ECO/)[`9*r_`[&Un,45M0!C=,`C-nidJu*%SF8'/_m_3=if\2=18hE8%Yt^p,ee+mKB(,Ejm>sUoM&0sa?TSq[A(bA8J6G\rMBP@EoB7K0Du]DX"#^+rmH;,*;saQV>iB3rmip_%[`8=.oCRn4Qi8KLk\oc?r>1<W9!lP59E1:#oXFL[rY*M*<1i4'i?oXIqO@MZJ"_@T;H2.<8Q7/S.9FoOrK%!Kmub,lACqjps689(%21m"^^-*0Od`762/*0B2@c;636Q4m\qu9pCq_ruICWMY5)bXlOrP\`?SAY&TN,:XLk\grn[qGZ:T+iosg_XacO!KJ\jX$lkT#"dP%S<aHbnrA\ZN#!_=`;\1',pC>+Nc3\,^o'dGb>\f,$RP^G^?M.?#b0Dc&L5U5>7o^+YRZU#WJSq\h<6eT%tVs'Aj'QS12N&?<=/Yn%=CE/&U+R7Y@NKh^oN/;lkDPM`IiY-g=k\lc+_CErr`(6nLOUOgC_'b2:CqID^XYtL.=uh:;"K@h.+RfI_$fp;?I.pmi.dW\nTRjU%$h1oEq^Z]#fQMsV6tqSH;(>Dr@BV+,Zt2j*`Z`F&":jF0;2t:4C&g^Ve>Rmr!>KFJ,jVfid[[e)Dc.MFn!#$I?Q90*$10B[>9b@[%rWgXQ/euXjQFoaY$#u%Ek*2A"Gk8XQ&nV*d3R"M@7tG/f@\(F1&Hbn',>_5$k[Q4AS$_'b9.%[JVF8ErdXc=UHrSKB%A]"V/?N/*%5d,:fn]HA]Q:-7Z#/-\l"lOp:;o4Z3La+?Y(ff3j+[5[[_*MCj$2l8*'kk?4N">JQ1+:H].V'u0O=(CoJW`iAdU*WDFo^4rDBKr"%;++%B\Os#fQgp:>c-$kk3TZB<PcM=LE9X3^AA_"#IEL=@"nns4p8gZYK((#EJU$KY5uj2-W`jmn(#C=<;^q1/"OQl30BI?%Vd(PT%0/@9=$)Lm#.7Pa3i@"t";ILgsQ1g"&1=HoD(&Bie7H%GhMXt.Cj&0SgST7CLNkJGSVW8iXMulVF,hm/ErQ\rsjEMkY=]94^5%2W6%4$d$+VMct%^8_`.-_,^SnGi#CI$7\Z$=+HY?sc'p;]Q6D$iH!3:?8k#kt#qE+&ae]oK0lWZ.eB,aHBiXMPu=3g2+\T="49l.2A\r%n-@j/E/R>6'egfD.[N/\.JC,c9*\:q:<TnZb)7[5Zt4'9pi3-XNjViJ$@/35CL0AGUiHue5&NG4Q;6OO`AiOm#GVQA8!h_1L"^I>%Mn!U+cK5aNQY2H6?a7Ck8#,X7mh3lP+]PR'q2B*h*.a#!c[12t6Mh(]nBA7/..94f\<u=KUKf;2.CXB%LM2g-V5:^[Vjr^/P9Y)s%'p,$omIFL(TKc'6([RGW<4Ol,ncET6VOGA9%I?+`m8ctPhF+JrL6^aqXJdgWOg9Z+W7OBgNGR%&dujU:`f+sJf-ZaE"<WK\__!$u%ACIa0;)]YZjp3T66@:,EDgY&bdSHr.dr),%FN`"iILOUi`'7ngN3mJB*L"d+8I6Al4LA=dQD($o)5DW@m@s'#G)+cgg0:QtYn#:a%Pk*>qYZi^d^6'0\gc)#+7f*:NLclMJI;Y&s*G8"MEm3oIPmZ\QlJ7XfjU&+]KN#1@haEt,^iABqS+[D%'k+a@>;P#*D3W0.i+nuM%8?nlek?Q+d(MZBjQ\mgH=14(s+$Z9rb1(p&FONPiNZaiaH,1InL7:f6VpkAhp*MW0:df5`pkkpXFjC,fN*',2fdW1g8#d:3<+8GB%3ZW'hV8haqXd#Y&WV3+@_/:P)"gUZ",#\Z*0o&t0$!`bCNQm<I-=unio_U,nmW79Hd8m.XS7f/gcGq9_bQ;f*7(iqkpF;+;f^Bg3%6AT]c6F9sbapXns7W^0"=g<?(KLsn+d@$&f"V7TU22`nV3U.X3nWm^D/"$MH-A3B'CPA'_?as`M`+TkPW@?R[Dp=M`imUtJKLP$E%;Jek`)fQo:E,Ute(_/c_^sGb+6opX0hm=J5cNtA=V-uKj5c?/1(,Z]56kf^l6c&acpI?cQ($1*HOm3]C,A6HHmu%qK\X;)X0I96P%)?P&Dl*oT_13p?FGs,sJ_K5jQ^J;I4WfNQC216EQ'8X\#4_'A[22?>#PQ:;;k?Y6K\8TVK<KYV/"`l:c-%XfI-U`VXj]=8j3:h%/%lr>Ub;WdAGI+HMS?.M,oC'5"[I:PE5jtl61WYIJ>W+6)-1"6R$YqW/F1Tc^1XZEjQ<+<D8a_Ne-jPd562Fd",iL(=Z&j:cIkWJ9@%>!9ji[F5AsfEL:jNQNa>2pA]u>"V;Dqs+_%0:<f_gSdSFdj=R6NdCc]=*AOda[R5?C.3`H6F9P)l62'k&6WQ7;)[N7k>WSaXdB`a%[A^l'!l=joeU$F2db[gE)1S^\H,5#AQYh!1H/sK[R3FW*KO_OKZpfI@*@hjK$O(ThaZOCH[[-#f10(QQ<>DS5MCASM)H=q+7%pRF%Q7'c@!RkqT="FIOF+Msq-AuuY(c4"S6>137al^F*4e[7@QRN7V@B'[^5p\Tdi!c?0WE(=6add5<fe>#:ZX^UC+H%S]Q;!?t;P!B:%_!NZ63#;+*>$!&G4MF9=V:r6!rHJ00I11\G)i4JNk=.SBB8[Cf/=VN!Rf$#pOVA.d=>-@W8LU3F>FNL;WM[VW'(o88k!mQD7+=tJ%-=K@LR"o9G)88hU"mq;gWPBs.bN`:f)*=bVC4SuhO<SIm^5]ct@W!JRT<X3Tc&1NX-7(-h`:D-a?nj6?4-#M<g2BR@Fq!8>,?(s#%\5P?-kUid``cM/PLURTW9jcJNNsKs/S.d01NuHQsCeeNd->^!0\<FDFI34,-7ZYoaBVrF2BuHBQ;j6d<706#Q]9KVDqEUfTTN3OA%FqBf_gO/G7,F+d+/cV@60#qNn&ih:-iX]/\.],\pZT9-FoWjo@nJs,@ouF#l;#NuG.Vp0+nX.at^#WK'p[&P_'"]7tl22LfHGtca%Rehs.#B)+A'+Z$P,KK:@Bjd^(j*i9p#7el*680lGk!:-S$r4d9>cpKXj3@q(-$Rk!aa$K#r[*d&/G1%.W1Ik?LiF(">N'GTH6ZW@%/ZIMu1=mU?Efjgc0al.i(!Yf\`<1RWfPAV3`"ktT@`eNM>*mO58F6c'?8XTqU(gb[c,,-#<^[l+!R*'[J!mF#q)[IO;q%sr%=(U@%rKZqQUN<Q9k:9f4Z+&LH9-NgK8m-%=T\m?6Q7[j;4]F$_-4DB+"ZirO38-Qq9R9ln:E'`-rKoLr>VG)50M9<Z?YJ&RS"]"=\d.9k%N+QUL+NQ$M*RZN(VP:VJi3k:2!Mr1nYm]hY=RuVB+.KVi;NJlhp2\gnZ2Rc\?7GIX-Zu_I*2a.BQY9'T`pVYFV@qWr@OD]U$H#Oe%;S>Q6,Ah"K8#TFBHXX^>12S7qh=I$hl>.O1A/9u9H%n>?ddiY>)L^f+XBCYXRmn(HlSc*Ys22=fG\VC=:3cK`m(`(-%c&0l-Jr?"%'LYNfd:I7;F?[_C94o5jpg6(WU:f^_2])U*5-,3C8@GrAj>WX5ZPFES'[6(^m!^VLIhJS5/M>TJAiunVI1J4L0&%sdNie)*Yqmi4%nX1kZU0.*aWW\/MQuH`?a,9F\$D4YGh-ffJW@uIU4^7HLjg9t7>tWmjk"uZWq6E$_O14U\4F`Rk1u,-uZ<Tc&hX]ld[DGql,\mm@%^N4Zq#;[i?rh`jO-W98+4]>*+CNYH^3lfk/.X]NZ;1uYXEQSU5<@4b@=ulqKml=d^er&"mI$m0ZQ^]kfg./mm><fXhZHG3*STJ%p%ed$V8IO@q:NF'@?\W=gXk-s75);TW1UL?R`D!%KkrQE"TK:.+hDKOf.2j<^Gj%T!fW7;iHC8P6alh?@^;6SiT)4=u@/X!Y$hl+sQ%<<=aNIB.SKqEOEXj6o[lW^G[I'&[[J\3\u1A.8=7@=-NY?`d8rF]t\\X&CtC1^WqJVFBgZB\euVDTf-9U8[]ueNU+h\#MnQIC!gn%qXJ!91,V>D0J[Q3mnC3'F;ieiY4779:,B*P7`4G$g=6[2T`(:02h%dOg1pehe000^!Eq)HenY6Le3?-DR9ldp1N:r`L>lT!QYs6X%2<-i`05$<WNGA2D@MZ?jrU*Ipfs`I$^OM2Sk,7Z#NXXFtIp8Jt])eSi9`r01<4d)I#6*NqW_guEs6Ub2lt!6kT4Z+<qlN`o+^]f4%l>P2W]O8JHhIsa`%\iL@LS6VT>.o[\hQqZ.8f3OW]o>2D[]==9-;Ojkc^9^j.;)i*,L%."PVIX.+2Z)a@KMeoTJ4J@X.0sVl@7?H%5tn#@1qto_]m$Ju7*GO(MdT.&`Pe8D,2aZ5pH!D`Ym7Y+BgXta)DVR9CJ2rZX'NV2OSjX/^!B`o$S2q4jD?GO[XHJ#c7#1'PppEj%C&+p&?$FOc]<p!@X`SB3a8:9YCL#:+QZb'LoMH&fWnXXgCi@dRpo1uMOP`,(X]Bip!^T8D8ou?Mfl)==48kd@[GM'HCc.4@bZbh=%Md2Lg(2A!\q4cXD0ik#=n;qN4-Yf[:Hu!0Q^e46E@$eUJ^A[rQ@("5:Mf^'8`>re$F<b]NR]j,*NJg#<,B>GL74.%l0dgUa<lT'm%g419u9YL63ZI8V[P<boSW;m:TW8`WnO,0`k.#=N%HM)$J<e#VF5Y$=FIf2sPe#N)u5Y]`/@Lj1pJCjG;nW33;NCH<Ac%&h[To+_R%/lQW)$\'r`F=gEH)SKlb&f&F.+G'PMRNG!u;?X)V!8`/gs7>j9C-6.m?abf^G$Uq$IKl75^jtBmo#OZIT4lOuNBTJYm^2iXh<'&7%Os$!G?@Y!XSW7'l5gq$S$!(G^47CdJ7_2cA-NaBL?lY+RI0_KiTD\0I[nF_fX7Ki7:.rdT^PkX_D$+R>J6YOHX.As'cmOff'3KpP%Rue0G?kQ885U-ZF<>GY7dHS*e2#P=TF#=M*_=f9F6e1%+[*SfdfJR*dT2*==fl23!DjYgsM&&/NmUu0deS:IZSW?J.XI,5]rI7<V%-fg!DEK_#KYU*>dh,:u9qq&4W[Ja<[L]:uM`@;^KiXs_u]Gg9aDRMs*NP\dcjjgt-(-gJE:/E7O22q,ki/@O:5soC;^97P^'(':>%g\PVoC0U?.Ze@;Cbhcude3#YjWb>f,3d,d/=S_7S$"cg&rd\..AG2MN?]cGXPt9mUZsU5ukWL8fRA9&.&RC9)cKd]fmWfNjH5mN5%q+>,gV@!K>Ol70hoVJ%)KVqkeO$E,D&&*EWd=7mb&3Z!/575dV']5EL#^GiBW-V^.7):Lh_dCh*kdo<*Tu8piK$t.B5IPn/)B)h(%(*)T3c$pr?fl8BXOctBR#&e@C_)MF6p(8/*-)iTDW/C_*6s15?r%D(ZJ6[dl^_s:;s,Kh^T/6C(0F%NV'7[IEq*TV3Os4VfbUu"Q%!/)a+`G;O.WC>\upF[pad/a=5>CsFh<L$Sa\tZlU6<)E#=ooI&n"DNS9ml,J.kiL5fN`u1"$GKjI6l*"0Z"ehY>qY^s/L5sA!#9a%g`.@T[;#o^4Y^/NeSNM.r<"j;R^%en9ook]T(hikWf93CTX1N_O*cB1]\.\1;l'V<@dmn"W\pI@j9US%+n-;lSu]%(bU)ZU)j'hZ%Nl1lB'iqFtDkA^(l>Z089:;n+GQ=<2.nm=][-FXr?iRO^XeJ!L$2u"ff[*oE@Z9bt=8j+qBO\^/I>4H\Y52,*i@OrR%YN;e_#Y^?%_KG:KhsIh#riP!tr:4L@0tEt)HM]U8_s,[(8cHJc5TG+]H)u0S%$*paL@srA:6%@Hs*ajPpYqh+Je<[thlI,N'$8i$me_M5O'089%U]0ue$hHkLEo-)*h@+FFaM5#V:6bcWYOt)7U+&ZS=r)0O1im8.)ugh"B?1Sn`2A0;m@i>KF)kI-iRHdmeLcfpLH-I1-$Di(^T9qT%HZeJYeH:Te^j,=qo1"HF=#<ih[Ji>&)XP7I-iXVB'feuZrg+)HT7;is"iKt^\Y5Rc[@%Zu[ci?2X>"<$IA]U/(nG?P@s!^U?UhEq%QdKMW^ns3gJf$Z0eLlfqHdQl9hQ+BA)tb7^+i+SH5[?1?6WW`P#M%s,^\VA,:KhU?12qRHY$PPXQH!dg8\Jrkhk5Ul0eE&q'678U%'1E4'NZqqTdK8LWg*XmD9m15.2<@F/b_^;<hJG3OIh&NMDcW-p7>6Lj=]!G'`^T3P66n.Q[(:BJRQQk&;U2Q]X?sZM\gY8HjaCbR%4M*PrL6^@5"Ea>@&(\mIN,"rc`gG(7LV;7,i<">4#K,dNb78MQ2]=d.*fTG</f3uB]!h<\C*'b=WX\<G]ro&c"U7B!eSqI1H_&`s%iPD)Yb&<8c48ROFnAO3]gr[q&&hFAJ-FLV:WT%fNjhHb`?E4`fXZ!3(2m.,*P,PUoC^XNn;V!X-KP`66W!Xl4\LLVuX]FVp?%"N*%7@%uIS.A_"qi">CL=RoCb#)$DS0+o0WZ>6e(L-6,q<soS2Zg"NT`a>R)dLoZ"+.E+ZaNF-+fL^Wrub4%Wj_p(J].093.Hd&Xl?L2%%d_HocK4OH1JsKn]n=hJW]'2!:Jb]")Ui<nY,3V@!8nbL9Kg`SEJ)?s,Cm:;[;GC0dDW,8<U\M<c9LbtHUdL/K]>OOc)/$qRl06p%9"i[oJtMq*F5sCQA?;!D<?Ng9BgU:EBJ^WNQI`@PE$J"XCndUL&1/B$$\i_A-%F=tBm&_@D)HNRdh19B16T[]mL[pAH:=2@>@SJF%)rKPb`_[C:4E.b6$/erbJ#Jg=M#e>C'bYhkOH[3eBA1sE:#aia^_5R>oIS1[plZ+aW`7l74RRG6<geoUX*1/MoG:(nOi,:u"ii2G%6?H?FKV@iR@!^c:)1+#nOaK3/@Cl<0C!#2SI,;Srkq.#3/^EBZ:=FBoAm$$UmAJZLmU2&";et"6Cc#6#[+B<2=)HG=#<]a?c1cRe%kS`nD9VE%<IPl>tUYj>IgGcW'd1<gn`bcq`=#=8YefD=ug>V%Q\3Dfbp&7b:3e[-Fd*_Q-j=@+N6tQP7W9'WIFK,g&!.t<D"pmA4%[:.2bU3^Kp5><=6\[%nEOq;6oL=3m^R13dlg9.lX?etQS^JVDmPm%Dia8K<`7OT*TajtdA;f-^4<LCV9rIKO%f:[itRN=UWIVX(@%7W"6"UR@lXcgfY=$IH;1EZRA/[hq';i;PGd0lnQag?3&Bb->`J2l'H[c&=Ntbd9T`^=+d37]l@_Su2%?AD$/fbKOqd*0n/#f/dBY%#/IiC_t_DgYU7U$QUe)6iuP$-[KrVc!V!/_$B=b.W]1f<O=r=:(^"WjgV%oo/)N%!co&?-\m&SR<:&V1N?NG'-I/?#Y'I1.?9$VP%)I58`3Rn5ahsId\lBA_OT;SI9`bVs6!YMS(*tmbga!VD>k[.5,+5_Oqm7qFfpL"CuS>K<B*eHW>oNLY/F`@MjJ*YJ5<kE.+U(:P5%2sm'[)h+p8FI+Yhj:H.:#_f3p'-Z8ahcg"7"r2*G4G9tq_L/J/\jPb*Cn$fH<,G]$N-b*/26>n7CD_)&T`+1uC7VM+1.%)QjKB,;%KDFi8;Zi/_[m+)fs)L'8Y9%rGG[,VMp"gUXZl,K_`=q?clbX&9CA6*0#oGk-q#``#8op\h%-Dl;5nL,@WAY2_eYX[hTR*eXTe-OX%c03_CR_pQ,DKjOI/-kAO;X(N!S!NhNqbO_:p=5`7@$[KYP`0f??+&n^T4k2+/oYHZAV&I8n]@bn-PJkD3hGa-:cYPY"BW%dCb</s%.7D''=q[(KI;uYn/M$ZuZ]WM]Vgp6S)Ggl>.o;'@k"t'am58#=G.Zno1fe*\S+T*5L:Se#%GN@(LmLq7N/hBo/J'(/T3FV9[bW(d%hJ+l\'%p-T1*B<l>r$*d5'\ZQi6D.l#J1gI97I.;#gnq[l+]R7@;rk!*N[\$;>=R]5jB9<p@&i#]`9,fX7b`eCC]E(Vu-2=F@WtJ%la.ULImR'*Y5l+P\4lk(!V<u+rp9KrK>%FD/gMETS'cN3rG[,5ZJ\Zfj0%Y,2M/)SHF'n9"gI8>?L2)'R#UiP03rA#47=cuZBn?E%b>`f!fu3(3Ws[[57VThjo.@2=:#i!`/`V)]M^;hN5C^EGXXI.:8KWc\]"?V^^BUqa+9b-i,Fd]plhhl/h6<(k6B5fefa;n:):r$W%<B_\57`eh/*b`j%kZ?"D:*<@icYH"PKdkb%>)MHd#NjCA5f.g>0B3VNBYE4Upe'@M/Q&oB.jt#)NQ-h&GrGrY_$6WoT<8.[e87nC%;m"/I0BWs#RJsP#Zua8kRQV_0.W/a.+6&'L"WF'P$n[j^$!E.qoN#KqDeG*,2g_?sfs6p4U\,s:X@%,HH7ggbdqDD:MD!3iluQ-=%9SCn:*YS"2ml:GV8:c;)f8uY^(MBIpgAS1`_0KsJLN^1QoEtNHNrVm^H/=O8^CXg*1uACn0^_Q#/DKD-fV)'%.$8,XQQ#t;W`(77%ZFAG3`Jg[mpQDbEJM0\[+Lq5dYfZsHL(FGbDn$M6fp-"`^otXYO0fh@H%Qas06O=JS8"f_3O<Z9)U6PnU@DlY%$oX@OPBBi`SFfo%/K)X>#W9#`^>r1]=0EJbP<)r@D1;1hr$Ek.V^o(Ki7.Zo*j!MR(VN0"?/PY<R6=cXQJR>M%J-Q`>!L2Z`ffo<H>GUJE#+;N;B+M/%Z/j<'*aAKB_kWRmF=bsL3KGa4hNVKm_P&5ceo)4tGr8VrSgn$FHO.]X^6Qt'QOUKua]eBjqfB6Tr).7jY%=;=4V`.3NFF0il"mH9%k*OdlHX$AnG=1+f]1uF2GKNpro5H(AmOG[^Q1b(OS%+j32-DI#gh9sqMUB^l3_F5Ql=i2cX=\4me6DbhH_k.R3O\Qb;e*rGG9`F?%($aGZUqLQddM[Ka!$Vr!dZ"]aBC<t.:aAfIe;ZUDPba"mR?FUK3n)WfV9R\a-ht7.&8LgG-/OW6DPshp^$7^:[!a*mS5Z.cFFlI3%2tGO6+p"gqk!_Un@r'j\O2])?[!\P>;]FJrH#"NnUIsk=]]n&3;s3]HoA%kEmu+WfrhBBE[KXuHT<`YgIZ<d>2I81`hMn\Wm^of,%[jTO[B4"Hd(H,<OpNp5+VH2T=24m@EZa3_W8#iUeCkX^Hgti@&6MB'<d@&.D2V40p:V7S\.dq:;^5^E2b&*P;V+4mXgR>@[h7<4H%C$#(e.UKdIQn#4h0jXQW@?$j0/<E=m.r82Hc;j"j1^Yf0>'>qkIHRkWFb5T"#?aWD<-mfPAa`+C4+!+"X')LNm#eM5ldt?)k=H>*%]Gj!`0@'Q/qhJ4IOgrqXGICeUpbfXh.5f(+mm`T'D/-IuH0!ZB9VnaYiiZn\UUkqYn7a^@)cnn>e#1UJB;*bb\?Hm*^=\n1Sm.gO%0Kq-Q)r3^.Y'bRW^DonQ0eGV;<uaO_PDmGl$X680Cj'fkY<1&p>Z,W[GG>DT7usb!gZ=*hV`?W*^9\^]*jbV6Xrn_^SE@I'h4<eG%#IeW?B;<KVA&l(+8:3Z#gKsI=X)agFc4>C$hMpsH:C!0-B$@U/Mr"64eL6B7Ze=rfm)=liUF"kkGga8E4]n;hW')f:H8Q$Jk3?Zo%leC$lK^mjkC\1H5?J[7.1g3X[DeYadBf$HHp[rFgilS[WYF1<$Jkr-P=lHX^P4E?%G\lO+ZMqNM5?dV'nC,k2ZYuTj@l*Z6fBApt%;EcLk7ZkaHZ?dtFh"4?c]c-9[Ng=<\UT\^d,r@'!Yq4?nX#%G+X&8LAem^/#^0DAVfqj6hO4P&[:Z\&tBQUrJ[PTM:gEkG7\%_'@%2#_qgo1g4CEt3--?)N96'?Wi>gXt`\TIN'-k*DmsF-F(<r^tX/2\Y:!X&76cRBHCs:eNOF,gWS,pRS>28?HYtpXj.kYgI97B)Qmc%#9)EV\JgH!L#YtW.#uKnC"h+hYL\$qRl7j'H#V[ujZqk0cPA6R_Tp=rdJd,1rPYLsk,[gIBp#7kHq^^A[(Y?tOruS#Wo<]Z"3b^d%pN]BDMt5SAR6D]HbBN9h_3QX7Vh5?UDGrMSgJn*Bk(SHAI[3*U`''\.Ku;QNk4a%%3.BUFo6^<bS/8qeY,@QrF2&uj?d6T<hS)bn%(L)Y$^Se)N)>d-T5@'0R+><[qN]eK6<'.tIASdo$FUB$Nh%QqTQ8ec6*XLA=HCe&OnG/2cSLkZVhEDP>Aoj#^:VVS'S%D,@;i>)q%3T9MoIEC[>#@2Sc>a>8ZD@+YBBAMb8EsMQ)?JJV1SlZT"rZWBZ4FNb8$hI./^Sg8SroqXu0?)dOimG57pNaB:'Q:b[kImLf:X+gJ%[GIGr`MDonCa$>ZI&[=nA.gs6RI93Il(+pcqUDYCUg>:SVX/_V5?3jWTOHEIO&NgVO/]P;T/56Nipu(HS+2&!gLqsL(TBa%HUP9n%`d0^aS!oTaMuqIoY/qR/Jt:2a(uNL.(5eB8c.jn=>aFg#CM>11.`FaNX]R,bp/CJ7H(2M@&oSmN12Y@gnuTJh]^`ZW3o.>_2sr92%R5rcc$S[@Kl'(?A.+e2NF3Zh9WNX&`5lt]A0\KShE@C.uN3og<ZHO[Xa+k/:O3R5be^)50>--iAW,d7Fhrmb1Q>nbh<m5A\W*C$3%I2W:0ppbcTokX1GT[E.<h-p%noCK:hURggFWbXLB3uZXmPag!O<Slq__a3.IKY:7EHnH&@RdK`S`3aHXK\LkmL"R`q*$2a3<Gq9I%/BQbMK>9^7Dkgk2i7f[**,8NLckf3YL4>uPdHQX?UZdd6OuF"DO6"utYGVJt3kM]9RO?u0T<ACL6OgqJY(hP,4<0$TQTUu7:g4L'%rugWd&33.fdYE,E_L7PdJ+]m.r'.2d3+X[uh\)8.`?k-9SrF-L.9M8%D3q/e<"hQffg9Zt-hAoX%t49F/\>K/k4dAMS:'76?9@=Z%XFXjpT+]Eh/#3erDf:gCS$jtGi9,KXI8k,WQBUcpd6ZmkP$!2"DUUQRl`^i[NH1P;/02/IFf<X4eZmX,i4u(>J9JL?17q#b%\*rW%J0d..h-d&&.R#74Q'^\>UShc5$sKu=9([Q<U6?,=5;FV\m,(CYl6!9r"$JJ*cKnIPO7<;oqf(3_4nir^`/plQ,$3ul16jl@j,P5$%qIgC@;^2puT,C[r>bK:H8J&L\1]-l_4.*?*^7q.acWS,s3--$jo"fE<]+:,J`hoFUB3"Gq3uaOF`,_lLFDF/7gb,uT%@Fg6n<*Jo%UJ]$KCth4B-p(C(Eh76HT2aZ"omH:<Lk'@j+,k@gkitIGo#$_c.d`,J>:SmUa.mF>ir26"Y!q?Qc8iJE4<*'5qI,nik;V,:[C/#R%[nhGsEBeMTokL)lb+%(Vb(A%>^(0R-`,i:j]L-LgM1b0>kM,n*/mmG[@k^`UbVTUslu/_o01PCc_g'5_A3.Kq"SURB"m-38As&X)%-aj9@mT')md:Y,3F85Z`:Ba*^])cF;gg:%gmr6Cu8Y4+G:q9bl*r?,Ha<]4?][),f#=G'eYm5OVqWH@Z%T#fP"@7mg/8U]MHnc;k%Ms5S\:*-$RH"#:f;MmJi7/7i?P&IH9Cu^+IO55[ZYAUq#L<7nWFF&nsk\e#>.Zm?$@1#03[;E00\$-O_Ha:9ld;*/*M5A7I&Sq>&%&W@@J_uV<dE2W/M,@u1BIP.0)V:biQBanASirSfMSdTWkAr$0Zp(8;(dZ#r0W5kpaQdYs^(gk:J(FV$k,6N!*Pi6l?[,h:lpP%Lo%WDRJf?T1S)hcCG7;ko^QUQ%l#(>7\eR,5idCZ6fYDOu6@OP;k*Ht00.S_/DX3"::t6gJT^GAq\:-W#lW*GeMY!BTj91F9$U_)7JU%;'sFWT99'(M8\Mdebt,WW&&hT(E#u=kB,oAJq%-Te\VU0o^"SRYn2bF6"QE!(lAU%^>1nE'@Xm$lj4kupu'qHjk&6ToesA^f$8&C%8<u*c/;XM?#m7GVQ3gGi3#hA_g''')/Ve8[&_(dp0TY%%C_ZR$-Qld.0"8_Yiu<l?"/Xjj=9[X<FYb.\]@0UW7.YoqL0"AkrTg9q%]_Vk])4B^+49[[i.P4Tj41TMj;<j!rKs/W5qUb\1/Di3fXOCfW%Ps^DLL4D#Lr;e.<hP7q&W8ojGk)u^7MKhIZ((leAld,!i]hcb%&bh]h%?3!^F"9%&@3QtJZ%Sa_J9g!Z8Ck4>EKJR9)CQF<#T+VG7>nf&/kd*/q:UrjY:^<5]+t\di/m-o?X],e#*o-MB]Z6OEJN=-%eJ<cHNm]qBBs7!Tkb7$#G5HlE;+HOqpr$tA>k&_^:7h-=1cSe*c'=KabE\AP0B4c'nbF6F5\GC^%,1S'`QV!bj(,179//C3kk9].%bhtZ>K?R@#"ZJen_X2cL)&uFY2D<[GPOLTkjS$=Br.U)!g\H6Y2!2/l[LPac_49rS*G%nJ@,nNj!IHb[!W]O9$lu(\Fq4D:3Zh]E%WT,gW6gPAm_S'(_;mu`YcS!k9@c:N'aq?qVqeVHWhl+E:q3^I]p0MU.r7KS`_UuJNGSL99j/mn'&gH0>^k.7nPYO]A&LWRWj/=7;%/h#RlI)FnoNeEDTRQ,k^RS'c"50QE6Q:#$n$"<W8Yk/&f[-cXcqiXV_:+:*6-=1,b1^jA*c+CtR2i*f1d3m]fT._X/o2:ruW//=l%%FSoDF]">TN<WrE+l'S1>T"F=8_dQGXO1ul^o\TuK+HCD!6R[(d2`goXrmbLOYiN9VhB&(H",IIL%rV9aSt,c#@AMk$7CcB$&1e?%-a/8%+2bA*peL*o-Jh@sF"SAeCj?Fk.VMD0/KNh@`putHYmY=)\>\>UB@4Dl$d-<p7$p,=7<l3*]Cm5m1V:3'PUs;/@kZmEYi/24%&m!7`L#)^cV.NEShnEq4c_a(>dU^jtS!n^^bYU:5Y.ZJ&Vl_f79Y(CZ689k;JLg1ViIp$3'_+"fDIDMDW\%FgMtAWPiS@8>X^QA7%+N0d^aK1iSphm74iSQlpmohEYn^,huJ-GfD?FJ3.#)g::o^D0W.aG!AY[Z.N_l6`mJ2=b/+W1iH'CR%ff_>^:m!I]G_\%=!@B_?U%cnOJ'o'"XY^_X'uE3H\()Qk>TS433h!\=BspH:^t+0p17g4nReKN8`bdnrHSLke7lXhMV^@8'I@0[<IEN@`o"GS/U=N%+tp=sq:p%_'9g()cjq_]F*\1HEEdmApcOgTkj\qFFGXk35Q9:*%kQ(P;K7XF1^co9<Og!@H,DCPI0'eZXht(#("L'n!^lgKptk^+F5<lEl;DC%Ms2C+UTb]7&<n(e/gILT+L!"_*'Q\5'lI[H7r^9=HOt%aHqWI8@=e4[qeOf!o<$Q#SL9/0N$KhILP=R$`Q#k3"1!j(-QX(&H1kc]%2?kF2DWCM5]5^i!0$VuDjbc72oi/KS3%:%"\k%303HV79$p%V4cpTm9p.\M=)0GRN![c$_$dPEOZ3;W!TsHWAO[3X73BU.K?#U"=%4^2lg*4k&:\q"V5O`KZ;1[+2YJs59B"_Z1BZN\CqTaT/=UK24%*4k&:3oo@9jNn'Cd*]RdQ:'ijO;sAUB#Y#LlJ"#-c9DEs2Zu_r%,/&NVY`7CmX^L=^mNO'i,PbhfL:o6#]jGK*8FO[;8:/JWfD+c,c4JGAFQ.RWmOXjDSS!m2=&9N9i-mel280&u_tIO7oZs'a&gDBL%FT:-YWsOU]*1S?J;$rTa3%T(bJ5Y.d-]a]Q2hJ2X.V&2$K[E.PrjWcW'njj`6>QiT:U2lkpQS53-B;.nf,eO0?1Zio1Gmd%e?'i7%o6j;U)`_@ifV)2(gam/AZ<R+++MQPB#ii0-A?9JNEcTe@XY<t`2I<5GbCq(4iZX_NiH3YOe/oGL$(YU1SU$eE4qO;7VB1#15q.a;%"jSe+.0W+c*FTSQ^mQutLn=$t1JG*6A19TaG>+*ek&8ph=_XT#^pMrPG@H4f^8Ls$)(,H1Hk+KG1QQJ%*jkK69f%0\@,.pWO?N*f%6$qONccjK$ORZh+I)GZnLX5#Pg`^R]Gon2jcP=89`XHBJKKl[a#rZ5^,'2fqs#'D14#uqtJ5LjmY?m/RYp&?jUJX^V"IM"7995E]%CiglS:IDF#6M[oKm[3HN`fMM5iUZ(3["T"j*1()t4X/_A;!n1cj#,N]fEW@)ZIdhNP5etdc5$Cm`_^SpIWQ,2!#o4[j(K.im+!(i%5FN!RPk,b9Rg6P]YVHhF%J.iPo+Y9(ljkC4kkKa:Cj]?Ngjj\AnQ`:cMQ9)HHUjXUX.ZTmM,MBb(&QY^k]r<GQ=K%K,CMNh9]nrT%MknV`)j2=&7-jV\7(ILQNU;dTmJ9Gf-0gUh&eB'k/ZrFWO=VIMg)VcX'9G6:>f?^ZE6g%%ZG>tR3!W(<M4gG2N>.K]5RDX&9S]6l%+u8;K?/^k`/L'5D,rt##lTKG[##g[3M9&d]p9Q\t6q3bP8^)J)j6R[2jKr?6oSAIpI/dhtieS"b9hG-KmKfG>(,@'IFIj+:6^onV%K1Ta^.jK1qLs01]LeK(!I\)$W-<,!qpL0.E,GjQ+mZPZ$S7S:%2'`\iPdA$k]0TnjSA^]A+bSu?2]11g-#[,P6DTWr3&b[2g,\K.%V`.T,P%"/"j($pc\fYtY_Q`Yegq"%@>B"7^h/FYZ$'A:*-@[jKE(T2%5hI[4"q_esr'I&O:A0lYf2b&]OULT"<%.?N#2@G+iJS4V%kJK=C@QYlQgA,]OSj*uC+)VpV9d_$CSttPpL`7@0E'@P%*NG=a_qFru>=RDToAPFq#We5u\:EC3gsqo]5+MQu,7cN!;Ec)V"7ONk%Rs$uc:DW,XoAP;a@XcK]gK1L+ACdN,)mYemoU\SR-&2"C6gTX4@+#a"+6\+o@`?L=%C#5Q]UX^<6(eYQ$m'hNQb[T9Sqge8'o*rO%-I/kD:m_gJCo)!2Au$Hn^1RFmm=>eUiu&j,NCC;nQ62"#"Jkqk6AXUf7#/YM\E3V)YZ"K;DbXR5F\C#!4m'@6H/U](3iTkQ?M)t*%0J]D/:$4?@!b^0=1*L85"O;g4k\8#=VBUar^:)Dg1bIU%elMrD!Y7@%/JWM6,P5n^<tUaX4JDJj8?L1-q&Wo`Q@RT9bXfF=Ak)(Y%F>?`9I]&9i.aBS@,pO/_9I1nuiCoi*MGU14Oc%h-_iK@lmHaAghZ<fb3&EMB-6q]53M7K!`ULDoEEnE:(gAcN`&i:X;W6tC/Bj+q%B.(SlgP;C)4cNE#9.F("gcpr/2tjn)Uf9>R1Phor$:f;.$qZMM3#.IDU&#I>91$qM?G!q/M0Q6_AIpKaagj]HpkeM&?"kA?lTSKs%liYcd`I9rdJ4:"k,@3N/s)&5ek14t%nF4C#he[C.@LKGo'6H8gWq$QQH%(%B_ipQq.(N+LG&i7Q(Nf-f<6J]'OHVgig9Y.ESiE4_%`Ki^&cLFg)K1Ht8&:]]lm]VMQV:+$S?6F]W(PlG:(,,5]r-!ZLMm;CBB3!%.I-6kO>&SiD;<AH<kB1c$(X"_?F<nJhA-=uZ*I2;R%Kt3NJnl08->N0enm+X22:.[VP-+c;lq_h&!eb3]64%n"rr%m]2Js+r!WdgdgWOCKY4Eqs?J)8j^lnRE2[F;66>GJ@eip`s^h[DU>%F)gMlZ0dkZFrQ\4p*$paFl(15\Ds2i(]Vcc^%sTi%;9if=:)X$mpg:e\'`jGD"c;<]LtO.Fu,E>H.T!h\1X!-aZ#fJf<9n.G<BY#%p[n=4S2jo:Kn.h?5C_Duil4/dNi3g;j.Zp"0-sj-2(3W1I*:o-#CA6+j5)3QNi7u'g-b>6CAS4,]V?hQpK29X*nBVhkK6#sBBU?f%K8X)CZ+e=tP&mAIGO;c0ekL0k6PhKbGHrnY8N*@Zl+J_Z^N%2sY:nf`1\VW)_kV/q>U&@c^Z"q$%D-F%9`McN;B%\$29\3.@>R2/%-AM$\,.o!G&#&2tO*US/5\JC;VNss>28'h]%ML%Uc>+KZ)24P.S'EONDYX#]ULqu#`<7FUBkPn?jjKj89K/HdMfU(@c_g;n>#.#F%c>+ZH-ms\$bGH5e7r^TCFC+8ihJ9<YACEQZPigEiYDeF0:$94`3pg`Es.#3cB%)GrkA%kM3nqZ$1RHC.<HOsO3\OtWE<HTGO\P"m%P&7UQ9%e;m\TAlOk"M.:k;@_NR?1@jVXjl.<d:O0:$7d7kE.PU@5crO'H8WnD@"4YPYL>+9/e'66=ePjjjNtc=A=lOkN.!#F/p\7%VXm\Fc?g5%O\P#H>!hA:;pD1\!gk&fHQ=o3c>/qu=%:3TVR)<p?Wmc?04SVCH-\!haY@BcSW+J`/*W\J2/Y=C=,1U)&G\>_Lt%(k%5dJ,=dN(m88X+t@(dSI;*/C_'1')Keei7R,dnjo?oId"\?el:^@S6CFD0Xi:kN-!&UXRSZD/Ds=,)ZBo_@94o&'"`rk4#UEBG\Pq%h5A#mp"X7'FM$>4.qh(C)VEks8;.Z=:akiOAk3@E5c8FC%HBMpP3;K+N,qIqkFN7pmQPXr_0g.DEaEiHB$Qh[0D=-2'@J0;H-KV?%9Z228C[Oa[@b=+n+VX+;E-h4GfA,&c3.3Hk$_O<WF3WNs&]HK.\atb.\hCW60ir)YR_+-7^qDA3)e62ZfEL#8m,O[Y[6MVmMt[-l%:@#o>=ZN$4QY/O-08@"NEbHYffA=CWpKHUE:OGUV^@0ocpJ.!I(Y&8!iWu$=7dd,mZFqjF-8MAk/ef]1hQZ*D!(eLA-d%g5k:h#O%\_'I=4W'UuS_+[]3unl4Jg98"m"Q]Js)`EOOkftnGmrmWAg:92bf;.`Kb,XBLXfo,6c'_[jSA6169&IHhuFIY_@Fm+%WQ2D!Tnm?%@#,cSh2/OH7UdLFp<+;aQ4uOQlcTQVjfaGh2n5V%J1ZLRAiAE*9?QiQ+m!D3]`p&?J[[PIKDLHHH5h6)AsgqPEF@tNGaU"Ie%ENd%EdBY]?Fgae`g$G&ek#ePJ*(6U&pM3E'"Fu`'KD;K&jYE7G?_Ibrdo(j[LA/(<ttkV,EZDd'jgCC#/q.r4;&OOLqo'k_jtFhjjh:Y%BEL-*H`MqXE#6e=TCdk">NV^D*Hr`?hY>lF2qC]K,Nfa9glsas(qOUp$Tt%G7".\:)t"pL^tadSA)2)?p/LYNLYmq%]C;%sEG!:K%(?#pB`>R!IU]'Pqn;4R4b\4J]qdr#1+`]5jAj5ePp.<Q?,&fk;Z\%pV&NGt#ee0CL<_f5gHQ@>`g_SVd;=`HH2V3Vn0$it'\C6fL%2qMI:en)&do8II1htn03L*J$"h2mmK?Rt90`Y=Z5p?Ea4A*<N=S[\d+cOeh7h:$OcW<?Vd+f$k]'%7;X]2*'Gq:l:J^q8cp4uR+$%OUg$e37K[)725g%^bhoc*Q(sihWehZ8uHZP)s4'KC^6cJDos"Va0h<.he-T$!nTI%!?#=0*)/:UZ)M%'ptE+k?itJN6hi@SF=r6s%%!be.c#`Ya5lK8saGk:?]C$8-$9GdDFH3CJ]c66Fe$D1q!XIOV8*\>fi[dZ>:VXm8^'jkkMP]1XH^NAc,e8>;q*:Q.LMks;1%rkS%Rb$_\nW)-JEjG9X[M`dJpWeOuS!j#qL[4S>df)g_d)qgLiP'@cA_k8dEP%g1-$C)hq=c0rk:a!n^\=LEhaZeJ^#q>h7Vf`;Bp!XA%4"?cTqW^aKlcsqtIeds:cGo>.O4dH55$ZO%KP0/,Ag?fVjP-V0d=ig;7^KFBB0Xh.=/1m;p,*uOE2M&`r#=HuHF`T`FMUN/5-;nk%3t3h`eEF`#Dkilkj[RIpd7BeirbXeN?T:O*d!>6D)]OTDnZMR!VVY8OVeOa:4uK[Q^JEs\j.R%7:W@V&9O`n'6f-pH>!!o@56FcJ%9#'D)U.doj@bW0!M0l</h3Y!Z#sem\=r$4XeZ^Vm!>j*CHsX!\bebP=FsH/-6C2!L_mi]ucf5>tl'>T5>`Y@W6:[4,91(?uZ$&G<%dqP&K<C=(?(4E)^ULg:tmEfsGdi41:7bjj%]=/%B2fqiAfW71(]*%.@I+I,8h/&2cORbX*AjgoI%Ch[p@PbMQeiC/33"2#+r&'J5%6ok$%g5n&AgSNaP_(>o2aq%Ri>@GCO>F27nb&b0W4*c4T4H4D$0aEe5n+c'LP8j0]"uL%9e2IbSaFTo@EWAJiM[c/`PQQ,DKo1pO%2iWWGCHJ`JDfD>dC7&aIH?8.KGp^a#KZJeLc5bQ&e\J>W&J)JT@Kda*cN?!\ZT_Vnj]cN4YEa)4(k);oH4%pDlo+@gI$B)Y6o&O(%Z*k\>\W)\AVY+6gA!.h4f-0;s=Q)$0/cE$1r6IA/iJlSTV1F0[W2Y<UnT-90HKFUN:?<IAkKUg;q<dSFeiH/3F[@lO-cB;)iIUge%X.&d@N<3p,NXqf8cs3/>-oS1`7f\qFb2kSs$V3f-8/HHNn;`n?(tLcjhN^!6(8+SUrGqs%:=U1)$da`_Ih&.;IcM*I!5mq!1<o8L%"nDaMg5UD"lXD)L!W&b+JK2J@4&UiG!=h%?5'n#6ao_4/k<KMb:l^eo3C^_[c[1Zl2@D3T%\W81q=rCM=(>OY2s-*9,@8OURuob^%9DO<1'rH(%?R3;4R,Ck+QQH$Z0'/kUd;a*?$[X<EO2Ck%Qgu;\+]A@,V0o&q?THE.I%F1=7*>#3<0R+&'UrND6eQDNZeo4MNO,=k%DtP&0PKW,q^G4#g)WP-ghl]]4CaeUU^Ie,JKtl4m39tGhB1%f.r?a`J.a5STU%0]]^=U]*N`RXHK9O?ef5Do'<kh0fKZe72a8]J\%d5&8P^":TT&^FVZgcJNU^"4pICOu4]Nc;1/n?%-QhZ1O]oaC1aA4lUm%GRR;SU:<e0>`Ub8(_kuE3EWQoQ"m*SUNE\]mdePcK1+H%IBT8QMpfDCIM85:jg`nqGjA=>9)&/kcfUV7]mdf,qMfY?TDuTRUYWsLm_+'E..1=<HqnDsq-H;cm:<Shl.kS@]V%Uaf];f'"fA2Z%IH/f!'(`lgc^jekm_+(clSN;LVfAnIn:k`9N78I.p%-?.Z`PQJR.gTrL+&*Rpq-hVk[)$nZ9QIEIO:h8hWd&^I=*92io,5+hrK%n%[Ti\Wb3$5+SU.o6LdUR<%<8RYnA\KbJ):sXna?&X50q-XQY3UNrQLKVcbsLD`_cI&UVV<UL?l*Yh!5c(X5A$eiu>Eu,OBi+@iqRX%c!I;eY9/PZ4dR5WoS12/rJ"XtkHA=6\CWA^g#CtWc7:9Wf?]YobZk#mbt8B,k1J68-b@n_fZg[4ek^CkT1*V#/DP75iu:,hfB5?3%8Y]Fk>Q#n\O"Y;bDSVhoO*giF9nm:@M%ee4k7GO^>Q%)C;n1G?-aS*Ul::O"jS/KSDfd0ElkJm\$_Fd_MG5\cano,Rn8V)K`SC4a%NBOHbl!?S=*Ct,AS'p`@@dpLKY1)OR^=P%5<kh0fKPP7tZ]1@alY2L%\CWD/<kfgW=SRR%^g$bR&]KUpoc(f()<5$fhiT/l32*Zo%LYV23B#!Hgp\G%4#E4\Sc%FC_o[0>Uh`*=%0X0TT%.#_k7X2[Qaga^M:_o_^K/_XKdhYM5LQ.q[Xr%o_c:QCrHcPDdWbEg]8J<dV%TW0fm,,6N9Epb&r2N"'N``[^?dp(SMMq[j7['28`,#p=hC+".D;XME^&#o@A#(g:l:HP2Ro_MWQ[CYn/Vq+npDGqAEn!6d&Iq=<(%fCFeqfg!`6k-)/W#K$26^+:8j*^'l95OT]2EPqPcc4=Jl\Cdoj$('JoGMu0X22&$.otGCYI$G92Q7eB<j6OponFUho/j,cJ4lJiD%=V+mL';qBrVk!!n+'P_9^=^)U`&mp1/^[kFc(dpNf#-:gL#mVtkBQ/\J)@h`]_dL:cGsiuk-WZ.+b"IG]f5ue*M8bI1Im;T``mgl%dH?Qt^MZYZM`_S*emE/B7k\CD8Es>'*m7V;0&ja<;1m;\QDY4$j$N<0]3S)X4bt[+DACn@OR+%)Q%ForKN(4AmF)dRaO1#&?Ik^2%S^,W'b3J:X:R1!8C/&$e&h8V6Jl$`BgCq#VO++[H:YAgn>`H#^2L`iKFm\C!aAea@1ahfm-su)-aYeQ7k1EdV3Eo8KEEq2kP5)<A%XgYB8f#P/p1t-V3Q<ZLL@`t0n/'PLT`TBcr-FT/og;://=R("j#h*[PnA/^Q3A8un98>GfZ,PU'k\9]k@m!Jhc]h>+2s8,uU:;+u%([KV1M#DYV>!7[aaP^%?d\-m&cJ.@,a2\C3]D<i&H6MlCP9t4kF8A[.&/+49q2%]u_7k=8Mt"_]P.(,!n=(WmZBJ`$.u@j8\]fLD%-k$5lJR80>qc=RhlE66KBcV<eqq'G\TETX&6ZXK=ZlY;Mn-A:+MX=8`Y.2b!'pl$-;W7%aP<[^E=:`4AqT/75a.iCf#mMs;&2N#+%Mkgbb_,>X7gVkJ>]"R4mh)*K*Bb=%l6OMbq-DecN=!&KRM<(SIGo;7,-X2KUJ7mjciom"6QE\d]GhGQ;BG4@!)JIS%%2@5F%.2/V%"s_;a`:1Xi9*0:!%Sl0I?HsO^J'7?L"V?0,D&/b@TRl`rOL[MV[ScCF\+0S&T=nG]AZBP;.j*#ibK=!kq6HtnW_g0C:@/]r5'uD"%pH[mko0pRET*@]d<=+E%4mc5#[OYPi`^OUN[N8rM9'FldaSGQs8sP_%rCUO3G?7BpSnApfh,Y8sj&J0f]cJgOM3`[j\L.6ebV6JT%]b/37KA@f5bNli4^#%!!PI.%P8hKg=Q2.nX69qcKrB;G;Q\kNmT/RY]me=E1^HG`Tp'UNb@)J5On!\'>oG!L]/'l?7IHfk_2pV9j%rKAOR74r8Z[V@oNhi",[b&O,Kc"a[`bsnPe+D-s`Ln8KV^XM*_O4O]+hG)^?oSkRumn")"`N98jX,?gZ9sX&8JNe_cotD+V2UIdd%[<GVR9Q$roY*N]1.kcZth<r>q;iYaeV#WI*gQkc9O:&IrZ=SFhD!ttR+VJ.MDb3Rs]'t%MG'L9VdT'k<=QHSX\%N(Y%eiTolH(bC%=Pp4DF(_o?j5)=YG<`=u23-2gRqAXH5AZ"'kX7k%=jgW>8.i$.RLqqMNU[!B<.=&jdnHchFgH^RH%;MIOAo4RO>S0U=Du+'g`gG>%i12AlrN.>oad=95WE[Okh]12,*I(Xe*BnAO2<lWA[_2@)@D4sC4jY%$ommXlV1h_#bd*id64o%fYn38o?4'>(-H_uDB6N#tD^(2J%crmR0KuQfm+tc%?$uREcL"&T[C8^jtSZg/)=7$&jH7MQ,S3rOo*1;Y!+uM@7QO1#e+33mEd1T=ViqA.j`h-uAF(]A@;qbGk#ls-j%TK:MuR("^pk.s(U4,h!:4ZqkM*j"%BeA:))XutTefmu(?1/d[5hPPC(l0`m_4P&,hn*D5?$Zc14B,TM"C&s'b;A%f02g)<pHY=R(%^!+*&gp=9Hd@H<[RiIt"Z_Z6:<&pZV@/!alG3iKkoOhk$kOIdsg@u,HTa+)#.CKq;=[72jb3!l/l'cUtSe<gE\*P0pnjA,L@%$&[%.W8Yc[`[-eo(Q2V2tO=t[;^;Y^KCG,P]lN%Hhm8^@V0CmZ][3eg0XoI\@.gOG\bD]+gEmsDTB1ElY<e/YKV3`]pmo]ekYD:o";=c%Rm6mS431cnPe#6>C%mRBGW5?+:_IO5AuX6^^RHNeV,Vb&hK84@o'`fhjjVZTI!^$*/s]h;j)<6e\k>e:+<>?C!91QKG$__'[6Te)%@)kGN2Grh-.>C00:(r:uWED2Efm9`a<;"5\E[2\oC=;[*5&SQlg[jFUlGMe+,[O*8]l]/#lcn%DLb@jPZ'+Qps$JoWEV[7LG"q7i%T&/="Z!5E)fc?@@'_,BZ,F"a)3B5bs.3%rsG9V$1hDqQn>JKu-^9mc9moE$iZ+smI.FkO,:g2Pos&e=J]MWuSHAA=TC.gn^c';4t%Ia"TGqXZH!Y)h7U)#[9:T8_0JP=OlK]AoB])tWdV<:tIgCURoG-+Obi9oUbXbc\pNIbP++7LsGJ[1<e64/b9fksR#3=BLG4CWfMY%AA&#D[<_V!mg<0B'4d^T@q9d[VBG4XNb:)CWMu:9A*[lZICJe&]82_ZZH&SJ"Mj12+mbEX2Xi>RGBdTQ`\i6RLV:9WN-584WqFI:%5IU@7*S>s][S3E7;]91CAlj%"03K7L"92/qR7M^7[3!2>LZ:+e'd(-N8GjQL>)$1b8XpQ'6Bet4YRZ`B>n9CT/@]a6-Q6N&\K]bU%+^#KLR&@EJ<brbhdO'#n.n]/39I6kW$Y_nY.HBe-E:Qn2fZLt"*`Yh%.<R;Ye66!'h,Sc^q46lqdFS1`HaVXSHp(LLY>94ML:NT6%o]?K68()ZOT2dhO\`RZ,@q2L"<]X;9b?s&e/]Sgs?64R4=Cr$h*]eBus5OB2b]_1/qV>f`ip++]C?V4,k^DeRpUbKi:p*h8dcJ*p%bU9*rD$8k#a!1?b''QU;Xgm]\2+G$kZog8PT#C("NWG6Vq"3M18!3#6j\BoYfJ.,N1jUa=dcn/Td-$JLf';,d=]cc#2!T0,`q#_:%LDeid$ua;0RRJXZ*R9$&VKO4K$,+7MH$h,#M@kR<^7Q:6U:UOlbZ+Lqi0H\&7krqn/J$I:e!c,'YjK@e28eXG7JF'!8L+(K\J)TI%bYG4/RT8mMM=58^'^te+TWOisM2n8SEn%9ciA^n(+1[ZWP=$?a7s58(ed@O!(lHuk;R!U<gfjjgZ@)_MkPS^<e(`[(n#2Re0K3(r%n5H9ebdU1pV:f$Qpda\oQjSAC>9&uZ@(I8n^.^RbDAS4bmtKmk.@j],'#P'"5GW#lT=$?4=>h?V_`I/=?-k:m\IcRoHHXNs#+;V[%2j^q,.kZAGAUL8e\j'8B-uEn+ItM'iIsjBgXnXnRj1A+i_?KOtOiDc2(6?DS%tfRSR@H;W?G+8l/s;PX<Gg`ja!PgH_f_=9=BP)3%Zd5:Q7M2gY43i(%XE]F1/mJt#[;X`>T6ES->Ul:9(t(L'V="t#YuF)i`0R!1Hh_X_[uWZ"D%WbrR8j[`*QO<rmi!gWPd-fRO"PX2%rZZ>`n8I+/?_CI*p1;CoFt\U\7XrR#MD,X*0c!hAhY1$Us6(HUoV-o#V];W(l8W!@q?J?%p,NiXfN=ignRJdJYB]j>dpp>:`eho"%=roUd2A4'jlns#;nINWIKBI/RHjiCmYqo^6XP*#@/iJt61*rp`1]?*"Etp>W-Wt.93F>;kl`p=t=:qInNU5e3X(SWh^64t#cf0"^%-)@2j$V%>pR<pbWlF,RagBjj2Vf[?:0n54Q'385<h8k>"o5*q?IrY;W'QTL-^/^b7n83<)7YkkHck3f??[;Wg/6;>$l;p6(`0)kG%%H+$3h:VQKhdf^b9o&D9EW+u@*I'@+A>dR73UgS3a[m3HjM6tq-FWK;*;E@24;/5f)0Rc^r?hh6g`#(G"&F[-bc^oB#+c78.Js.p%^^p$EK*S!Yp:\_8'f`NI"9:qOFYZO+jqMn1+R*8[Z#(T:Dgg$g6:a"rWpUm8jpk?+;7&6Dd;AdHkN*V+N8GUZ\;;M;gV:0JWDpNT%<@fsug$EXcJ&hZ'`1<<W#bq?Fnn[h`kO530>7X8-D#O(JS=a+K/fGpDIVTGuc`=1*,6ge5jkY7k`&S";pW'7TgE#,<>'XG9P!=X?%mUo=OgJ8mmnj/G(<IYffg%S/IjQ3ZDWg\8=CBG4qlui>>780-$at.F903/B`d(>ZaV`B$a9PiQECdM!g?V6]p19LPGRF_s4g15N;%EI!4ncFE9g_?!A5j)PfKA]ch]Ti8J72l6($nN(mf+BE->D9RNT&Y3)Sh;T.7a/h[ZR*r[?kAlj#_$@:^2Kn50Q!0[\>B7m!r<J,i%?]2U:+t+=e#`-g970Ip(,Lp+sm^Yo@#<N7gpW"TeD?pPbHf:8W&4,/69dBuV3rS@+Z%E00>r,(3_3PI[!tpHG+i:+df4E`E8FDsp%Yk+6Rq77!N#C+PE78I;bS3-^^7$.8>SHs/SLOOWT5kQYH>P^>P@O.UK0F3j]I6du<+PV?JZtEVTjOag'r4_`Pj5L;q>eE-!%MhF;%]@+\!6'<dSGCol<<br<MBV"c@h2pglmu54`A6j">VAc!Uac6Y=I^8S,#h!Pl@,jihJ5RpT#^RcD,T8"<k=[mmYbR>bF/8s=h/VV3%Kc>]aQi<bb\anS;!#BE]_<r,GoAqr*PmHME0)L2B/A;N8AWY$?CJ/*6FT-%3'\INY9NoXf<%\M)[a&+NY[0:1$g:U=c=8(qf#D2k%59:3Uk=LTP>R]WQZ(Q!eNU`qU6?t+rkHV;'@I]^$T82C1U`YYO`Z^R8N\-J::)O>:qr@mb(ddhf71R+BdGi>(EH#+BE@A)*kK4p-%n@-Js^3gebE=i32>@]MN1;8\US!r#/<UK*&M<oR2(J8Ra0D,KO)*'E\M4Mpd/D9jT_@>,Mf^_E*4LUcJIu5h,Zqb;We\6M('UpQ6%B7/04XfPWFi!hiA!,!T?6K4KDA"W_X/GJ9g7HV$@nQhm">4VUA:YqVYSeW1.O2_$:n_t.XbVO/kHTeuc==Cp:Dd?R]BI$%I+B1O'%`IsflF_AN73cSYDI\H]L1Y^cKL;_C&'Gh.bOu8Y7WSMFJZ@'4Jn$P="Ye.,3126,;8+>mFQ_X:Rm+&DGfD?t`3VI\jcqP=%bR$dc%Bl-Ls4*elToNaGg3i#Ufk6$.q[ZAHUjb6BVWNqA9m3OJ'/OT-U8BN'e/aI([CL)8#CR8/Gfu`Ikg\0WClLF%_cUt/MQOZnUU%7?X%9%1h*8ANXMZfO&b@h*;%f&#P(.4["cnK;b`QXPXd@&DDmD'oNf[T%PDEWotu\MPPW++C;T/8K6<o.17[6k.TeJ$B?>R^@Xn*dB&*%:4@gn"^[EK1K$59<QU.9U:;:9&=^:7'pmrr+=bL`/\j'J,1"$:Xip=@Ck\Kon_D%Rri:)=8B-!G2Pk[&C*kdJOQg[T0@u2A9RSg#%')$3L7:AE#Zc3JO;T/c7>/eGEg!`B0-QUADWrZmO'4G6+K-P5k5Ku!?=K'.2aEBIn4gE6=4'`Li1gq]PMWLb$23r$%Cc#:Pl-8rX%;J`8>7.N$fG_%mO,jBk:E=]!-P9s[_qX3\O3B.8TVGN<U]!2FFC3>5@68("n:q)bTcc<2n`7F\E\[Ag]P3@eFN#uZKTcMN,U%r.]%=L::@`a?sq9D/UW@Z<Jmd@U<DrR&[^].L/4HE]N@qoKp"-!A7I_+`B19A(e55Gd8]#IlBuHdl@6YVa8(7ZRZrMrIM*5f0-MC*LAU%`D,!_.9bi@/`IcGFP0V[F*)O/b4s,8pm*KUS5XuD*?r5b*0[!'m+^@0a:anZ.k*8%S>K[dam;WZ2gUUpX-(DI]Y($fT.lU%\=0a>%,o3sQF!d<D-ZNC%]\io[M$tBK"`OUVK#l/Zf2@s9Sa=@mEg4m5ee1pi-L]5i4LP(C8kOQ;(eI?nCZ!_,?eZDb.da<I"S\@*Z;eEi%V>7-YS"R'*ND#+Vleap(V$G`6R=18_<!5I=BrG4V\>XUc&dXYl)[?Fmqmh3r@)!t*9[:5UVl@G4f"T?5MA]fK[IrYC3`[MlNV[//%[[k(E+-cJCA*;EP*VGZd0HKc+]6W0$4/N%Bj8E7>YP0b=-$in/<*7_X4MQ3G194TYf$0X=Wu5G^h0'QD:X7?pi47BrH&Y4.P$CUS%=tB[nCcj!_*m$e\Tr?;-baXAaFSWHZBc:M)B.+>A6^+ZIeH;q(KuOcXG*]3LD0Y4Nj`;eDcD&1F&^o_O4d9ZnP@,cuF,9=Gi'H3U%WaQNbajI:r;\=Q`-.QTUDeq#Q/8M6r2g.!/qRXF%TVC./JL*eWdj`p@'Qgja6/>jSjS]22KT\]`YCURB'<T2P=F2@3e.Km^2F.;n%]&[6+lR3-]KE4;5WV+"b,+>/R;,%gZB]cDR0KR7FqFA4:?&G^Q1AP3Q]PQ/&Q&]9X(k;9PXge:jdHj;'U7(q)EHbJ_9?(2:AjCLE%Um&,R.Ok)8`KU7J5Jgc]d_!6l]eb#D?7ihu[i94W2(A!qPAFrP=&U'qCG[P\l*LAGRt&kk<.F!LoDV@eA`6J&FUufN)f9@DGM/V#%[H3`I.sEQQ27r]/$!!PA`qjJ"WI9G;Dg+S'=h@F1>'J+h\asbfPjU$1(R=[kqAXF*##@]Ld/@6U\i8`Ud`80Qc`\:rF6W2j-C.c:%c=$\Gn7*23_,%!CmRU^7E?[*(*o5T!L`^CA[Gsf.lJ0\feMI["[ji3,B>URi9];HG*AC@H0i(Nr8^P@%^l]o*^aud4?Gr6X,'J@%%rOnRn;jlZ!g.kAH+"4@e,]&7Pe.RTQra9<bG2eG)FTIo9*sP*XeDQB;C"n9\rmMX4E*tbJ`c[jR;+gPJ\$o7q_dI:tDca$hAtI)/%VbhQP:]8p0(/Q6PfEj/%4G2<Uq\^Y,`=t>]Kt5DT]?B?anp%#K'pXu81d1U;-NNZ-9YgFRaJAUlL4TSSC!u$f^jAd'\I5W77P\O>%_WLPObuu"P*"hoW_U^.[[q?R3G`hdr&2+3V<*l`2'_@[_X"VH<gjV>7O`+RT;dp+.Mbgi;JQVl[)q.tra<l8IfZ3aZ@**R/$pF%>%odih`JLNgJP4Vt$k),`>"!g)Y@158i%;.k85nd@7D3oW[6i6_RdXto*RJX]lj+LbrN?#P&q#pY.4#6$3.bRRE_8D/3_dGYB5"E+]%D2uHpAS!5Hik[d&4tQY?a6ZpKjrLPV\Zp@N+^R@jSR82Maq&hJqTXb=mmAF5r2^Yq2VG^7SOVj,hRt%''fSa6s$iB`CL*P7ZhOZn%:[W3Tm'RpL,9&<06.6`2V:f%e$l"'D5.asC4DlId_(ULQUP"\clqX6*Ub>d;%[n?kNN8P(r(]0DC9=nU>`rKMKH:@R\P!S%OK\gc%-[&(5*>6#*GoA;,YX?:E\eD\$:*]&\4?tp;m1l44nW)iT+5+m*>kprK=3FA[+ZF^"h(i,PkM*K/hmE?52>^^SCP"M`>dIem-@7??%c@FL*i7<KkH<;KJ-n6P8>M69l+?LO#(Zn<j]+YO>6Yc^)XP@WMeq$FebG"5h2n`hg)jb-QhjO>hap*t6??Z"bbAKD0qJe<&bsXgV%*pl$7a*YMP3]8X1d@;$T\nJf1q<T%3e%Y.ep9<t0lc$uMqZb,-:q13,hD[^fTr1;'Z4hdWBA&IDSXfn6NFUEEhO;aa%BuU%7b]k0%Xtt`j._?KEQVA[.7bO2iA4Qn_:CND:>Z*PcFTO\XYa[!u=&+'OmMk)>N7.Tu-J3oZHl35t!&47X5[Y^W!ZWD(4?IP&&rAlO3u*\V%g&)K4NVA^VdR9l65C](CCborf%[;&@*$XnQ&EMKsnMd4N,Z5`b:lgS>!Y8[3\98&Oau8!,jH=Dfh8ulD]E.60`Q9qFH3u)s*;hc?%&g*db6#(*^#WiLu!%u6%f5NKLBci?"g5uP*^2Jgr*Q1l/$ra]UY[8]3ET>7gZ9__D002M\ToIq"goa1l?-[9T'KCp8m,EF`rjC;2%0)R&!]ul[T;(OdJ=,om+p6l4BMaMb@W)q`?$(KLcn5rf0J9U5%+F[!&M7_G_qa5A0aCsQ?/ub=+pa3_Zh8&%Z7i,53O6nK"KSd:F%P<BJ*GV#r7mqeRe6ZD7*A4.*HNm^R-Y1YB^Y&"MZWZW9f5>iq;*4SH2_h*GQMk`"l$O:A,D(`:[Oi5!dYG["EM&&*JEP5qA@qcr=%a]?@`af],Ol.UhEVS7*Z3&,[;'?%ecFY^3:5=o^^1h_PqLBDJJ!Mu2j!gV;WO'hI4'4<_4L:53gMab'jB;"7(U[%[g>mW(;guEsb%`AE(HOtkQXm>H$n:7lA2H:duY]k=LCmG$7V_!m_,FSj8T#PO?U1X9.kLTM<=^8b90`<bXhIJFIsT=OlEA7'cgF_%Y\iG#2Dfg59r%(PYc/OWfcR(*,i+_h(fKC_-WCm3t+X'mO_P9cKB.>BEmTm"HF!RUOBkS%D5";j"b5H:`W"]5J_qbmue)PEO)rZH^@orRg2UX]>,T%cHrDb\Es>MpL9>Ngo7B7$.0,e,VCB=&([id!k!5-B5BfhBcm0Br`m-a=$+6#b(XO!Y<DB%q]qZo74\(C_9JLl.bDj[>boe^&J`6,%L,8fd^j^^MRH(]r_aN*e[n@+DalYO9![t8OADu_-10Z;W,6NF^iKq0nGCdZB'C?0[dZYQl]T_^n9&F^f0^(1?$k[*"=(%TN(VD#B%gafr-K:OE,Y/NTYJj8gRned5[#TpP-(e/`ac#8bn2$(0r-s3Koi,`(I\[jAY;HgA(.3DmLp=*3"T)ZPMRK%1cP.CJ)2^5;b33EBJ%Q^]l0.UXMCLQZ_Rf5G.&osnIXe=-]n5=R"E7d5C(r.gn)4Xs'-<)Q`kTjm9&CEu427`Ap1TG`SNBC_U"WW(JL\!kjmTBHUth&IJ@%mZsRt;-N]3lE3SiJ;s%,[GasqQQDb"_rlgec,9Q?s,$ZjT/67L8F*jgCDt$>ic9ZOkZ@QL-R)"Ri9+0@9WQS@6q&8F(qkD5U,<'q%(/`#W0$3U3:.ji0UdonY=nj=2B<lP=QPFSh7O4n/-!>mF24)m8M?lY>SCU\#$UlbieMJ;(F<R1gFU<p*.nRT%;,G\e(=?(=Mag=G%[&Uo[3NZ+KU*um[Z@ZXs>#UY*.FZaK/Z2',3Le;D.MbV&OHbs&85;f<Q%54n[&V8/,Wq<"M2YfI!":$l3Dr?)AtbNh6JF8@;pj$^%$p[3(QW@'__D5,F5%V^3%PW!V)N[51.U#fpV<)NR<6Ah%JssqR2'jiT.`!Y@Ut(]C%\>@ZF#rqoQ_Qf<%8_cl9hWZ]QAmA?3[[d(%2*J&A9`PhmTLe;Si!dj2_U'fbJY!%0V5Og9am%kD^eW*G@MF,\q^2\:>*)05.d,7,7>V^MBgi#TAMpTHP"LUr[&/c7W2ue93>_fK%b,*W.Zi_#mA^VAd'S(X_3>BT@+Hdr46rjCl^_`G)CB4hY$T)/3H52r?KX@VufdmC2E"TJ#3>-TN=OcCnlkqL5`HDTIJs+S&CaZ+a%-)]MN:-i>^G-7%%EKso?1m8Uj+qZm]k[[)37_5PYG`-9)bK>"j";$H]3Ah,!/X$8"=&spH`D3@7;Na[G-l'N&W^pQ>Ad*(7<LGTm%FAGrCd4@,TaGQO<<?2oI+OHri>*C3[b,/V&#YmY%S>&MRPX^eJVa/uj]Z;HE_[==YL3A(L</Ims8?X/O&4)(Ob"L(f&@-+O15D>T%*8i/?aj\eI!iSRW@!GD3(b\008/]cNcg$I/6qp(<"#K-,Hm?LA#_Kqg#,EZ&73!"h'f:FD?-*^r^pjOC8QSlp!aqM]Fp'd('sbUo%.V]/*FV9M-.S6E=A0$54JTegZ;'O+C%LpK$YQj1u<@<(qfEIY0WZR@h5],^%<Al%4([-j9PsBd473b,'4d:UNp(1f)<"fEUe-N?2%BUrt*W[S7M7Dp8.TLd-ZQ;PU@ZlipGBs;oV`IQd=a97q];7-Y(QUOUp!QfkI#X\S>$4>2iYffnP!A0g/[0Kq`;B>kSJ3(%E?knrI%&r[qA$W1o,7TB[Ca/k;>b%V<aJF!GK$+,O5k.3es"dTgDU)nm@3Y_c7!\ag=,!qrA.;Qd;a=stL-+Y^,FUS-Pocaai6%Q=*E+N&Q%oa)H:]kF_ZEX1lDi$GNN@0#478gKc*R7\)o"^M4M6#fm.WoHAeW&^D^A[;XjM[CJ)TrJ^4XQ6#f0Z#f:W!d=%-@q0WFWfjHVY!/8%!#0t-$FE>/*<YR,MM.Kdc%*lmJ1W'AA48Ht3`B3a,(m%PiR!^[[,XuI_f:>R5u@o^?lW_YA6hPaV.H(]B(8;aV1XRmcj^;'':9K)%&H\1"&.P]L&;6("MY7J4erX)=!ZdM`Lm3W<'RhS6d70_U?mJ0UJY>Wd:oOJ20oZ7'<fo[*BIN1G3MG_)3rt(/d&GP`o<5rKkKr&s%'XGO-)Us<Zj=&boTbE$H6ds)8.-a5An3lB?8A'`q%O_r8On:;b"r2kALBPb3=V7Sk;C"e4@:bjP#6V"5e1lIt>lahV2OF+tLH83V%.[hh.d#sXJTNsBc["Ki2-irn#+baN)?Y.XIk?*9Zj_+t1+f#AU"p.)Q%'77%A0=8SBYbQ-3\TXb7A-?OB[$I.b#)%7$X&=u"Bf\-%;#RF'"7/XGPfOKBAKm.jMFAH1T%:bu'4b":1?(Ss<WO@u,*")\\;8p+/-AmR?iZ"h"0.Q!="FDQU0s)i?A?9!G#D1Q;%!Ut`)-M`%##.F"!O4nL?r9\I<)t9>FC7s(QXrU3%[7MA04M2j#foGB!>k$(?DPG^/B[7h`/6D4!YdF9/f"IXTtNpLT;;l.MDPX%J,on)MA1W1%(;X(f+uRE!JB^N)ZudYg:]tjK*#<OC#;Z@^Wb>@Q+rrHfb,HL>TJgn_&I/RMqO!XVM,?TPIN/u(19E#[3g;&BM8H!'%fJ@PO3ni1%!cWN$<*,BRH6)k`",,f/i?^Ob6r\Hm2i+dMHj@D$M+Sa%8a)!rOi/LbMA5D+((%W!$ec.b";hGC,Z3G1MEl)NX@UbNE>USfJ?1.,%8sm8i;D2$?ScQ*L>*:EKip!-5OS9KDM?ifZAPeKPeVO\q5h4ho@ej6lDP/e=ej.@BX@OX#'NgEY1D)#,lDW9b+q4uD'JZd2'Y5Ch%lTkjKn=`7lWMC$J(jM/qBZ+smF_ZWG2A"1B>u!ge=:nsJ-k_qWJ0LAKA4_nSI=<TeTj&gYoIhd?XtCEV`7(B+5TuYL85uL\c,sb=%=!p04/L$Aj/<X"i($XZ"@$/8&3?9&oJWS:DULkF%,UGrg.?$Kb8/8p&J/.487n9C"Oh#ubRk>_P*h_9Ws&Jc0]9XGWQ!\M0TjJ'r%_O.>rhTC;A+DW+;J7lk;Uc3kWC<?\QTaZes=arZH@`>Ha=0jb,RbbMt<b,b%/Kur*Etj<89S"Xf<Cd.)D0EVKeQP6:-j#[=flm\t%fRu.XXkV@'2sBYM[;6%Uh4OOq(f*ORl%,gVm>A7TXk)WS+GZ@9WZFncAr"M8c%@#GOQ_E4dW#DgTd==>>)$0E1;De[5$!At5%h#Y%TBrD;"kC6S@;A4RRFEQo_V;VAmkE"TI4+.Xe5WUBJGR'*1Y5If5rV9.:8el5^a:7q/k[8nD$>gobdHlN6@5Q"es_J.Q8IbO5^V2O%_hJIkT[f\FPo[G?+"VDtKNW^i><<6s2aPr@"i;bW0YDR_=sL=jX!4iki&dqj;a7."4`dU1$A`<WNk&,OL3X#lL*<i<,L83q'KWZH%PXG\JM'4q-?;0;_,W!fk29'):PZ.(neO</qSYC0%V:3p!Utp##1s<6UV4kh+UJ:o<?WTS=TXrAOC:9f!rIeQ%U;oO(-ISTG,EpYi%E1gXp*(p1f]JugjK;oS-Yr+3Q;CR0"[@lkH)(e[!#g(`TWBCfT?8nR#F>MtS=D5^`h/XMF@i(T76I6V\Tr"oFM/6;PGM$f-GQQSR%D;[M0T7GS<S+dabBEC/+(05'7%<L.8R9Bus=%l^p[3!4XjF"IW/gGI'56\th1TcpRG!Yr,<J/4d74+QE-<.6&9W70^[UO-99Wb\%%87.#Pe]>_EdC\m^o:ss>X2mmj)-F63OIN5\J7J],e9?)J>am`ZTEdgmgMThX^Ct+,1KnJ'=^[([if-8`@^hnojX+%-Ur\fmTWrMk%X_q[-U5tVe^'9c8\g&=JDb_'b&[;l6\$5=FD4I?VTnrM!O\LVr$C.>We%:*Cc6sDZ0jE*&)S/+EM[9i(ISM?=U%[%'*^J_R!#2dM%.,bhS<I=IFm0>k_)1R@T"T<7^P]CRIEVutErs8"U=$X3i!J2L[Tl.Q.2DfZO+TeH3Blpl$-h/i3(3iY?r:Ooj+(od#`HT^``!'Vs%1E\+-@q@%'=4_PAnt0j8IJ`I"J%m!GIe(qu^\dEQci0[,h>d9TcRj76^V6E3>$Y(cN\i!QmuF*Gfr7Ka2N8D;aS3$u9_/3As8;E3%Wj]bd%&_&O^Z^6]qu#629g(k-Hg8>K5W-H'CU@T[ing=n]$AKiZebOO<P<6!4&ahI6_^NY(sV=/"u2.106Ocl^4DBt&&3d>`;M_'%MTRI?RMOLo6mdIRR+Pg2@/W(qq#]-m"9,;(.d"1fBZHQa<(W#$lKL<)b[l<3&=KS.a8BH^$=+0K7%pUYG]P4o?sC4$DDFdX`G<<N%bWj:>IF*G7!uM-n^Y\JSM>g+iff;<)h1@pe7L^'9.ba&4!\;&tA/psJQ+rFNW>-Im^RG*V=pHZ\0_u8GPJ?(4bW<)kp#%;EUO>n,%E2CC]/$+VG^FdqJpA+IHdQCg4$qj+P%,%Vl3JFI1@+k*+k4CX"@S-_rChhoGPLbpro13'=F6\t:f?kh=?Q4\ZMi[g-720Jkc3&G-%_')`S"/`2Tp8pp%LkgqH%jFVCflJTLg>VSM1,>YSo7jehg+@AbpVod>:<XGaGHNF"';dOC2!m(9`"5q(B7C*HW?=rA64b!b@`jp<%S"[tUI'^_So7K7(daVi,"u2l=!+n$GW%pqs.<l0](PDTF1'`ZpL$]%;@o0?R#sYu]Q?6&PBI9'7dWKY'Mj6NUZ?FCr$iG^JepT;1%]15@pgd4)[*C=08"f[)e^d-hO"Nt;Tl*EImSrN8uhD2GDEE[9q)St`#a5NnQW?hq#muh#YW)R5e%bViS=P<sj!*^/aqH/A!FS%4`%e0*cLOT*hi?H-#ESZQU?Bsj_#&NQ_qY^$<XE1"GFgo!W!1`WC``AG#l+C[r%n]5RZlD^&N#H"`a-CrkP!=S-@SI9b`)6$QJY_p^]%T[Uu\C$^7<A&[b'-J88(XaP<*h?ut^`3`iZ(L((38p1M=%X@e.2,qrRfO.P'Z=sPF^4Hh)dD@=WF)UM-%Af]&(BA=*`KVa$8ga[4%J=\gN@KLQM<6k1WA!=mnOPXsCX*h/lUaTr;Ys!W8"3oUnB[:DTAn6q6!SJoR?G't^0b#KH6cT3s[dZ/s,/"m9Y11S4bk#qS4e.6m%VkOM"'s5mJS"8fXaiLR;,s&J\A0?fAju&bK94L2'3qSPH5@%3B7Ull1`1FuADGm4qcH$4o>;kC?asO]!hdllD7!idTfB%3^\mc.K%-e`-0]E,aWfD/s8*ZHA_R/`k'3g<T.#F"Qlf\`J%*NGohnn1Ll>O\#rWk1Q%rAuL\R8EnrU?WiUCiJluZ?LC/4?#fq2%AfaD)Y"a%G1TpQ+g1gHb?5ESO_%f$^e&_N:d_WVE\=tZ.mF%1;%M9=!q6@S+P!]JMJ?O&MJHnAL+72Z.$ZouMWoWk2Cr:.@9'_`.BHtek<e*f%lQ^DSEfW3T1a(>f+KqtGEJ\?p+g]^aBU,Rel;Bi*N+ms"LIMPQ7n]k<nC)\s1B>XZ:k]-9N4kM$FX#LZ`+!OT;ZNek#-$;k<)bB+%P"]e8Ak]OPG-.C7G#RL!RX2.^A_D2`FWsqf9.jg/0APts7M*,7XGKpZ;KWE=.Ou*tM3a=CVMp1AQ.6HF\U>MP/Z+u2&&8Z>KiDFA%r:^>:EHP^Y]mA#4?,c,R:[]EY@1G@^)kbefHVnEG5]bV]90!TsL"&[!:1SG9%Pgfh^H4bP,rEbf&#Dn7S%,T0:b'gU]S2l$Q,>,8%`,J/HBg/p?oo1#`ZkbZdf-1=g>3+>nZPHtfR7kQZ,pgX@g6un.gd0Ik+5*Pmj%5eq!EJuJq;G@7_:kIj2PgrHH@\tNK2G\DOSOU5%'tT*.@@GUoV9%'m78i5Kka2@%?#=T=D@:)]!7Z0.qILc($f<lt"a;rN!OR:?R<':.8<]9=h(YLmFU02D=[7Y"(Za&+o.lXNW1^tC%eTJdqUVMLZ98,0qk*_d:d*&+^Y]80R>gUWcJsTJ:q-[7PWBQ?H`^[d5@YH)4)'^b;A(>+>DB3)T%*/9*97IaU@mTGh&Lec=8Z4=>%=V8GW>)k4q'9V4)9d<L8M#N=:ZG,u7Ufn\DgF+j-Kb!;pW)=X6BaQZ#-$F;VgffKZbpEGF>(",J7s0HWZI@Er9.C@o$uTYZ[_sb]%WBLHt`qI*h`6&@j)&k22A^j.uDOea?F6WUX$0jL]kk#LBpO7^1q\=Z(>J!71feSqn_cWpJoBZ]=U#*;u#V-4&`@A,KiZ#*Z(4g;]%)4c88Ml"<^WBsZKf`26SfEOHk^UYuc.8Q9n4=Rcp9mJV!#P_mbZ4@DdTeX'h-NgYj-X_W7a,^K@eP2Q+Z12?N+m?'HGJ_RA"\im$%/c5iOURdj=3YVS%!`)\9;fl2p7mUZ9D@:Y;!*\Y"4pAmjd"56#!e@/.BQYh98A,:ZW2#oW@@i1u<fpKBo.@2K_mLU]?.n>Y[ic.7%7Q;3Yf'ZgoA.Tdt=ZSKd9pbp&=l6K5WGo*C,HDc8X0KC=>=:SS!Mj<98AaYDMXJUeW+oY[5/)1qR6&Tc&oQsUg?OtRe<1AH4&.g$%<p1K4pOTqa&O7Ogpl0M^!%g6$<q^+PSOE,8,*?JL,EBGundM=@..).Zha0P>MI1OVQn4s)pcab=4A>Joe=D!gk?3:T,ge=tn)>1K%WDsefbFYXmP,K7aW&^*A+`spVg!ASIU1RN%k"qq0!'kOj3]0D?28^%aLGH7lWO*u?IQ<Ri)4%3]FJ@@:FW8g=aj_$Je-sLL&4hM:%n=\o7U1RN%k0Sr'p8UkFFX0ma/5n@g7."Bd7&"9aVP[ImAl,A5RYNl%rsg?$%VGCkYnP+4[Ub#b6^a["RA+1=M?n4>XH=nlPURN<%.6;XH.,hq=-4))!1b_jMlqDCoUrOl2M?]V".X7\$fSO(,PkpiHJq,UF"#EBdc4ltrS87N=M5#SLMM@ZN*csPUM?]V".X7\$fSSU1%q`XDhB8Ut1hC(FN.E[TTYhU3'BAH+M-q,21H_-lP1M\Lg+Ocu34/O<lYlbSjk5!S);hT_9,/Y,<.Q`_B6;/m3l5^aAHL]Oj+,>NQ%C3UFZ)kf"B+C5gG!o&%V,7DEOYI1l-_NN_e?RY[Q:.S%]0Z">&&:T81Lmb=J8&]Xf?-5`h+e":Cl'4Sjn[`cp+#0c4"d'Kd5s?F>%W4P'@c4FV?TY!?s$k.9L)1OWeYfZt^iEqf?K,'MaCLgPhR1kZ)Wa*Du^s3N39LEXRf&4p';27E4P"*5tTI#8QN!0lhZ03r<:#O$k%U)WoU(Fn&R2It?dnG+)#QRm4e'H@RTCN$3b77)fA0*J1AYjDt0iIXYcW#1YokJ)rW%"o3=%/T]I$/o;H>gRcG/f^u<8SQJ19ioZF%MrO!Yn)B:""_aEkE<&.K=bB"57hl)6-&mE]5tc/?.0Cnbj3NC+DM?-==j/4`Q:Pd145IWoPW6(+3C"%!Ajc_%doW`/IJ&22kTV9u%&Rp/q3444Gls1//WEsT8C6NX6&F-qQB,0+b7eeJ'cglcXS'JCc83:9GEUZZJ[RhB`4A;'*!u"XF)<,T&%%%4)h#(E^HW\qWL`2dM%&.8IcHQ)f7Od7E;a."5p@2q?W+Io2Z4;WW*jI!m&9gpKu/1Wa6$7@bjoVY,:(\ab8_ZM8UG>CiMZ0UPe,Fj+Cn#98,YRD&<jZq5r%Z>GMiD30!alr5-_*61JaFHT0Jgm3%m$4>/n1G(>u3;%qL7l+uaWurZpGWH<SK0XRaj^O4uGYW"NQdUbhV:l.u*BXQb9b1A<GnR8q%oR<Ppj9ocH!0EUF,q4I<r-;8FON,BWq1&`?+4#4_iOrM.!p]<.?!;IU6S)<WIgZSQ%'^Hh,%Dh_0$YcF7lRPl(:mLAMei_)>KY>p%S9jB]CZ8WJnt7f,6+`k5%VIV<@Fph$d-L2;UarJh%OfYF?0Kghr\3):[Yl<m>c[Kd<Hr+/Ci[Na]=XSRS4R_<5WJ.mYH`Lfajf&I%Obc^V+C.PYVPK8oPW8(U?OSCs:!S/:IqdP.%4ob4^2]1A*54ZfKn41k'[`rT`DM<qlkr0Zcp3L1Y=[uU%LY^%:H;%G'QE^-fY%QL%iPW7=0EF0Dc99%?Mttd4O-c`c]-4re;3sO`g]1?.d?5l21%MikR.G`$@;NN&]OsWn,a`n&K?Seh,@[Mk@f(b^]T*D\Rnss"Y.ZUe%f$qSV`60q/n.lV-T.dU^6`pdVr'_)rKuRe^Bl#c'\9(a7)OBJ^P/\p5'pmHN`)[bSjlrbJn(UA_UMV#3"[2.L,n-B=$C.k*<O[q'%g#mT$Qo36$W/R<6oee*^KeAX`)P;)D$DDNSl)94X<_K2q;U?US9ZD]Wd9$f#k>o)@NGU&@TemZs$C`#j`*0&g*UZg5=HMcpXf)V4%Fi)6\VbTnJ\e41+LQ+R^$!f2NeVqinYmi)8$c]"9A#mT-q\,upGm5a8r]PD8<.HHHc@RO"`h=]R$AMY/NIV=$9*csq#:;oMd):<L%LW?f2/o"nF"!jQu2Et+!aImT)<5KS"^3W(S!:*gEf`qa:hD8X;bVW4o`==n@%cqOR0jdlUW5>E:BjfXe__NQ6\Z$]H4ic"A`DV'*%J`*e$T]=Bfa[M$QHit+R?/:p-ZrDZnW?NjX;\J<&gRpuW>P!i0:<1,UfNi!!-$ib&=O"q70,,h5.)JAd9SB?ua%KY335uP?cKqA`%n-Nn#&;eP!U1fVnjbZpH1L8_[6*i5".]p=k,+RhnPGVBhZjADt3M*0aYLJ:->!($q1d/f(+%SL'%ZJRjS"q"b,DRh6"=6d)6Q,P:%d,!aZcBF0c"G@S04a95B?k!T/BiT,&Fdu#uj:hWHiO0s=$%"!=-PW>cO@tC4PuDH(q4__a#bEtHW(%13(jk'seLDhmX)']e-5kmQ%&QB'`7"+#p?V8LJ+=jRMKKk&TS!k8(LiISL9TLYNn&;+lVJrCL42u;nKP^5$6%%(MXW]7?&WA\HcS>;5%aR.hK;#lUN.XW=SI7Tm%lWcp5l4F;;HK`b+P6<qrfWqSjWS=kl0IKdYW9(>!$k$.keb6DFh_W^'-=7gBNnBbc@oUfG-OHu8$=nt6j9-OD3g=!I<C8VUY%l]$%?HqFh&D>oU:f(pfPl[q"k&`5e/1]#A-_hn7+Hbp^\]F6l]RZE9gK%u$Jd'4+`rV/gUa;llk%.,*8jbI7%M;(&+G*3sW$n3p&2h#2%1reRPH2`9CI5Gj@Wp4KDPNj37>]nBg5,Z!PNeLJ"GT8.JFC^:*%5R;:S13`5kRB3PE.+@I]3I0::0Z2rD\+SEo^j(j=an(aiXWM6%mR)3U6ZY3)'PCZ!+alWjlVXSaL['o#,d>s>MYX1h`G"MUCL0>MQ[9g_eQ)@;DK%19d.80U]A2f#G?<UuS>_cg'f6f.]4XsJfa1KY%:*ljum2W'6mMoCkl<oFudO:Is["o9WnR,f_*^e/^*A4r#fZ@mlmY7+_4E^p$RpqB#5%'\3mQQNaT17(Q=9t7iF6/4"R\EPcn>NUY%0rX#bnidNfn2ZihQ(s3.'S,GfSq3oJIo"TU'qi.IZ_4n?ZY8U%KHXAjUL7QX,!o&IJdKjb1dRa<ic/h(MtScOD]_Pt2^GbS<0,G)%p<a6Zhn1)hLba1uV,D1J=Z[X&i[0:[Gk'3e*T3Isi*[+O>Z=&4d'KUtG_7,^qG:^*Qi.Csr@/LojosC^.H)fJfuOUjrQ=K/PJ*m?%H\@O)Vu'E<ccu1s,gGoo!>R]#@.X7IF>1ikVKbMmc;*.JO@5b][#Yap.^@M^bMPWmU<W;=cu,a,?7L%)?"\YD)V;;03k7:^ZS)<u%rQFhlU^$ARoSoMY*Z`W'>sc?gE.J,9"5+^[5!5+Qd-,R'Ap@.`1NIG\$<E5#AS0%d#<[Xa_*NXYF=ouEnR+^3qI%g(W/O)E@AdQY%Z%?4ocAG3DGn%<VRc^n"aPddq9qdcQ6T,kcd#``PfQ(02NWjAsQR`erE^42fHUE%b^joZeKt8:%0IjAj\ttRE+*0,J%NL--a,YB<%e8CG0eKM5;D@RST]Mg7?]*BQAr<KA57!0KT.Q`pT4-;'AjCXpLBUr-:rhY#a0.h?M.8["t:Q?KOSgS2'-caL[+T(XCMIDR(89J6B%l9[@2K7",[NkZ=;,c*=7<%&sIQ_lhAEKEr7D',fm>aY!bpUCo6?KiOcW%S!=W>n$*(F@>:][=;50<5tM`[s5ZWH9U\N=:&N/aPJn%kPZns"c"!ETjufiC0TY''k(Z1DS70/;4,<3\J^JG=urJci<2I0rXZ!d`[JD#GU"J%=4Z2dZ>EV3dZg7+i]&g2\WJ(FI1@B#<Arjn%bp8OBmW=A03g:G,1<a75b#L9F9>3?9kbd&,Psjn@`/dplXTcL`&DbJ"ka%VNFKFIV^mP8_Xd!QAVj.<&&d3?uIAnF<erQ>]*^XBk%i"[L_1^Rf%E3l/3#Xip$Lj>P%W-2K\#+N":!k*H_(Mm%g5f])\;U;+^;$n$Bb%$$5;p$sPl?s:+YiUW:S"p,VEMTEm]*$2Eh&13b%lT<(CK>N<EWrU:SgTh89huSh&gL])F#b7XdVB5NbJ;8IWEus!;"Vo^;1QS40]pX4Y_=.G(GQs5W?0-qL3cT*PT(#W:oAUUoN^^?;%=l[e`;4cTu406'V+YU\XXrU[])sBeiA/_W*L`55s#JGnus6]jlqDdS6LPJ]/f9+&T%[-1**jfS_#1!+EP"WHjU[7M+mQQ!iMAkj4%H'a(rYa.IgY`UFmfUVQ>)D%W-a0K7c(=D56b8uOF8Cu@eY&8mT_D?<'rfa.om^UJ?0"l:Jo`g9d?!Y.!K_sqJKl3S#%9Cd>F0F0E%6A&N_`'K^ORO+$E*a++aA:;CoiRV<qi#4lTNJI`-0XK4FWW?f_nFasN!PudL-^:.K6VhB!>r8*/=O1H&UD$ML16l@lVfQ>4WUlPY%X,fVKB;\(a=>:sUk<u03XG5A'/TXp"&R5a)P6,N]l\ojpieS^5\W+/mSeY@t4Hhe\XFd;cUH"?NWR.<g(.8A1",qgA2K2Q%2nMf<%fX9RR26q=%?p0FJND;hUb>aGbT$E4-Vp;@G;'C^rdS<6-@c`9uN"Zl,Z0K3@[*Rd/`NBQLFO%R1"kK@0$/-2%cC@)2JaC9U86d2K%L:,0H7@SVr'j;K#_XO<D>J`>G_Ua'S#nVUHJt#o]2_Qg++FR(%RMm5OZ#,7#5@O71KPN'A/<@rnDhE@kS-*q"(9"4r,fo[Z=E80u%q?9,nKXel7-k/.*de#*a;F2?@QthE@>(hW8r9cC"3:s1bH[jq>WeqI85rWS"XohO+NRNTk9+cCt"/,O*93aA"Y#rkWU&r]?K$'+@%OB(\Qlh04ej:)C.$Q-Z/R5M'A/k8uAclm'14?;48;LO+8D2AZBL6!&hlt44Z$W!)cD:#+0Ph#[O4M)m9@mclc=D;>[`>+Jl(V/rr%jlstB6_[CcE'obPFI7eO77YqZVA@KQ_M<!8*I:S2[&$-l[A5El368;GS_U9"8S5<bVlo>>QRB#<?+R-')HAPCD7LZI&%#fB]6Dsb%^:_c\@Uqh4mh`@2HaYsFf$8fhZ7kRmlG13$V7]c8cndsKStE2Rr"f.Ak7GIa394^uQ_i#S=6'_%/*Hi3hGnY=I6U"QV'[MS%Q\-8%:-'/Bm4Oi0Od]pb$dj$C9>so4)^rjM($cnRhOh"%\V4@sY#;3+-`tQ7=*H",GT/,#\FUVciCWF*:cj]u-cBd$m+DSb4.PNUn-)UE%W/K2`3U"4NH5?_@P1inG23+anRSIUaB/*u<BW*tV8hkb9q(RfN3H`+fj+u7;M3p]4S.M-1@UaId6h%"^\a!I@/bn"=BTT8U'1cFs%K["H6j>Fl(kES,?e>N`Baj''L8O\AKQ;1qg^$4Wd#G3fL0nS%T3DaRo>$nbm=?>\OSjbLWVkL[u.`ShAB>sKlB@[*eO!@h<VdUdS%@R=hP#c29P]$N+tnp"lJX1fmnEc5+<1?a"8j;+6Jl,+I]5(&'i_lt,76u?.6&UEoClB]f./?<E0^3o&Z^?A%JN"$]-=EJ`1D[&@#%;!D6JS_sr6a.bcm1`,l!Hig9A+!NsSe4lOrGqtOt^B(&]#Mq3QT0TcRpuhb^];b'SOB)5oqR_+aLcsSR(n@MMCL6(Z2)".jm$`\0%e\'hJU3A?eic]qo]QYeVDM[U_c?j1:e0E#hI)3]P)1.Bu\3[be?eTC[I-g6!l'F91(%Dp7,u,%Z=AY=-<a9rSAXHS'iG`p69deo\%c'<.l5^0okTj\Un&fEaZBJFV:V?IIg33jeHUE+Y]=qWBW<]JE7l\ZA'V'h/*`Q@q[ji\M6FO\8QX030kM-)JU2!;fqC:o;VF2M87%[g@]G[(IjIMb;HFqL.<gK^X1fXAq+fD"VOhVdKM8OpVY(`gr"S1O;=ls,g>A6qB0r>fa&@maPi[cQNsn6!"dKT^,?&_j2Y4_q$I'%e:FQX6WR]p;LL?]"hE-I':5b>C4\[Zbi@DVfCc8h!Kii&2hTQTL5t!aBrgP(8ftc6hhZP<oW"Z@Gj!WT<Q)Q/508F3`LV5#kWLna%W=Y_l2jkTk'9WVn(fg2XD`hGUDLiC6H3Ij>-Y9Q7q#bf-i*l\-]rP!YfD#I%onoKTnsb?\\4j'4f]Ye$`-,rhd4:ITV6Ahj5_PkM%frTL2dF%3"k<8l4'H7S/q>E]KUM"Dh%[!B+#V-Oq.@1t?<<2,$rE&`=Gk_Or;Dbh,E0qWcH:kZOgS$\tVK"%FjA>n[93-Kcmrulr%?HZchPZWSddMBirdiF'Cq'A*^%%s5*PU#;;]gAMR7VU;E!2,g2@jc></9<L5=4=H@JI>X3bNZ%63eUem<BX?&!q-12E8PoJB2MrI%lZH))L:j>6oQ&33L]3)TG+.sV(6RUCb-RU.Ut*.5`[Qg*'L5#Dcerk(P.Zt\WC^dOmRJY8FS'k\j9"/E>pi?@%iD:=0C4+?*sLJ3%WHu@Q*=F$.*TI#=]o]9d2i"N33<\9em!Bl$N6(#N%!U8/g,GQS\:ii2^J<4t_;f@CK]7\Q43oVII^8e>(-C1^;*F1NkaS,OF6LEW%,eaT92gGJP!pGb)>6h>0_Kfpck#i<9T#QV.\dkr?f:9h83WKqAc/`!(']_?O4B_ko)M?+B"'N,s\3nQ4?e!0*/ifgBGeQkWGKBg1%*BrNU'Z2<dPZY,m4QoKOG[Y8"-c=H%MWG*fOc)%#K=Qu_YkM9U(!dP(;Eir@YqY$6kudM(CPCqk3]S;HX;k;28!@RHSgW`tI&++?%"GP7Vm7"$Ka7BG)P`KqUlq+G!e<u3U#U5Ch2"XV7&ZPIX>GgD*JkX<7FR$k5j\!RV-T[C1l/[5f;lLQPSSCqpAicM2kbNU%K*,iD%4.mnGF?E@G8bmU]Fl=Q09#m+X"0A*7l/[5fK,6;p_s(k*9ZQ`-SWo1WG'_PqN[E(o4AX<qq+.FQ[2u)Am.$Z@a7BG)P`Ko92ggQZ%[7BU>*R>C@;EgcV2%[7!.32'QkX6JiPOjnH/jS0]+%r3iGb1RlnrXEh(qHQ-F>S9?j*?5Ob/[Ep=@5$>:G$iU7H&N^:<l?jRp>St%A=,DVYoH%TEfnAef8bg2D@^Al.\8$/UjSt:&2iH&[cEj:k6X0u+6cb:5_F/8H)=O#P)],C3?>cNkZ!p/dBMN!6KI,"\0%dT"\kS&%Gb1Rknr\rM//TDbB?50W:XD]/1`C`"RnHApe!F`acfLrt3L/187gGR8B!26,BR-aK/*0`6Gg\DqGu%d\H*0Ocj]#E;c]C2i@aC4/%BR-aK/*0`6H3K;Wde&6Zk=W*Z:=?ueB1JtsV9cLm=4#)MQ.Gk_4k?:&kmK)hQ"["a9'bE!-r*Fa(L!C\d7QDV<bg_>8#'Y[9<=B@%$<fHfdb:Yh40?a9J.jN\Q"["a8uqHp$`@"k4ie9gc]r1?S4X0,P:^<`kmK)hQ"["a8kZAKFBY-Id.1Fu<m"!;G][atZn-X&'tJos%cDe/hh_01Wc/(6@dILP!<m%DK%R01AZo!3)jgc#+PZ.=0jlo\kV9-o@YiQ0X.A,&Aj99n.Zg!,9-T[P@d><6CVoVN`:5?q!*QsZ1%6p@GG)=QL:1ju(Y\Itm+;eb2oj!D^)V(]2<=/(t#P#gBbAC="_nk@0s"JM&Ul/;&P-t/^];"@kJ<6D2Ii)V9]O';BHbB"t5.AuUC%XF*RhBNb2;hr;1u<mI\Oj?E9>%kW4'jgc#+PZ)9jD>6XBbL.21Sh&2\3L*Y,42Xfddhc2Z/($sLPuddf0.$.bkmK)hQ"["aH:RF!%s,5:1oU/b@$<fHfdR'=F=q<35U#iftXd%<'%N]Ch%kW4'jgc#+Pk4!CifV]&>5<oson)FWhTu2l[XIq;&$%ZiY-_ObIF>0:QgsYX%CqesjF7?Ku(lrn3@>Vt3K^+p$_DubT7T'QV8I/qIMVUZ\4GV\_&OaG3X@3@/-YDI+\-LoUJX<I<issDSaM"V(:/4N1\ON$[/E-q7%#hSK"3H3Bi9Qmt,VXh0P#O^]=LJ,E!U7UiY38Th9PH23Ad*lP]+hMe%;.JGTk<$al=8))h&O0h[<KnHj?D.JlOp3oNrNi[uHj91M%hs)3pjkEk?Lf_O0\jQ+<>":'7g;Y(0i_Q]3Do#B<Gb93QS'MV`3liY3*dBi^*5!7Z?4<'Qh0O-m/R)fH,NWXFGHJSe8A(.^Fs#KT%.,,8R6'b=_]QI&=ARSb$1O0Q$n_0D'GL/;>hT_)*XFY-pBS>E.D]#KA>=HgRi[c$$-Gep\QlsfbnHsCXp1+`,(Z;>%X1_Po1DnkM%'<lbtU-h#g]`f"_2Ui)&2UAfd:0O&O5AtQV?.iNVM+"OFQFT<3St$SF7q,(@+))KO7G<(B$Z.*ppgDRWA9*Cq!Vcu&aO]&*^XPCI%WK%2I8fUg-TT1b>*/#!q!^UDYO@LbqKlDnl4ZUPm[?6p_oieCh1Ht9#Dr`o$Gr<B,gj;;3V!8[\Y=Q&;XlH`,#gZTCoqB:lcFG.`%1N^"0hEp_FaA_?(m,i?>H%FsB3I5bR>KD**1YWO)rJIDs2LQG%"q%p9LTaNJC<j[*PWuP?gcu.bW9#4l(FZ\XM>7lY9O)q^/Mqh!%m.#*`9BnA=XVseAB"Qp'jg4H6-bqfR/oRDJ_7:ClN+IK)@N!$Xfm9+$"5:;t8`Fl_>GLd=X?/s+cV[U2<6$MRg[$,=>6s4LG]@2]%;[p#Uq\2S=MXb,g*jRTjiuZOsaPAs52/J3-<b7I"?C'#tT/jSE&6"ZX2GH1HS&i7<R-^%TT+-caT.[688S<$6-XKhO2/AbQ_$ji3%FSa!54[igoI>WfH7?1'o19g;B-=8,OSa*/0XYrp@QQn.0<\3:L=#K$gf=br]5$j]omEPStfrpZ!R;+&I/0B?8("H`+RBb)J1(\t?%Qe6;sK*C!IK!+ra7C<iaf#DU45#>XSltf&]Ls-TfoRt<4_[^sunD7H']&\](H0@Lg/b9Z+%/7=e+p%W#[VKUrnFULHC+YRf2dPnI%O$%ZRojHQ?B6lD:J/i[I<s+5*24TNIac0.Z6PPhrS<9T9#%kn$i'qd)X7"StG^u`+HKDQKc@KfE*t0GJ4Apcjp4L3$6c'oV`3O.6%XT!WZh4B44GrS4(0M&dY\kg$s%8SWg.CteI[#3EOTf<[??1_h4Gr9Hf#'+6(M2-PX=ODmei2Mjqh=7_qLM5mX8V`i%b6q<#>'(uT%hDqlL@sO!c&U`3sSI3]nXgB#6gEZp&=2qAH?)5276O"*Yg6AMKC@ni=Y6Y0o2i?s\nTqKhfa;AND-is?k[F?4h(dV"iHs;<%&N2N%V*Xp#PDXHlM7?E9<F8E>R]AnHQUSs<:@UUA>4mcR"r`mIgAH8'$*QSV1i?dnmbh3DcYOcBfY#_tI-h9hWH<ACm:^;^FO3H<RZ?p8%K29?,<"qb'4]W;qG)aa]23`)K=&_b,-Wo&lTQ6F@=,U'CF9H'GmH:i7YTXk3P$tWb-Is1r6i5YIc/:CqYXuti_8KoD'_&3bTehX5%h2TeWjd`B#W=b@U\ubEefc.ci]<,ktED/4"URmHhSphb?;mIeQFg[WG@l*/1(-KX(Z"M("?HW8khqhdtqA3\#;11m]G<;SLm]j^N%(*2?;6^+M#PHiesLIALr)_p=fTa_nD[^3kBe9c(;+Pr-d.DhM%&:WeZU:L!)_FR=#C^r!3FXCJ_;&ZWQ!&?C2CpgGR[?C^/Jhg,&%]LJ]>'C8:a-3re5nm/>KRrZH?0t@gZk:o8n4`Zh@*F)ej@=Oe)j)gH1D91:LE=B.6,,OV-*.3*(YL$8]Z(=iHlR.L\/*D#^Eisi^%H&G+aHL5(>n4(s29E\!:joc6/S-1J^/KM`ZkQ82Sellj:-^-Y0XEm)g6M$Z,.<=[DKHa&H%;GZ8&&3-Y]cC,9Z=rs3?!k0t2S76,%&E9Bg7X(,/%^esoLIaZlMs'Vt8ZFg-h:@La;gW1`=qd5SVt5hJ4nuZ">Lr:g['[XT<D!H6,^sE[oHu>,j(Ga_*MP/b+JL[6i8[R&%9SZVnkIMqfZUn`UDfg;U?i;er6b4i[#.@eZ8m?Aekh<[jVV9RUjG*ig#8+p9&aog,0J_WNV*og-)HE!@bZSVF^MrRn,M;iod2(A9%jmeF(9\Mm]%Vok$,K>Tbc]!fgLS#c[N^E1^#kQ^tqnqF.GGe(op5N!L%u$.GB5P)CLYa^>:7%*Dl6H`u9[dD7HL=-j,\_2NRF",5%Om\u]2kF(i-,gR4`L[t%fghW#Im%o>KSqLZ:"eqqX=BQU/7bc9@,qf'n7X/ADfnF),-<>+5u_lk>^!*-PU8P&Lq3d>/c+#%5-ijP%lXOs64m4Xn+"u[*NZoT>DWDu9I`?3n[P]n0(G*hgpst,uMT+;1GMS:;4qJR\6nMotnH4*-$TB"]],nkZLisJL1k_>sCR*FgVmACZ%N9;=P[_0":Es'F'fdRGMGoY<g-#$6,!,idC&>4$OeGF@,Es/WHrJ!iYB&bDlT>GDnD#<NLRPFinbe6(H@G<^X'l4jjZ/2:VEeuht%`bX[/boq-G38fd.dd//.':L'TBhVV&,`aAr2Od7tY54E_6g+SP3`jYk-nA$?'='7ih/ZaH]'5U^"Qg?1%Z>[mWX15@2+YI)gWb1\%_MZI&Od'?%QXU"XG[CJ+.[dFX5U0F>aU9sFmjdHKOAeL""h;W@q:\WfRqj9`&T$KBgGE9%[GN<LMQ@=!H$nJ^-^q*8EgH^h1V"[0%eZ=NV@QRI"kSo9mTVH`V^HO=:GdXR4;/I&n\TAnJc#>Pf@@Sil/m_4,ABUDAX4)CIR3:V<['@Cra3IV.p`q'3G^:0P7A9nKAa`L5%6;ur.@k60Zk8E:s5n+<.-*0k\<a;&3=bCRN2)iVbX0QL0.N:h/A^]:LerskVLJE"VYP?bqG/(#]eD.W>)4F<K-XjRhN+=,u;ebG2%_b5%a?#)C9YbQ!UCM1_"+>K3T$*@],K/tFlGB^U16./Nsps;3JD1QbD5&OO`c:$]8l,-<#WX\#kZ?TtOU<\/+G,%\\W1,."<Y/M,%p75>PlH`?IW;CmL2NT.TZd"k4kiHBC(0r_Z%0V]-lHtHkg2Ns4dk/Wafg(?600)g$lRUFJopQ'6bt`?g.*GY(L9%]AAkK_<Zg8dN%$?@Cfq8nnDL\[1l_O/*UbRt!'m[>Q@T23tDKR+"R">(dB/mc;d,pX*c:%(6u349*cFil_24j<;Zd$u'ddkRd;@%'7L_E]t]H\-!Q%qb;RnUK?\QdC[Z4AdNU(3h%FK?FH@TTl/.3[tME&aV'IC'=L`WbSgi4F?/eIC(L!ufee$]]oRSOZYBCU-VF\.l>j.bHEoXi=#!p0%p(1EGea566)/5R'"HRpjfgFcg^">\kqOVN!B?%e0Jp4hullhTq:Kk$I)'?.I"Ab[o3fE[7rFG)a<S!'ceD!VKGPmpfKIA[BUfp.!%a1=r[.)r,e6^Q3sGT"8.%H1([n9F6C&UWl?a;XXa/?,G*EE=%T.jC?hhDRB&N=(Zi%!CBE_$S.6(0E1]@g`B7Ca^E=O"J(MK9kY'%c,?D,1=fR+bu6Q%S*eGA2qDq%kf%EG0kK(D1mO%>"Zp3XPoUY>E0'h(96bD_0JaXBX`ru1/F:KW`uPpRk#fkCZ0="La]Tu-#tP>o%\LY0Y4D^o^c-2U,JS3e_Cc3uKMkdDp3R=jW>p,U\>B2#PUh@6-5^3K299ahk[?$fKCrV>p2/tBP`Y&29(OO$#ai5;Vf4GFBN0Vf>%$8$&'4N`bEQ-j`Q,\(CBgSQo>AY`=1?Tr==a2C#mB.qOWc)A`^_8@Or"UUfg3U;t<O'gZ!5._:W/Y$0;14lt[;0E%QGkVKHU7mS@%g`<JN3L>NhErC#]-0rM2l.1^7goV6.R:Mik(:M<JG=f,-[(![l06Tq6%_F!jYY-`@]4?"&>$KLRf[OMVaj?I5-cm.9N3kQ6$Z!cK%P#5_Pe6Fm,*"MZYdiuX]R@$c3ZqElrJP*O"d]'u,N-:',EP'.^96Q0`jE?COm1tK/0%hOrb\40I>@+D#Dc;Bripq9),`cEg,qlCr%\7oAW2>nCCgnol8*#Ii3\D1cFs45N9Tnq%)Co9N4_`e`j@_TLdF0k!lA&Yhp"=2(JG_a,C;\cWW5CnYX_N9[ZcH'G+I+=J`a"fL[%1&(l`o]g1.GE:FdG^Z!,*B.)#Xiu$p4\*DioG8MB(g\j]P*F1f\Ae1:o%F`N=PD',n,h@gI&DV3.-$)no2Vk\fAbM+:s&]n]AP]N%`2g(GAXnA2_3[n;8E48kr6@#KcRIg"h-=.H^,!/@PUG?&Ek[<ok-[kZU_\q%\Vfd]32Kp*Kj<K;6e6M9Fa4J"'B4.UbU)1h>Y8=+%P,7d2&pM&gX.7os2@.bbd`pX&,$b_6#q*;u4`'jt]9l?N<L-Y<&KA<N:K+;toM-O.cAm$bjbq*8/^U?rTU3E.7#)+n;63p8;KbP=%BlD552V5"t849VXC3i]kWpo-@\ci@$='bQgCX7i:/'#<j:;l8S73rg46S<"ag0<Rj?B:R6o^/A13eGVbJ]7Ne5Q5\kD$(I/"?2G-%ICe1I#*o$(Uf18@<`Hq'G9.TI<ep)Bcq@6"8'dF13oY$=SM@6(Ru`\Fo4E?QOfPMX<ep'N1u%(5Y)]t,F]XoUo?D+J4Z0>RJ,H0M%,hQ+(]u=I3"m8V+(VXAC>LPZOZ0(#!JT\nN,&MtV>Y-e":#G?;Bri'*=e[RL=r<O>!,`(s7OMHeAY'3)U;(o]W0cp,Df*f6\$SQg%/W9#o.FQuj'NgNML#C`q8ZLD4E0#"`'5s[I?\lG2KaZJ9B>uu4rb)6(%eFUgQ-mV)qc&G^Vc)#+F/!o7`O@dn];W\3H<AY:b2*YO%./Fh`gO?O_3>C/KPF=QB(NCEUn'_Ft(0ebH=m&GZO0Wlt42lq8#D82YN(&"^pg]8`k)Togk7\H*T@JtdLH'G&3ILG7C"NVY.LAkK%Y1RKlX.D>[FO\GEX*N&GksS)d6g)K9m2UIg]X1g$]@/FAUA&(0TrfR-;QIEI$?lkGJo20<GFa\n%V9j!,DosRku?sa4^D>s:<.0q%0<HfR%q"pPDN&/;bfea[eOJ0CX&XJ"Rg&^(?6dbLM`SaTBljTsWr"-g?m)FA3l\0(*>=/DPXO[#\6tl^&H9(o*]M@+p)5S+qb`!I%^mh`kP<ig5B+6VV]3R@"hD9?%h9)Jn@."aqLo_I)r9=K#G+dd?0n"]4?ju5!EkEa"h#f5.'ER*#4%INDj2l5$A/Gb].W7'7Ybj'\%Oj.B@K81C^LI4Anb@ToQ.;l*-II<gDh-nl4c^WLta1`.n=lRL]?Y,lgb6WdOVkU>kN87rsRaP+kc6'mN\$eSIVPc#K/gYs>)ohbV%[BT9B,jG_?GCY0Qb"3_f%`VY_3.u"C?d#b=NuK>ZAh2@_k$P88q+QXOj5`Jl4Q^'K6^ACXLNii_`&F5DDmAr.L#eb.+npaR,anX!%GIo3F]Gr%=Rmhce[R?o1/[OFK\3g_oh=kSO'rQR-B$iN,ED6f#75Y;&ObZ@!/1"d<n&']&X+AZ<HXO*G%uZs>BT%#Z`U!q%<f<Mh%`+%JQMT8=k=_2fhdJ56'eB9j)C.hd5R!u\:bq01^;Kak&WdVXMgf1j#&f!"&l+2%P\M3nB)d>DBHSRd+-ZL\[0W0/NmB5kX;dr#<%U)[l19Z6b'PuAqnm3Dd4IB%/Qj31DfZq=]RPdI%U@ZInN&2+f"]LL^nS#5Gi0egk[fp#7,h9t-n1i5>06"+2L@?cC.BG$$>c$ibI%j*)Skr6+D:#UR<5k?L&'L2J0Gr-$oB@BZW<^kb?%>%743GAFB&B1MVF766L!4b\Ma+>#^GejF>[oHjCh/!>86'bUE-k?n16?2rsF%J,f#s+(s4(q6.O4q!g<#rS^NorWcA/^OQ1SGCTD_hb=(I%tFHTDjK6Dr#FUBp"^/9If93<lT]mrh&e$@:N(/Yr;PkdIK.2<^O?%L%m@V,iqYS$%b$Y)G-S$P=I^G`!bkK3VP@+7IX2j6Rn,MQH5CAHl5FnErnb[g)J#Ik=Oj-,'[1>Ltl%e0pp?c4:nb0q'^TP?OkO8E>%Y@%=sj7iTC%rYg&n\;g;j2_2prp+Kp+2<=&j.F*c^E5[frS;[jp[Q#\0-C2grPq,uSj.]!o7-c(Y<_4tQMl^prqYH#p%JCcaFM`j~>%AI9_PrivateDataEnd
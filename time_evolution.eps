%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: time_evolution.eps
%%Creator: Adobe Illustrator(R) 15.0
%%For: Troy Carter
%%CreationDate: 6/4/12
%%BoundingBox: 0 0 196 169
%%HiResBoundingBox: 0 0 195.3120 168.6216
%%CropBox: 0 0 195.3120 168.6216
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.0.2 x399 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 112 8%%BeginData: 10202 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C457D52A8FFFF527D7DA8527DFD75FF27FF27FFFFFF527D52FF52FFA8%7DFD6D52A8FD04FF52A852FFFFFFA85252A87DFFA8F8FD155227FD155227%7DFD145227FD155227FD14522752FD04FF52527DA87D52527D7D5252FF7D%27FD14FFA8A8FD14FFA8A8FD14FFA8A8FD14FFA8A8FD14FF5252FD05FFA8%FFFFFFA8FFFFFFA8FFFFA827FD15FFA8FD15FFA8FD15FFA8FD15FFA8FD14%FF5252FD10FF7D27FD3CFF257FFD2EFF5252FD10FFA827FD3CFF2B2BFD14%FFA9FD19FF5252FD10FF7D27FD28FFA9FD13FF2525A9A9FD0EFF7FFFFFFF%24A9FD18FF5252FD10FFA827FD28FF5555FD12FF2B2B7925CBA9FD0CFF2B%55FFFF2BA3FD18FF5252FD10FF7D27FD28FFF955FD08FFA9FD09FF2B4FF9%252B55FD0CFF2525FFFFF9A3A9A9FD16FF5252FD10FFA827FD27FFA9252B%FD05FFA9FFFF7F55FF55A9FD04FFA94F7F792B2555FD0CFF2BF9A9FF2555%2B2BFD16FF5252FD10FF7D27FD27FFA9032BFFFF547FFF257FFF554FFF25%55FF7F7FFFA924FFFF790355FD09FF7954FF2B4F54FFF925032BFD16FF27%52FD10FFA827FD27FF7F552BA9FF5555FFF925A97F2BFFF955FF7F2BFFA9%4FFFFF55F925A9FD08FFF955FF4F4F7FFF25F94F25FD16FF5252FD10FF7D%27FD27FF7F4F7F2BFF2B4FA925F97F552BA9254FFF794FFFA92BFFFF7FF9%F955FFFFCBFD05FF252BFF2B7955FFF9F97F4FA9FD15FF5252FD10FFA827%FD27FF7955A94FFF4FF9A925F9797FF9A9F955FF7FF9A97F4FFFFF7FF9F9%79FFA9F9FD05FFF94FA9557979A925F9A94F7FA9FD14FF5252FD04FFA8A8%FFFFFFA87DFFA87DA8FF7D27FD27FF5555FF24FF25257855555554257FF9%2AFF55F9032579FFFF7FF9F92AFF79F954FFA92BA9252BA92A7F257F2425%A9790355FD14FF5252FD04FF527D7DFFFFFD047D52A8FFA827FD27FF557F%FF4FA92B2B55557F555525A9F94FFF7FF9252BFFFFFFA325F955FF7FF92B%7FA325A9252B7F797FF925557FFF7FF955FD14FF5252FD04FF52FF27FFFF%FF52A87D7D7DFF7D277DA8FD23FFCBA92B7FFF2B552B5525797F552B2579%2B2BFF55F9F955FFFFFFA9F9F925FF555525F9252B7F4F2B4F55A9F9F92B%FFFFA3F955FD12FF7DA82752FD04FF52A87DFFFF7D7DA8A8A852FFA827FF%A8FD23FF552B25FFFF7FF97F7FF955A92B4FF9792B4FFF79F9F955FFFFFF%A92B552BFF557F55F925F955557FF97FA9252BA9FFFFA9F92BFD14FF5252%FD04FF7D7DA8A87D7D52A87D7D7DFF7D27FD25FF4FF955FFFF7FF978A9F9%55A92BF925545525FF2AF9F979FD04FF2ACB2BA94E7F55252AF9F95578F9%7FA903A9FFFFFFA9F92BA9FD13FF5252FD10FFA827FD25FF2BF955FFFFA9%F9A9A9F955FF2B2525554F4FA92BF92BA9FD06FF555555A9FF7F79557F55%A9F9A9A92BA9FFFFFFA925F9FD14FF5252FD10FF7D27FD25FF2BF97FFFFF%A9F97FFFF97FFF55F94F25554F4F2B4F2BFD07FFA32B2BA9FFFFA9FFFFFF%7FF9A9A9F9FD05FFF9F97FFD13FF5252FD10FFA827FD25FF25F979FFFFFF%F9A9FF2BA9FF552B4FF95555F9A95555FD08FF252BA9FD07FF4FFFA925A9%FFFFFFA92B2B7FFD13FF5252FD10FF7D27FD22FFA9FFFF25037FFFFFA925%7FFFA9FFFFA95455F97F2AF9A9552AFD07FFA925F9A9FD09FFA925FD05FF%4E4F55FD13FF5252FD10FFA827FD22FFA955FFF9257FFFFFFF25A9FD06FF%55F97F79F9FF7955FD08FF2B25A9FD11FF5555FD13FF5252FD10FF7D27FD%22FF794F7F2BF97FFFFFA92BA9FD06FF55F9A355F9A9FFA9FD08FF4FF9FD%12FF7F4FFD13FF5252FD10FFA827FD1EFF7F7FFFFF7F2B79552B7FFFFFFF%A9FD07FF4FF9A37FF9FD0BFF4F2BFD12FF7F55FD13FF5252FD10FF7D27FD%1EFF2555FFFF55252A7F7FA9FD0BFFA903A37FF9A9FD0AFF792AFD12FFA3%24FD13FF2752FD10FFA827FD1EFF4F557F5579F9557FFD0EFF7FA9FF55FD%0BFFA9A9FD12FFA97FFD13FF5252FD10FF7D27FD1EFF254F4F2B2BF925A9%FD46FF5252FD10FFA827FD1EFF4FF92BF92BF925A9FD16FFA87DFD2EFF52%52FD04FF7D7DA8FFA87D7DFFA87DA8FF7D27FD1DFFA9242BF9F9032BF9FD%17FFF8F852FD2DFF5252FD04FF527D7DFFFFA87D527D7D52FFA827FD1DFF%552B792B2B4F4F2BFD17FF7D277D527DFD2BFF5252FD04FF52FF27FFFFFF%52A827FF52FF7D277DA8FD1BFF55F9FFA9A9A95525FD18FFA8FFA8525252%FD27FF7DA82752FD04FF527D7DA8FF5252A87D7D52FFA827FD1DFF5555FD%04FF554FFD1DFF7D277DA8FD26FF5252FD04FFA87DFFA8A87D7DA8FF7DA8%FF7D27FD1DFF4F7FFD04FFA354FD1FFF7D5227A8FD24FF5252FD10FFA827%FD1DFF4FA9FD27FFA852527DFD22FF5252FD10FF7D27FD1BFFA955557FFD%29FFA8A8FD22FF5252FD10FFA827FD1BFF7F2B2BA9FD28FFA8FD05FFA8FD%1EFF5252FD10FF7D27FD1BFF7FF92BA9FD20FF7DA8FFA8FFA8FFA852A8FF%A8FFFFA852FFA8FFA8FFA8FF52A8FFFFA8FF7D7DFD04FFA8FFA8FFA8FD05%FF5252FD10FFA827FD1BFF55F9F9FD21FF277D52A87DA8277D52527D7DA8%7DA8A8A87D52A85252A8527DFFA8527D7D52FF527DA87D527D7D527DFD04%FF5252FD10FF7D27FD1BFF2BF979FD21FF7DFF52A87DA87DFF7DA85252A8%52A87D5252FD047DA852FFFFFF527D7DA8A87D527D7DA87D527D7DFD04FF%5252FD10FFA827FD1AFFA9252BA9FD21FF7D7D7D52277D52FF52527DA852%527D52FD047D527D7D7D52FFA87D52A8527D52527D7D52A87D7D7DFD04FF%5252FD10FF7D27FD1AFF7F4FA9FD23FFA8FFA8FFA8FFA8FFA8FFFFFFA8FF%A8FFA8FFA8A8A8FD05FFA8FD05FFA8FF5252A8FFA8FD05FF2752FD10FFA8%27FD1AFF2B55FD46FFA8A8FD08FF5252FD10FF7D27FD19FFA9F97FFD50FF%5252FD10FFA827FD19FF554FFD51FF5252FD04FF7D52A8FFFF7D52FF7D7D%7DFF7D27FD19FF5554FD51FF5252FD04FF52A852FFFFA852FF7D52A8FFA8%27FFA8FD17FF4F7FFD51FF5252FD04FF52FF27FFFFFF52FFA8A827FF7D27%7DA8FD17FF4F7FFD4FFF7DA82752FD04FF7D52FD04A852FF7D7D7DFFA827%FD19FF2BA9FD51FF7D52FD04FFA8A8FFFFA8FF7DFFA8A8A8FF7D27FD18FF%A92BA3FD51FF2752FD10FFA827FD17FF7FFF2BFD52FF5252FD10FF7D27FD%16FFA925554FFD52FF5252FD10FFA827FD16FFA9252B55FD52FF5252FD10%FF7D27FD16FF7FF9F9A9FD52FF5252FD10FFA827FD16FFA3F955FD53FF52%52FD10FF7D27FD16FF5555FD54FF5252FD10FFA827FD16FF5555FD54FF52%52FD10FF7D27FD16FFF9A9FD2CFF7FFFA9557FA955FD06FFA97FFD19FF27%52FD10FFA827FD15FF554FFD2CFFA3A9FFFF2BFFFF7FA9FD06FF7FFD19FF%5252FD10FF7D27FD14FFA92BA9FD2CFF7FA9FF7F4F557FFD08FF7FA9FD18%FF5252FD05FFA8FD07FFA8FFFFA827FD14FFA925FD2DFF7FFFFF7F7FA9A9%FD09FF7FFF7FFFA9A9FD13FF5252FD04FF527D7DFFFF7D52FF7D5252FF7D%27FD14FF4F55FD2CFFA97FFFFF2AA9FF7F7FA97FFFA9FF55CBA9A3A955A9%7FA3FD13FF5252FD04FF52FF52FFFFA87DFF52FF7DA8A827A8A8FD11FFA9%2BA9FD2DFF7FFFA97F7FA955FF55A97F7F7F79FFA3A9FF55A9A9FD13FFA8%5252FD04FF27FF27FFFFFF52FF27FF52FF7D27A8A8FD11FF7F2BFD2EFFA9%7FFD05FFA979A3797F5579A979FFFF5555FD13FFA8FF2752FD04FF7D52A8%7DFFA852FFA852A8FFA827FD13FF5555FD2FFFA9FD06FF7FCBA3FD05A9FF%FF7FA9FD15FF5252FD0AFFA8FD05FF7D27FD13FF4F54FD57FF2752FD10FF%A827FD13FF2BA9FD57FF5252FD10FF7D27FD13FF2B7FFD57FF5252FD10FF%A827FD13FF25FD58FF5252FD10FF7D27FD12FFA92BA9FD57FF5252FD10FF%A827FD12FFA32BFD58FF5252FD10FF7D27FD12FF5555FD05FFA87DFFA8FD%11FFA8FD3DFF5252FD10FFA827FD12FF4F7FFD05FFA8527DA8A87DA8FFFD%05A8FF7D7DFFFFA8A87D52A8A8A8FFA8A8A8FF7DFD34FF5252FD10FF7D27%FD11FFA925FD07FF527D7D7D277D7D52527D5252A8527DFFFF52527D52FF%52527D52527D525252FD33FF2752FD10FFA827FD11FF5555FD06FFA852FD%047D527D527D527D27A852FFFFFF7D52FD047D527D52A87D7D527DFD33FF%5252FD10FF7D27FD11FF5555FD07FF527D527D7D7DA8A87DA87D7D7D52A8%FFA87D7DFFFD067D277DA87D7DFD33FF5252FD05FF7DFFFFFFA8A8FFFF7D%A8FFA827FD11FF2BA9FD20FF7D7DA8FD36FF5252FD04FF277D52FFA85252%7D52527DFF7D27FD10FFA925A9FD59FF5252FD04FF52FF52FFFF52FF52A8%7D7DFFA827A87DFD0EFF7F2BFD0DFF7D7DFD49FFA87D2752FD04FF27A852%FFA8527D52A8FF27FF7D27A8FD0FFFF979FD0BFFA82752A8FD49FFA8FF27%52FD04FFA852FFA8A8A87DA8A852A8FFA827FD0FFF7F2BA9FD09FFA85252%A8FD4DFF5252FD10FF7D27FD0FFF4F54FD08FFA852527DFD4FFF2752FD10%FFA827FD0FFF25FD07FFA87D52A8FD51FF5252FD10FF7D27FD0EFF554FFD%06FF52527DFD53FF5252FD10FFA827FD0EFF5579FFFFFFA87D27A8FD55FF%5252FD10FF7D27FD0EFF24A9A75252527DFD57FF5252FD10FFA827FD0DFF%7F2BFF27F852FD59FF5252FD10FF7D27FD0DFF5555FF527DA8FD59FF5252%FD10FFA827FD0DFF2BA3FD5DFF5252FD10FF7D27FD0CFFA92BA9FD5DFF27%52FD10FFA827FD0CFFA92BFD5EFF5252FD10FF7D27FD0CFF5555FD06FFA8%FD2BFFA8FD15FFA8FD15FF5252FD04FFA852FFFFFFA87DA8FF52A8FFA827%FD0CFF4F7FFD07FF7DFD15FF7DFD14FFA8A8FD15FFA8FD14FF5252FD04FF%27A852FFA8527D5252A852FF7D277EA87DA87EA87DA87EA87D7E03A8A7A8%A8A87DA87D7DFD04A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87D7DA8A87D%A8A8A87DA8A8A87DA8A8A87DA8A8A87DA87D7DFD04A87DA8A8A87DA8A8A8%7DA8A8A87DA8A8A87D7DA8A87DA8A8A87DA8A8A87DA8A8A87DA8A8A87DFF%2752FD04FF52FF52FFFF52FF5252FF7DA8A8272700FD6B277DFD04FF527D%7DA8A852FD047D52FD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8%FFFFFFA8FD0BFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD0BFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FD08FF7DFFA8FFA8A8FFFF7DFFFFFFA8FD13FFA8FFFFFFA8%FD13FFA8FFFFFFA8FD11FFA8FD11FFA8FFFFFFA8FD11FFA8FFFFFFA8FD10%FF7D5252FD11FF7D527DFF52527DFD0EFF7D27FF7D5252A85252A8FD0CFF%5252FF7D52A8A8527DA8FD0BFF7D7D52A852527DA8527DFD0CFF7D7D52FF%527DA8A8527DFD0CFF52FF52A8FD10FFA852A8A87DFF52FD0EFFA87DFF52%FF7D52A87D7DFD0CFF7D7DFFA87DA87DA87D7DFD0DFF7D7D7DFF5252FF52%FD0EFF52A87D7DFF52FF52FD0CFF52A827FD11FFA8FF527D52A827FD0FFF%52FF52FF52527D7D7DFD0CFFA852FFA8FF52FD047DFD0CFF7D7DFF52FF52%52A852A8FD0CFF7D7DFFA8A85252A852FD0CFFA852A8FD11FFA8527DA87D%52A8FD0EFFA852FFA8527DA87D7DFD0DFF7D52FF7D527DA87D52FD0CFFA8%277DA8A852A8A87D7DFD0CFFA8277DA87D52A8A87D7DFD36FFA8FD05FFA8%FD0FFFA8FFFFA8FFFFA8FD0DFFA8FFA8FD05FFA8FD0DFFA8FFA8FFA8FFFF%FFA8FD34FFFD04A8FD0EFFA8A8FD6CFF7D5252527D7DFD07FFA8FFFFFF7D%7D527DA87DFFFFA8FFA8FD65FFA87DFF7D7D7DFD0452FF7D7D7DFFFF7D27%A8FF7D27FF7D7D7D52527DA8FD62FF7D7DFFFF52A8527D7D7D52277D27A8%FFFF7D277D7D7DA8277D5252A87D52FD62FF7D52FFA852FD047D527D527D%7DFFFF7D7DA852A852A8527D7D7D527D7DFD62FF7D7DFFA87DA87DA87D7D%7DFF7DA8FFFFA87D7DFFFF7DA8A87DFF52527DFD7DFF7D7DFDAFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                     
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS5</xmp:CreatorTool>
         <xmp:CreateDate>2012-06-04T10:37:34-07:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>224</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA4AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AmH5dX9ppV95d1OST6pc2&#xA;ehajP+ZlzKHDLeJJbtE1+enrh/WKcvi9OtPgpiqY+frryfN5z0680drOfzHb61pL6nZorDWLiNxC&#xA;YHspnZuNskMnKYLHwdQ4Lq3I4qhvJCTr5t8vBw6+bzq+vN5x4hxKbEm7+p/Wa/7oqbb6tX4afY74&#xA;qjIvOv55+YPN/mrS/KUXliPTPLt8LINqy6gs78ow4Nbd3Q9fAfLFUw/6yn/78b/ub4q7/rKf/vxv&#xA;+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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2.925930</stDim:w>
            <stDim:h>2.495375</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -168.622 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 168.622 li
195.312 168.622 li
195.312 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
20.2319 147.056 mo
187.632 147.056 li
187.632 3.05615 li
20.2319 3.05615 li
20.2319 147.056 li
cp
clp
1.5 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
20.2319 147.056 mo
38.981 146.987 li
39.6504 146.747 li
40.3198 145.71 li
41.6592 141.664 li
42.3286 138.269 li
42.9985 135.501 li
43.668 134.21 li
44.3374 130.521 li
45.0073 129.309 li
46.3462 124.777 li
47.0161 125.197 li
47.6855 122.43 li
48.355 120.425 li
49.0249 115.85 li
49.6943 114.673 li
50.3638 112.31 li
51.0337 108.774 li
51.7031 102.713 li
52.3726 99.2222 li
53.0425 97.5532 li
53.7119 96.3843 li
54.3813 93.5376 li
55.0513 92.4312 li
56.3901 89.5747 li
57.0601 80.6196 li
57.7295 84.0034 li
58.3989 86.2993 li
59.0688 84.8638 li
59.7383 81.8384 li
60.4077 79.8218 li
61.0776 71.5337 li
61.7471 68.1343 li
62.4165 69.8013 li
63.0864 64.375 li
63.7559 63.188 li
64.4253 57.4121 li
65.0952 65.3916 li
65.7646 61.9209 li
66.4341 62.3081 li
67.104 49.0981 li
67.7734 51.7793 li
68.4429 40.6943 li
69.1128 45.5122 li
69.7822 47.2021 li
70.4517 50.2061 li
71.1216 48.5713 li
71.791 43.3071 li
73.1304 50.3989 li
73.7998 49.54 li
74.4697 43.8384 li
75.1392 37.0781 li
75.8086 48.3604 li
76.4785 54 li
77.8174 40.0679 li
78.4873 37.2783 li
79.1567 27.6479 li
79.8262 38.5332 li
80.4961 41.6919 li
81.1655 27.4482 li
81.835 27.915 li
82.5049 22.3369 li
83.1743 14.9199 li
83.8438 12.7573 li
84.5137 17.562 li
85.1831 19.9673 li
85.8525 20.5869 li
86.5225 27.0601 li
87.1919 26.9663 li
87.8613 39.4072 li
88.5313 29.043 li
89.2007 26.501 li
89.8701 17.5981 li
90.54 20.8169 li
92.5488 34.8013 li
93.2183 30.52 li
93.8877 17.125 li
94.5581 18.8979 li
95.2271 22.1191 li
95.897 18.9482 li
96.5659 28.0571 li
97.2358 32.4033 li
97.9058 35.688 li
98.5747 31.6221 li
99.2456 15.8413 li
99.9136 22.252 li
100.583 41.3882 li
101.253 34.3423 li
101.923 43.3281 li
102.593 25.5449 li
103.262 16.1563 li
103.932 18.5942 li
104.602 32.2671 li
105.271 41.4761 li
105.941 43.0781 li
106.61 33.2412 li
107.28 32.293 li
107.95 30.5601 li
108.619 17.9502 li
109.289 30.6021 li
109.958 37.8481 li
110.628 22.877 li
111.298 30.6499 li
111.967 24.2012 li
113.306 22.688 li
113.976 7.95801 li
114.646 9.44922 li
115.315 11.9961 li
115.985 15.7563 li
116.654 14.7119 li
117.324 15.376 li
117.994 12.3662 li
118.663 14.2612 li
119.333 25.1841 li
120.001 29.9443 li
120.672 14.0103 li
121.342 27.1992 li
122.011 19.6611 li
122.681 27.71 li
123.35 30.9502 li
124.02 31.959 li
124.69 38.9331 li
125.359 42.6499 li
126.029 36.6611 li
126.698 23.7319 li
127.368 21.6714 li
128.038 25.6851 li
128.707 24.334 li
129.376 29.061 li
130.046 30.9473 li
130.716 25.584 li
131.386 27.2134 li
132.055 27.958 li
132.725 31.8032 li
133.394 23.355 li
134.064 29.8882 li
134.734 29.5352 li
135.403 30.8643 li
136.073 31.248 li
136.742 18.7222 li
137.412 17.6113 li
138.082 25.5562 li
138.75 27.5103 li
139.421 34.2402 li
140.09 31.8071 li
140.76 26.1372 li
141.43 12.4189 li
142.099 12.9111 li
143.438 17.3833 li
144.108 36.1782 li
144.778 24.2603 li
145.447 27.0259 li
146.117 27.9043 li
146.786 27.0894 li
147.456 10.8301 li
148.125 19.8003 li
148.794 24.8091 li
149.465 18.2739 li
150.134 15.7681 li
150.804 18.7461 li
151.474 15.5054 li
152.143 22.2671 li
152.813 25.5259 li
153.482 36.0142 li
154.152 22.7412 li
154.822 30.7842 li
155.491 33.981 li
156.161 42.9893 li
156.161 42.9893 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.883665 .769161 0 0 cmyk
@
grestore
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
20.2319 3.05615 mo
20.2319 7.05615 li
20.2319 147.056 mo
20.2319 143.056 li
false sop
0 0 0 1 cmyk
@
20.7358 157 mo
20.0957 157 19.6001 156.736 19.248 156.208 cv
18.896 155.68 18.7197 154.944 18.7197 153.984 cv
18.7197 153.032 18.896 152.289 19.248 151.76 cv
19.6001 151.232 20.0957 150.96 20.7358 150.96 cv
21.3682 150.96 21.8638 151.232 22.2158 151.76 cv
22.5679 152.289 22.752 153.032 22.752 153.984 cv
22.752 154.944 22.5679 155.68 22.2158 156.208 cv
21.8638 156.736 21.3682 157 20.7358 157 cv
20.7358 157 li
cp
20.7358 156.625 mo
21.1357 156.625 21.4321 156.408 21.6318 155.968 cv
21.8237 155.537 21.9277 154.873 21.9277 153.984 cv
21.9277 153.104 21.8237 152.44 21.6318 152 cv
21.4321 151.568 21.1357 151.344 20.7358 151.344 cv
20.3359 151.344 20.0317 151.568 19.8398 152 cv
19.6401 152.44 19.5439 153.104 19.5439 153.984 cv
19.5439 154.873 19.6401 155.537 19.8398 155.968 cv
20.0317 156.408 20.3359 156.625 20.7358 156.625 cv
ef
53.7119 3.05615 mo
53.7119 7.05615 li
53.7119 147.056 mo
53.7119 143.056 li
@
53.1758 151.064 mo
53.1758 151.705 li
50.5039 151.705 li
50.5039 153.376 li
50.6318 153.28 50.792 153.216 50.9761 153.168 cv
51.1519 153.121 51.3599 153.096 51.584 153.096 cv
52.208 153.096 52.7041 153.272 53.0718 153.625 cv
53.4399 153.976 53.624 154.448 53.624 155.048 cv
53.624 155.672 53.4399 156.152 53.0718 156.488 cv
52.7041 156.833 52.1841 157 51.52 157 cv
51.248 157 50.9761 156.968 50.6958 156.904 cv
50.4077 156.848 50.1201 156.752 49.832 156.616 cv
49.832 155.48 li
50.272 155.48 li
50.2959 155.856 50.416 156.144 50.624 156.336 cv
50.832 156.528 51.1357 156.625 51.52 156.625 cv
51.9277 156.625 52.2397 156.488 52.4639 156.216 cv
52.688 155.944 52.7998 155.56 52.7998 155.048 cv
52.7998 154.544 52.688 154.16 52.4722 153.888 cv
52.248 153.616 51.936 153.48 51.52 153.48 cv
51.2798 153.48 51.0718 153.528 50.896 153.608 cv
50.7197 153.688 50.5601 153.816 50.4238 153.992 cv
50.0879 153.992 li
50.0879 151.064 li
53.1758 151.064 li
53.1758 151.064 li
cp
ef
56.9761 157 mo
56.3359 157 55.8398 156.736 55.4878 156.208 cv
55.1357 155.68 54.96 154.944 54.96 153.984 cv
54.96 153.032 55.1357 152.289 55.4878 151.76 cv
55.8398 151.232 56.3359 150.96 56.9761 150.96 cv
57.6079 150.96 58.104 151.232 58.4561 151.76 cv
58.8081 152.289 58.9917 153.032 58.9917 153.984 cv
58.9917 154.944 58.8081 155.68 58.4561 156.208 cv
58.104 156.736 57.6079 157 56.9761 157 cv
56.9761 157 li
cp
56.9761 156.625 mo
57.376 156.625 57.6719 156.408 57.8721 155.968 cv
58.064 155.537 58.168 154.873 58.168 153.984 cv
58.168 153.104 58.064 152.44 57.8721 152 cv
57.6719 151.568 57.376 151.344 56.9761 151.344 cv
56.5757 151.344 56.272 151.568 56.0801 152 cv
55.8799 152.44 55.7837 153.104 55.7837 153.984 cv
55.7837 154.873 55.8799 155.537 56.0801 155.968 cv
56.272 156.408 56.5757 156.625 56.9761 156.625 cv
ef
87.1919 3.05615 mo
87.1919 7.05615 li
87.1919 147.056 mo
87.1919 143.056 li
@
81.4878 156.896 mo
81.4878 156.48 li
82.5039 156.48 li
82.5039 151.632 li
81.3281 152.392 li
81.3281 151.88 li
82.752 150.96 li
83.2881 150.96 li
83.2881 156.48 li
84.3037 156.48 li
84.3037 156.896 li
81.4878 156.896 li
81.4878 156.896 li
cp
ef
87.936 157 mo
87.2959 157 86.7998 156.736 86.4478 156.208 cv
86.0962 155.68 85.9199 154.944 85.9199 153.984 cv
85.9199 153.032 86.0962 152.289 86.4478 151.76 cv
86.7998 151.232 87.2959 150.96 87.936 150.96 cv
88.5679 150.96 89.064 151.232 89.416 151.76 cv
89.7681 152.289 89.9521 153.032 89.9521 153.984 cv
89.9521 154.944 89.7681 155.68 89.416 156.208 cv
89.064 156.736 88.5679 157 87.936 157 cv
87.936 157 li
cp
87.936 156.625 mo
88.3359 156.625 88.6318 156.408 88.832 155.968 cv
89.0239 155.537 89.1279 154.873 89.1279 153.984 cv
89.1279 153.104 89.0239 152.44 88.832 152 cv
88.6318 151.568 88.3359 151.344 87.936 151.344 cv
87.5361 151.344 87.2319 151.568 87.04 152 cv
86.8398 152.44 86.7441 153.104 86.7441 153.984 cv
86.7441 154.873 86.8398 155.537 87.04 155.968 cv
87.2319 156.408 87.5361 156.625 87.936 156.625 cv
ef
92.9761 157 mo
92.3359 157 91.8398 156.736 91.4878 156.208 cv
91.1357 155.68 90.96 154.944 90.96 153.984 cv
90.96 153.032 91.1357 152.289 91.4878 151.76 cv
91.8398 151.232 92.3359 150.96 92.9761 150.96 cv
93.6079 150.96 94.104 151.232 94.4561 151.76 cv
94.8081 152.289 94.9917 153.032 94.9917 153.984 cv
94.9917 154.944 94.8081 155.68 94.4561 156.208 cv
94.104 156.736 93.6079 157 92.9761 157 cv
92.9761 157 li
cp
92.9761 156.625 mo
93.376 156.625 93.6719 156.408 93.8721 155.968 cv
94.064 155.537 94.168 154.873 94.168 153.984 cv
94.168 153.104 94.064 152.44 93.8721 152 cv
93.6719 151.568 93.376 151.344 92.9761 151.344 cv
92.5757 151.344 92.272 151.568 92.0801 152 cv
91.8799 152.44 91.7837 153.104 91.7837 153.984 cv
91.7837 154.873 91.8799 155.537 92.0801 155.968 cv
92.272 156.408 92.5757 156.625 92.9761 156.625 cv
ef
120.672 3.05615 mo
120.672 7.05615 li
120.672 147.056 mo
120.672 143.056 li
@
114.848 156.896 mo
114.848 156.48 li
115.864 156.48 li
115.864 151.632 li
114.688 152.392 li
114.688 151.88 li
116.112 150.96 li
116.648 150.96 li
116.648 156.48 li
117.664 156.48 li
117.664 156.896 li
114.848 156.896 li
114.848 156.896 li
cp
ef
123.016 151.064 mo
123.016 151.705 li
120.344 151.705 li
120.344 153.376 li
120.472 153.28 120.632 153.216 120.816 153.168 cv
120.992 153.121 121.2 153.096 121.424 153.096 cv
122.048 153.096 122.544 153.272 122.912 153.625 cv
123.28 153.976 123.464 154.448 123.464 155.048 cv
123.464 155.672 123.28 156.152 122.912 156.488 cv
122.544 156.833 122.024 157 121.36 157 cv
121.088 157 120.816 156.968 120.536 156.904 cv
120.248 156.848 119.959 156.752 119.672 156.616 cv
119.672 155.48 li
120.112 155.48 li
120.136 155.856 120.256 156.144 120.464 156.336 cv
120.672 156.528 120.976 156.625 121.36 156.625 cv
121.768 156.625 122.08 156.488 122.304 156.216 cv
122.528 155.944 122.64 155.56 122.64 155.048 cv
122.64 154.544 122.528 154.16 122.312 153.888 cv
122.088 153.616 121.776 153.48 121.36 153.48 cv
121.12 153.48 120.912 153.528 120.736 153.608 cv
120.56 153.688 120.4 153.816 120.264 153.992 cv
119.928 153.992 li
119.928 151.064 li
123.016 151.064 li
123.016 151.064 li
cp
ef
126.576 157 mo
125.936 157 125.44 156.736 125.088 156.208 cv
124.736 155.68 124.56 154.944 124.56 153.984 cv
124.56 153.032 124.736 152.289 125.088 151.76 cv
125.44 151.232 125.936 150.96 126.576 150.96 cv
127.208 150.96 127.704 151.232 128.056 151.76 cv
128.408 152.289 128.592 153.032 128.592 153.984 cv
128.592 154.944 128.408 155.68 128.056 156.208 cv
127.704 156.736 127.208 157 126.576 157 cv
126.576 157 li
cp
126.576 156.625 mo
126.976 156.625 127.272 156.408 127.472 155.968 cv
127.664 155.537 127.768 154.873 127.768 153.984 cv
127.768 153.104 127.664 152.44 127.472 152 cv
127.272 151.568 126.976 151.344 126.576 151.344 cv
126.176 151.344 125.872 151.568 125.68 152 cv
125.48 152.44 125.384 153.104 125.384 153.984 cv
125.384 154.873 125.48 155.537 125.68 155.968 cv
125.872 156.408 126.176 156.625 126.576 156.625 cv
ef
154.152 3.05615 mo
154.152 7.05615 li
154.152 147.056 mo
154.152 143.056 li
@
148.096 152.457 mo
147.656 152.457 li
147.656 151.417 li
147.928 151.272 148.208 151.16 148.496 151.081 cv
148.776 151 149.056 150.96 149.328 150.96 cv
149.936 150.96 150.416 151.112 150.768 151.4 cv
151.12 151.696 151.296 152.096 151.296 152.6 cv
151.296 153.176 150.896 153.856 150.096 154.648 cv
150.032 154.712 149.992 154.752 149.959 154.784 cv
148.488 156.256 li
150.92 156.256 li
150.92 155.537 li
151.375 155.537 li
151.375 156.896 li
147.616 156.896 li
147.616 156.472 li
149.384 154.705 li
149.768 154.32 150.048 153.96 150.216 153.632 cv
150.384 153.304 150.472 152.96 150.472 152.6 cv
150.472 152.208 150.368 151.904 150.16 151.68 cv
149.952 151.457 149.672 151.344 149.32 151.344 cv
148.944 151.344 148.656 151.44 148.456 151.625 cv
148.248 151.808 148.128 152.088 148.096 152.457 cv
148.096 152.457 li
cp
ef
154.656 157 mo
154.016 157 153.52 156.736 153.167 156.208 cv
152.816 155.68 152.64 154.944 152.64 153.984 cv
152.64 153.032 152.816 152.289 153.167 151.76 cv
153.52 151.232 154.016 150.96 154.656 150.96 cv
155.288 150.96 155.784 151.232 156.136 151.76 cv
156.488 152.289 156.672 153.032 156.672 153.984 cv
156.672 154.944 156.488 155.68 156.136 156.208 cv
155.784 156.736 155.288 157 154.656 157 cv
154.656 157 li
cp
154.656 156.625 mo
155.056 156.625 155.352 156.408 155.552 155.968 cv
155.744 155.537 155.848 154.873 155.848 153.984 cv
155.848 153.104 155.744 152.44 155.552 152 cv
155.352 151.568 155.056 151.344 154.656 151.344 cv
154.256 151.344 153.952 151.568 153.76 152 cv
153.56 152.44 153.464 153.104 153.464 153.984 cv
153.464 154.873 153.56 155.537 153.76 155.968 cv
153.952 156.408 154.256 156.625 154.656 156.625 cv
ef
159.696 157 mo
159.056 157 158.56 156.736 158.208 156.208 cv
157.856 155.68 157.68 154.944 157.68 153.984 cv
157.68 153.032 157.856 152.289 158.208 151.76 cv
158.56 151.232 159.056 150.96 159.696 150.96 cv
160.328 150.96 160.824 151.232 161.176 151.76 cv
161.528 152.289 161.712 153.032 161.712 153.984 cv
161.712 154.944 161.528 155.68 161.176 156.208 cv
160.824 156.736 160.328 157 159.696 157 cv
159.696 157 li
cp
159.696 156.625 mo
160.096 156.625 160.392 156.408 160.592 155.968 cv
160.784 155.537 160.888 154.873 160.888 153.984 cv
160.888 153.104 160.784 152.44 160.592 152 cv
160.392 151.568 160.096 151.344 159.696 151.344 cv
159.296 151.344 158.992 151.568 158.8 152 cv
158.6 152.44 158.504 153.104 158.504 153.984 cv
158.504 154.873 158.6 155.537 158.8 155.968 cv
158.992 156.408 159.296 156.625 159.696 156.625 cv
ef
187.632 3.05615 mo
187.632 7.05615 li
187.632 147.056 mo
187.632 143.056 li
@
181.456 152.457 mo
181.016 152.457 li
181.016 151.417 li
181.288 151.272 181.568 151.16 181.856 151.081 cv
182.136 151 182.416 150.96 182.688 150.96 cv
183.296 150.96 183.776 151.112 184.128 151.4 cv
184.48 151.696 184.656 152.096 184.656 152.6 cv
184.656 153.176 184.256 153.856 183.456 154.648 cv
183.392 154.712 183.352 154.752 183.32 154.784 cv
181.848 156.256 li
184.28 156.256 li
184.28 155.537 li
184.736 155.537 li
184.736 156.896 li
180.976 156.896 li
180.976 156.472 li
182.744 154.705 li
183.128 154.32 183.408 153.96 183.576 153.632 cv
183.744 153.304 183.832 152.96 183.832 152.6 cv
183.832 152.208 183.728 151.904 183.52 151.68 cv
183.312 151.457 183.032 151.344 182.68 151.344 cv
182.304 151.344 182.016 151.44 181.816 151.625 cv
181.608 151.808 181.488 152.088 181.456 152.457 cv
181.456 152.457 li
cp
ef
189.736 151.064 mo
189.736 151.705 li
187.064 151.705 li
187.064 153.376 li
187.192 153.28 187.352 153.216 187.536 153.168 cv
187.712 153.121 187.919 153.096 188.144 153.096 cv
188.768 153.096 189.264 153.272 189.632 153.625 cv
190 153.976 190.184 154.448 190.184 155.048 cv
190.184 155.672 190 156.152 189.632 156.488 cv
189.264 156.833 188.744 157 188.08 157 cv
187.808 157 187.536 156.968 187.256 156.904 cv
186.968 156.848 186.68 156.752 186.392 156.616 cv
186.392 155.48 li
186.832 155.48 li
186.856 155.856 186.976 156.144 187.184 156.336 cv
187.392 156.528 187.696 156.625 188.08 156.625 cv
188.488 156.625 188.8 156.488 189.024 156.216 cv
189.248 155.944 189.36 155.56 189.36 155.048 cv
189.36 154.544 189.248 154.16 189.032 153.888 cv
188.808 153.616 188.496 153.48 188.08 153.48 cv
187.84 153.48 187.632 153.528 187.456 153.608 cv
187.28 153.688 187.12 153.816 186.984 153.992 cv
186.648 153.992 li
186.648 151.064 li
189.736 151.064 li
189.736 151.064 li
cp
ef
193.296 157 mo
192.656 157 192.16 156.736 191.808 156.208 cv
191.456 155.68 191.28 154.944 191.28 153.984 cv
191.28 153.032 191.456 152.289 191.808 151.76 cv
192.16 151.232 192.656 150.96 193.296 150.96 cv
193.928 150.96 194.424 151.232 194.776 151.76 cv
195.128 152.289 195.312 153.032 195.312 153.984 cv
195.312 154.944 195.128 155.68 194.776 156.208 cv
194.424 156.736 193.928 157 193.296 157 cv
193.296 157 li
cp
193.296 156.625 mo
193.696 156.625 193.992 156.408 194.192 155.968 cv
194.384 155.537 194.488 154.873 194.488 153.984 cv
194.488 153.104 194.384 152.44 194.192 152 cv
193.992 151.568 193.696 151.344 193.296 151.344 cv
192.896 151.344 192.592 151.568 192.4 152 cv
192.2 152.44 192.104 153.104 192.104 153.984 cv
192.104 154.873 192.2 155.537 192.4 155.968 cv
192.592 156.408 192.896 156.625 193.296 156.625 cv
ef
187.632 147.056 mo
183.632 147.056 li
20.2319 147.056 mo
24.2319 147.056 li
@
2.01611 150.041 mo
1.37598 150.041 .879883 149.776 .527832 149.249 cv
.175781 148.72 0 147.984 0 147.024 cv
0 146.072 .175781 145.328 .527832 144.8 cv
.879883 144.272 1.37598 144 2.01611 144 cv
2.64795 144 3.14404 144.272 3.49609 144.8 cv
3.84814 145.328 4.03174 146.072 4.03174 147.024 cv
4.03174 147.984 3.84814 148.72 3.49609 149.249 cv
3.14404 149.776 2.64795 150.041 2.01611 150.041 cv
2.01611 150.041 li
cp
2.01611 149.665 mo
2.41602 149.665 2.71191 149.448 2.91211 149.008 cv
3.104 148.576 3.20801 147.912 3.20801 147.024 cv
3.20801 146.144 3.104 145.48 2.91211 145.041 cv
2.71191 144.608 2.41602 144.384 2.01611 144.384 cv
1.61572 144.384 1.31201 144.608 1.12012 145.041 cv
.919922 145.48 .82373 146.144 .82373 147.024 cv
.82373 147.912 .919922 148.576 1.12012 149.008 cv
1.31201 149.448 1.61572 149.665 2.01611 149.665 cv
ef
5.26416 149.528 mo
5.26416 149.384 5.31201 149.264 5.40771 149.16 cv
5.50391 149.064 5.63184 149.008 5.78369 149.008 cv
5.92773 149.008 6.04785 149.064 6.15186 149.16 cv
6.24805 149.264 6.30371 149.384 6.30371 149.528 cv
6.30371 149.672 6.24805 149.8 6.15186 149.896 cv
6.04785 149.992 5.92773 150.041 5.78369 150.041 cv
5.63184 150.041 5.50391 149.992 5.40771 149.896 cv
5.31201 149.8 5.26416 149.68 5.26416 149.528 cv
5.26416 149.528 li
cp
ef
9.6958 150.041 mo
9.05615 150.041 8.56006 149.776 8.20801 149.249 cv
7.85596 148.72 7.68018 147.984 7.68018 147.024 cv
7.68018 146.072 7.85596 145.328 8.20801 144.8 cv
8.56006 144.272 9.05615 144 9.6958 144 cv
10.3281 144 10.8237 144.272 11.1758 144.8 cv
11.5278 145.328 11.7119 146.072 11.7119 147.024 cv
11.7119 147.984 11.5278 148.72 11.1758 149.249 cv
10.8237 149.776 10.3281 150.041 9.6958 150.041 cv
9.6958 150.041 li
cp
9.6958 149.665 mo
10.0957 149.665 10.3921 149.448 10.5918 149.008 cv
10.7837 148.576 10.8882 147.912 10.8882 147.024 cv
10.8882 146.144 10.7837 145.48 10.5918 145.041 cv
10.3921 144.608 10.0957 144.384 9.6958 144.384 cv
9.2959 144.384 8.9917 144.608 8.7998 145.041 cv
8.6001 145.48 8.50391 146.144 8.50391 147.024 cv
8.50391 147.912 8.6001 148.576 8.7998 149.008 cv
8.9917 149.448 9.2959 149.665 9.6958 149.665 cv
ef
14.7358 150.041 mo
14.0957 150.041 13.6001 149.776 13.248 149.249 cv
12.896 148.72 12.7197 147.984 12.7197 147.024 cv
12.7197 146.072 12.896 145.328 13.248 144.8 cv
13.6001 144.272 14.0957 144 14.7358 144 cv
15.3677 144 15.8638 144.272 16.2158 144.8 cv
16.5679 145.328 16.752 146.072 16.752 147.024 cv
16.752 147.984 16.5679 148.72 16.2158 149.249 cv
15.8638 149.776 15.3677 150.041 14.7358 150.041 cv
14.7358 150.041 li
cp
14.7358 149.665 mo
15.1357 149.665 15.4321 149.448 15.6318 149.008 cv
15.8237 148.576 15.9277 147.912 15.9277 147.024 cv
15.9277 146.144 15.8237 145.48 15.6318 145.041 cv
15.4321 144.608 15.1357 144.384 14.7358 144.384 cv
14.3359 144.384 14.0317 144.608 13.8398 145.041 cv
13.6401 145.48 13.5439 146.144 13.5439 147.024 cv
13.5439 147.912 13.6401 148.576 13.8398 149.008 cv
14.0317 149.448 14.3359 149.665 14.7358 149.665 cv
ef
187.632 123.056 mo
183.632 123.056 li
20.2319 123.056 mo
24.2319 123.056 li
@
2.01611 126.041 mo
1.37598 126.041 .879883 125.776 .527832 125.249 cv
.175781 124.72 0 123.984 0 123.024 cv
0 122.072 .175781 121.328 .527832 120.8 cv
.879883 120.272 1.37598 120 2.01611 120 cv
2.64795 120 3.14404 120.272 3.49609 120.8 cv
3.84814 121.328 4.03174 122.072 4.03174 123.024 cv
4.03174 123.984 3.84814 124.72 3.49609 125.249 cv
3.14404 125.776 2.64795 126.041 2.01611 126.041 cv
2.01611 126.041 li
cp
2.01611 125.665 mo
2.41602 125.665 2.71191 125.448 2.91211 125.008 cv
3.104 124.576 3.20801 123.913 3.20801 123.024 cv
3.20801 122.144 3.104 121.48 2.91211 121.041 cv
2.71191 120.608 2.41602 120.384 2.01611 120.384 cv
1.61572 120.384 1.31201 120.608 1.12012 121.041 cv
.919922 121.48 .82373 122.144 .82373 123.024 cv
.82373 123.913 .919922 124.576 1.12012 125.008 cv
1.31201 125.448 1.61572 125.665 2.01611 125.665 cv
ef
5.50391 125.528 mo
5.50391 125.384 5.55176 125.264 5.64795 125.16 cv
5.74414 125.064 5.87207 125.008 6.02393 125.008 cv
6.16797 125.008 6.28809 125.064 6.39209 125.16 cv
6.48779 125.264 6.54395 125.384 6.54395 125.528 cv
6.54395 125.672 6.48779 125.8 6.39209 125.896 cv
6.28809 125.992 6.16797 126.041 6.02393 126.041 cv
5.87207 126.041 5.74414 125.992 5.64795 125.896 cv
5.55176 125.8 5.50391 125.68 5.50391 125.528 cv
5.50391 125.528 li
cp
ef
9.6958 126.041 mo
9.05615 126.041 8.56006 125.776 8.20801 125.249 cv
7.85596 124.72 7.68018 123.984 7.68018 123.024 cv
7.68018 122.072 7.85596 121.328 8.20801 120.8 cv
8.56006 120.272 9.05615 120 9.6958 120 cv
10.3281 120 10.8237 120.272 11.1758 120.8 cv
11.5278 121.328 11.7119 122.072 11.7119 123.024 cv
11.7119 123.984 11.5278 124.72 11.1758 125.249 cv
10.8237 125.776 10.3281 126.041 9.6958 126.041 cv
9.6958 126.041 li
cp
9.6958 125.665 mo
10.0957 125.665 10.3921 125.448 10.5918 125.008 cv
10.7837 124.576 10.8882 123.913 10.8882 123.024 cv
10.8882 122.144 10.7837 121.48 10.5918 121.041 cv
10.3921 120.608 10.0957 120.384 9.6958 120.384 cv
9.2959 120.384 8.9917 120.608 8.7998 121.041 cv
8.6001 121.48 8.50391 122.144 8.50391 123.024 cv
8.50391 123.913 8.6001 124.576 8.7998 125.008 cv
8.9917 125.448 9.2959 125.665 9.6958 125.665 cv
ef
16.2158 120.104 mo
16.2158 120.744 li
13.5439 120.744 li
13.5439 122.417 li
13.6719 122.32 13.832 122.256 14.0161 122.208 cv
14.1919 122.16 14.3999 122.136 14.624 122.136 cv
15.248 122.136 15.7441 122.312 16.1118 122.665 cv
16.48 123.016 16.6641 123.488 16.6641 124.088 cv
16.6641 124.712 16.48 125.192 16.1118 125.528 cv
15.7441 125.873 15.2241 126.041 14.5601 126.041 cv
14.2881 126.041 14.0161 126.008 13.7358 125.944 cv
13.4478 125.888 13.1602 125.792 12.8721 125.656 cv
12.8721 124.52 li
13.312 124.52 li
13.3359 124.896 13.4561 125.184 13.6641 125.376 cv
13.8721 125.568 14.1758 125.665 14.5601 125.665 cv
14.9678 125.665 15.2798 125.528 15.5039 125.256 cv
15.728 124.984 15.8398 124.6 15.8398 124.088 cv
15.8398 123.584 15.728 123.2 15.5117 122.928 cv
15.2881 122.656 14.9761 122.52 14.5601 122.52 cv
14.3198 122.52 14.1118 122.568 13.936 122.648 cv
13.7598 122.728 13.6001 122.856 13.4639 123.032 cv
13.1279 123.032 li
13.1279 120.104 li
16.2158 120.104 li
16.2158 120.104 li
cp
ef
187.632 99.0562 mo
183.632 99.0562 li
20.2319 99.0562 mo
24.2319 99.0562 li
@
2.01611 102.041 mo
1.37598 102.041 .879883 101.776 .527832 101.249 cv
.175781 100.72 0 99.9839 0 99.0239 cv
0 98.0718 .175781 97.3276 .527832 96.8003 cv
.879883 96.272 1.37598 96.0005 2.01611 96.0005 cv
2.64795 96.0005 3.14404 96.272 3.49609 96.8003 cv
3.84814 97.3276 4.03174 98.0718 4.03174 99.0239 cv
4.03174 99.9839 3.84814 100.72 3.49609 101.249 cv
3.14404 101.776 2.64795 102.041 2.01611 102.041 cv
2.01611 102.041 li
cp
2.01611 101.665 mo
2.41602 101.665 2.71191 101.448 2.91211 101.008 cv
3.104 100.576 3.20801 99.9116 3.20801 99.0239 cv
3.20801 98.144 3.104 97.48 2.91211 97.0405 cv
2.71191 96.6079 2.41602 96.3843 2.01611 96.3843 cv
1.61572 96.3843 1.31201 96.6079 1.12012 97.0405 cv
.919922 97.48 .82373 98.144 .82373 99.0239 cv
.82373 99.9116 .919922 100.576 1.12012 101.008 cv
1.31201 101.448 1.61572 101.665 2.01611 101.665 cv
ef
5.26416 101.528 mo
5.26416 101.384 5.31201 101.264 5.40771 101.16 cv
5.50391 101.064 5.63184 101.008 5.78369 101.008 cv
5.92773 101.008 6.04785 101.064 6.15186 101.16 cv
6.24805 101.264 6.30371 101.384 6.30371 101.528 cv
6.30371 101.672 6.24805 101.8 6.15186 101.896 cv
6.04785 101.992 5.92773 102.041 5.78369 102.041 cv
5.63184 102.041 5.50391 101.992 5.40771 101.896 cv
5.31201 101.8 5.26416 101.68 5.26416 101.528 cv
5.26416 101.528 li
cp
ef
8.28809 101.936 mo
8.28809 101.52 li
9.30371 101.52 li
9.30371 96.6724 li
8.12793 97.4321 li
8.12793 96.9204 li
9.55176 96.0005 li
10.0879 96.0005 li
10.0879 101.52 li
11.104 101.52 li
11.104 101.936 li
8.28809 101.936 li
8.28809 101.936 li
cp
ef
14.7358 102.041 mo
14.0957 102.041 13.6001 101.776 13.248 101.249 cv
12.896 100.72 12.7197 99.9839 12.7197 99.0239 cv
12.7197 98.0718 12.896 97.3276 13.248 96.8003 cv
13.6001 96.272 14.0957 96.0005 14.7358 96.0005 cv
15.3677 96.0005 15.8638 96.272 16.2158 96.8003 cv
16.5679 97.3276 16.752 98.0718 16.752 99.0239 cv
16.752 99.9839 16.5679 100.72 16.2158 101.249 cv
15.8638 101.776 15.3677 102.041 14.7358 102.041 cv
14.7358 102.041 li
cp
14.7358 101.665 mo
15.1357 101.665 15.4321 101.448 15.6318 101.008 cv
15.8237 100.576 15.9277 99.9116 15.9277 99.0239 cv
15.9277 98.144 15.8237 97.48 15.6318 97.0405 cv
15.4321 96.6079 15.1357 96.3843 14.7358 96.3843 cv
14.3359 96.3843 14.0317 96.6079 13.8398 97.0405 cv
13.6401 97.48 13.5439 98.144 13.5439 99.0239 cv
13.5439 99.9116 13.6401 100.576 13.8398 101.008 cv
14.0317 101.448 14.3359 101.665 14.7358 101.665 cv
ef
187.632 75.0562 mo
183.632 75.0562 li
20.2319 75.0562 mo
24.2319 75.0562 li
@
2.01611 78.0405 mo
1.37598 78.0405 .879883 77.7759 .527832 77.2485 cv
.175781 76.7202 0 75.9839 0 75.0239 cv
0 74.0723 .175781 73.3281 .527832 72.8003 cv
.879883 72.272 1.37598 72 2.01611 72 cv
2.64795 72 3.14404 72.272 3.49609 72.8003 cv
3.84814 73.3281 4.03174 74.0723 4.03174 75.0239 cv
4.03174 75.9839 3.84814 76.7202 3.49609 77.2485 cv
3.14404 77.7759 2.64795 78.0405 2.01611 78.0405 cv
2.01611 78.0405 li
cp
2.01611 77.6646 mo
2.41602 77.6646 2.71191 77.4478 2.91211 77.0083 cv
3.104 76.5757 3.20801 75.9116 3.20801 75.0239 cv
3.20801 74.144 3.104 73.48 2.91211 73.04 cv
2.71191 72.6079 2.41602 72.3843 2.01611 72.3843 cv
1.61572 72.3843 1.31201 72.6079 1.12012 73.04 cv
.919922 73.48 .82373 74.144 .82373 75.0239 cv
.82373 75.9116 .919922 76.5757 1.12012 77.0083 cv
1.31201 77.4478 1.61572 77.6646 2.01611 77.6646 cv
ef
5.50391 77.5278 mo
5.50391 77.3843 5.55176 77.2642 5.64795 77.1597 cv
5.74414 77.064 5.87207 77.0083 6.02393 77.0083 cv
6.16797 77.0083 6.28809 77.064 6.39209 77.1597 cv
6.48779 77.2642 6.54395 77.3843 6.54395 77.5278 cv
6.54395 77.6724 6.48779 77.8003 6.39209 77.896 cv
6.28809 77.9917 6.16797 78.0405 6.02393 78.0405 cv
5.87207 78.0405 5.74414 77.9917 5.64795 77.896 cv
5.55176 77.8003 5.50391 77.6802 5.50391 77.5278 cv
5.50391 77.5278 li
cp
ef
8.28809 77.936 mo
8.28809 77.52 li
9.30371 77.52 li
9.30371 72.6724 li
8.12793 73.4321 li
8.12793 72.9199 li
9.55176 72 li
10.0879 72 li
10.0879 77.52 li
11.104 77.52 li
11.104 77.936 li
8.28809 77.936 li
8.28809 77.936 li
cp
ef
16.2158 72.104 mo
16.2158 72.7441 li
13.5439 72.7441 li
13.5439 74.416 li
13.6719 74.3203 13.832 74.2563 14.0161 74.208 cv
14.1919 74.1602 14.3999 74.1362 14.624 74.1362 cv
15.248 74.1362 15.7441 74.312 16.1118 74.6636 cv
16.48 75.0161 16.6641 75.4878 16.6641 76.0884 cv
16.6641 76.7124 16.48 77.1919 16.1118 77.5278 cv
15.7441 77.8726 15.2241 78.0405 14.5601 78.0405 cv
14.2881 78.0405 14.0161 78.0083 13.7358 77.9438 cv
13.4478 77.8882 13.1602 77.7925 12.8721 77.6558 cv
12.8721 76.52 li
13.312 76.52 li
13.3359 76.896 13.4561 77.1841 13.6641 77.3765 cv
13.8721 77.5679 14.1758 77.6646 14.5601 77.6646 cv
14.9678 77.6646 15.2798 77.5278 15.5039 77.2563 cv
15.728 76.9839 15.8398 76.6001 15.8398 76.0884 cv
15.8398 75.5845 15.728 75.1997 15.5117 74.9282 cv
15.2881 74.6558 14.9761 74.52 14.5601 74.52 cv
14.3198 74.52 14.1118 74.5679 13.936 74.6479 cv
13.7598 74.728 13.6001 74.856 13.4639 75.0327 cv
13.1279 75.0327 li
13.1279 72.104 li
16.2158 72.104 li
16.2158 72.104 li
cp
ef
187.632 51.0562 mo
183.632 51.0562 li
20.2319 51.0562 mo
24.2319 51.0562 li
@
2.01611 54.04 mo
1.37598 54.04 .879883 53.7759 .527832 53.248 cv
.175781 52.7202 0 51.9839 0 51.0239 cv
0 50.0723 .175781 49.3281 .527832 48.8003 cv
.879883 48.272 1.37598 48 2.01611 48 cv
2.64795 48 3.14404 48.272 3.49609 48.8003 cv
3.84814 49.3281 4.03174 50.0723 4.03174 51.0239 cv
4.03174 51.9839 3.84814 52.7202 3.49609 53.248 cv
3.14404 53.7759 2.64795 54.04 2.01611 54.04 cv
2.01611 54.04 li
cp
2.01611 53.6641 mo
2.41602 53.6641 2.71191 53.4482 2.91211 53.0083 cv
3.104 52.5762 3.20801 51.9121 3.20801 51.0239 cv
3.20801 50.144 3.104 49.48 2.91211 49.04 cv
2.71191 48.6079 2.41602 48.3843 2.01611 48.3843 cv
1.61572 48.3843 1.31201 48.6079 1.12012 49.04 cv
.919922 49.48 .82373 50.144 .82373 51.0239 cv
.82373 51.9121 .919922 52.5762 1.12012 53.0083 cv
1.31201 53.4482 1.61572 53.6641 2.01611 53.6641 cv
ef
5.26416 53.5283 mo
5.26416 53.3843 5.31201 53.2642 5.40771 53.1602 cv
5.50391 53.064 5.63184 53.0083 5.78369 53.0083 cv
5.92773 53.0083 6.04785 53.064 6.15186 53.1602 cv
6.24805 53.2642 6.30371 53.3843 6.30371 53.5283 cv
6.30371 53.6724 6.24805 53.8003 6.15186 53.896 cv
6.04785 53.9922 5.92773 54.04 5.78369 54.04 cv
5.63184 54.04 5.50391 53.9922 5.40771 53.896 cv
5.31201 53.8003 5.26416 53.6802 5.26416 53.5283 cv
5.26416 53.5283 li
cp
ef
8.17578 49.4961 mo
7.73584 49.4961 li
7.73584 48.4561 li
8.00781 48.312 8.28809 48.2002 8.57568 48.1201 cv
8.85596 48.04 9.13574 48 9.40771 48 cv
10.0161 48 10.4961 48.1523 10.8481 48.4399 cv
11.1997 48.7363 11.376 49.1362 11.376 49.6401 cv
11.376 50.2163 10.9761 50.896 10.1758 51.688 cv
10.1118 51.752 10.0718 51.792 10.04 51.8242 cv
8.56787 53.2959 li
11 53.2959 li
11 52.5762 li
11.4561 52.5762 li
11.4561 53.936 li
7.6958 53.936 li
7.6958 53.5122 li
9.46387 51.7441 li
9.84814 51.3599 10.1279 51 10.2959 50.6724 cv
10.4639 50.3442 10.5518 50 10.5518 49.6401 cv
10.5518 49.248 10.4478 48.9443 10.2397 48.7202 cv
10.0317 48.4961 9.75195 48.3843 9.3999 48.3843 cv
9.02393 48.3843 8.73584 48.48 8.53613 48.6641 cv
8.32813 48.8481 8.20801 49.1279 8.17578 49.4961 cv
8.17578 49.4961 li
cp
ef
14.7358 54.04 mo
14.0957 54.04 13.6001 53.7759 13.248 53.248 cv
12.896 52.7202 12.7197 51.9839 12.7197 51.0239 cv
12.7197 50.0723 12.896 49.3281 13.248 48.8003 cv
13.6001 48.272 14.0957 48 14.7358 48 cv
15.3677 48 15.8638 48.272 16.2158 48.8003 cv
16.5679 49.3281 16.752 50.0723 16.752 51.0239 cv
16.752 51.9839 16.5679 52.7202 16.2158 53.248 cv
15.8638 53.7759 15.3677 54.04 14.7358 54.04 cv
14.7358 54.04 li
cp
14.7358 53.6641 mo
15.1357 53.6641 15.4321 53.4482 15.6318 53.0083 cv
15.8237 52.5762 15.9277 51.9121 15.9277 51.0239 cv
15.9277 50.144 15.8237 49.48 15.6318 49.04 cv
15.4321 48.6079 15.1357 48.3843 14.7358 48.3843 cv
14.3359 48.3843 14.0317 48.6079 13.8398 49.04 cv
13.6401 49.48 13.5439 50.144 13.5439 51.0239 cv
13.5439 51.9121 13.6401 52.5762 13.8398 53.0083 cv
14.0317 53.4482 14.3359 53.6641 14.7358 53.6641 cv
ef
187.632 27.0562 mo
183.632 27.0562 li
20.2319 27.0562 mo
24.2319 27.0562 li
@
2.01611 30.04 mo
1.37598 30.04 .879883 29.7759 .527832 29.248 cv
.175781 28.7202 0 27.9839 0 27.0239 cv
0 26.0723 .175781 25.3281 .527832 24.8003 cv
.879883 24.272 1.37598 24 2.01611 24 cv
2.64795 24 3.14404 24.272 3.49609 24.8003 cv
3.84814 25.3281 4.03174 26.0723 4.03174 27.0239 cv
4.03174 27.9839 3.84814 28.7202 3.49609 29.248 cv
3.14404 29.7759 2.64795 30.04 2.01611 30.04 cv
2.01611 30.04 li
cp
2.01611 29.6641 mo
2.41602 29.6641 2.71191 29.4482 2.91211 29.0083 cv
3.104 28.5762 3.20801 27.9121 3.20801 27.0239 cv
3.20801 26.144 3.104 25.48 2.91211 25.04 cv
2.71191 24.6079 2.41602 24.3843 2.01611 24.3843 cv
1.61572 24.3843 1.31201 24.6079 1.12012 25.04 cv
.919922 25.48 .82373 26.144 .82373 27.0239 cv
.82373 27.9121 .919922 28.5762 1.12012 29.0083 cv
1.31201 29.4482 1.61572 29.6641 2.01611 29.6641 cv
ef
5.50391 29.5283 mo
5.50391 29.3843 5.55176 29.2642 5.64795 29.1602 cv
5.74414 29.064 5.87207 29.0083 6.02393 29.0083 cv
6.16797 29.0083 6.28809 29.064 6.39209 29.1602 cv
6.48779 29.2642 6.54395 29.3843 6.54395 29.5283 cv
6.54395 29.6724 6.48779 29.8003 6.39209 29.896 cv
6.28809 29.9922 6.16797 30.04 6.02393 30.04 cv
5.87207 30.04 5.74414 29.9922 5.64795 29.896 cv
5.55176 29.8003 5.50391 29.6802 5.50391 29.5283 cv
5.50391 29.5283 li
cp
ef
8.17578 25.4961 mo
7.73584 25.4961 li
7.73584 24.4561 li
8.00781 24.312 8.28809 24.2002 8.57568 24.1201 cv
8.85596 24.04 9.13574 24 9.40771 24 cv
10.0161 24 10.4961 24.1523 10.8481 24.4399 cv
11.1997 24.7363 11.376 25.1362 11.376 25.6401 cv
11.376 26.2163 10.9761 26.896 10.1758 27.688 cv
10.1118 27.752 10.0718 27.792 10.04 27.8242 cv
8.56787 29.2959 li
11 29.2959 li
11 28.5762 li
11.4561 28.5762 li
11.4561 29.936 li
7.6958 29.936 li
7.6958 29.5122 li
9.46387 27.7441 li
9.84814 27.3599 10.1279 27 10.2959 26.6724 cv
10.4639 26.3442 10.5518 26 10.5518 25.6401 cv
10.5518 25.248 10.4478 24.9443 10.2397 24.7202 cv
10.0317 24.4961 9.75195 24.3843 9.3999 24.3843 cv
9.02393 24.3843 8.73584 24.48 8.53613 24.6641 cv
8.32813 24.8481 8.20801 25.1279 8.17578 25.4961 cv
8.17578 25.4961 li
cp
ef
16.2158 24.104 mo
16.2158 24.7441 li
13.5439 24.7441 li
13.5439 26.416 li
13.6719 26.3203 13.832 26.2563 14.0161 26.208 cv
14.1919 26.1602 14.3999 26.1362 14.624 26.1362 cv
15.248 26.1362 15.7441 26.312 16.1118 26.6641 cv
16.48 27.0161 16.6641 27.4883 16.6641 28.0879 cv
16.6641 28.7119 16.48 29.1919 16.1118 29.5283 cv
15.7441 29.8721 15.2241 30.04 14.5601 30.04 cv
14.2881 30.04 14.0161 30.0083 13.7358 29.9443 cv
13.4478 29.8882 13.1602 29.792 12.8721 29.6563 cv
12.8721 28.52 li
13.312 28.52 li
13.3359 28.896 13.4561 29.1841 13.6641 29.376 cv
13.8721 29.5679 14.1758 29.6641 14.5601 29.6641 cv
14.9678 29.6641 15.2798 29.5283 15.5039 29.2563 cv
15.728 28.9839 15.8398 28.6001 15.8398 28.0879 cv
15.8398 27.584 15.728 27.2002 15.5117 26.9282 cv
15.2881 26.6563 14.9761 26.52 14.5601 26.52 cv
14.3198 26.52 14.1118 26.5679 13.936 26.6479 cv
13.7598 26.728 13.6001 26.856 13.4639 27.0322 cv
13.1279 27.0322 li
13.1279 24.104 li
16.2158 24.104 li
16.2158 24.104 li
cp
ef
187.632 3.05615 mo
183.632 3.05615 li
20.2319 3.05615 mo
24.2319 3.05615 li
@
2.01611 6.04004 mo
1.37598 6.04004 .879883 5.77588 .527832 5.24805 cv
.175781 4.72021 0 3.98389 0 3.02393 cv
0 2.07227 .175781 1.32813 .527832 .800293 cv
.879883 .271973 1.37598 0 2.01611 0 cv
2.64795 0 3.14404 .271973 3.49609 .800293 cv
3.84814 1.32813 4.03174 2.07227 4.03174 3.02393 cv
4.03174 3.98389 3.84814 4.72021 3.49609 5.24805 cv
3.14404 5.77588 2.64795 6.04004 2.01611 6.04004 cv
2.01611 6.04004 li
cp
2.01611 5.66406 mo
2.41602 5.66406 2.71191 5.44824 2.91211 5.0083 cv
3.104 4.57617 3.20801 3.91211 3.20801 3.02393 cv
3.20801 2.14404 3.104 1.47998 2.91211 1.04004 cv
2.71191 .60791 2.41602 .384277 2.01611 .384277 cv
1.61572 .384277 1.31201 .60791 1.12012 1.04004 cv
.919922 1.47998 .82373 2.14404 .82373 3.02393 cv
.82373 3.91211 .919922 4.57617 1.12012 5.0083 cv
1.31201 5.44824 1.61572 5.66406 2.01611 5.66406 cv
ef
5.26416 5.52832 mo
5.26416 5.38428 5.31201 5.26416 5.40771 5.16016 cv
5.50391 5.06396 5.63184 5.0083 5.78369 5.0083 cv
5.92773 5.0083 6.04785 5.06396 6.15186 5.16016 cv
6.24805 5.26416 6.30371 5.38428 6.30371 5.52832 cv
6.30371 5.67236 6.24805 5.80029 6.15186 5.896 cv
6.04785 5.99219 5.92773 6.04004 5.78369 6.04004 cv
5.63184 6.04004 5.50391 5.99219 5.40771 5.896 cv
5.31201 5.80029 5.26416 5.68018 5.26416 5.52832 cv
5.26416 5.52832 li
cp
ef
7.92773 .352051 mo
8.23193 .240234 8.52002 .151855 8.7998 .0883789 cv
9.08008 .0322266 9.34375 0 9.5918 0 cv
10.1602 0 10.6079 .12793 10.9277 .368164 cv
11.248 .616211 11.4077 .959961 11.4077 1.39209 cv
11.4077 1.74414 11.2959 2.04004 11.0718 2.27197 cv
10.8481 2.51221 10.5361 2.67236 10.1357 2.75195 cv
10.6157 2.82422 10.9839 3 11.248 3.28027 cv
11.5117 3.56006 11.6479 3.91992 11.6479 4.35986 cv
11.6479 4.9043 11.4639 5.32031 11.0957 5.60791 cv
10.728 5.896 10.208 6.04004 9.52002 6.04004 cv
9.21582 6.04004 8.91211 6.0083 8.62402 5.94434 cv
8.33594 5.88818 8.04785 5.79199 7.75977 5.65625 cv
7.75977 4.52002 li
8.19971 4.52002 li
8.22412 4.9043 8.35205 5.18408 8.57568 5.37598 cv
8.7998 5.56787 9.12012 5.66406 9.53613 5.66406 cv
9.93604 5.66406 10.248 5.55225 10.48 5.32031 cv
10.7041 5.08838 10.8237 4.76807 10.8237 4.36816 cv
10.8237 3.91211 10.7041 3.56787 10.4639 3.32813 cv
10.2241 3.09619 9.87988 2.97607 9.42383 2.97607 cv
9.05615 2.97607 li
9.05615 2.57617 li
9.24805 2.57617 li
9.7041 2.57617 10.0479 2.48828 10.272 2.2959 cv
10.4961 2.104 10.6157 1.82422 10.6157 1.43994 cv
10.6157 1.104 10.52 .840332 10.3359 .65625 cv
10.144 .47998 9.87988 .384277 9.52783 .384277 cv
9.17578 .384277 8.896 .472168 8.7041 .640137 cv
8.51172 .808105 8.3999 1.05615 8.36816 1.37598 cv
7.92773 1.37598 li
7.92773 .352051 li
7.92773 .352051 li
cp
ef
14.7358 6.04004 mo
14.0957 6.04004 13.6001 5.77588 13.248 5.24805 cv
12.896 4.72021 12.7197 3.98389 12.7197 3.02393 cv
12.7197 2.07227 12.896 1.32813 13.248 .800293 cv
13.6001 .271973 14.0957 0 14.7358 0 cv
15.3677 0 15.8638 .271973 16.2158 .800293 cv
16.5679 1.32813 16.752 2.07227 16.752 3.02393 cv
16.752 3.98389 16.5679 4.72021 16.2158 5.24805 cv
15.8638 5.77588 15.3677 6.04004 14.7358 6.04004 cv
14.7358 6.04004 li
cp
14.7358 5.66406 mo
15.1357 5.66406 15.4321 5.44824 15.6318 5.0083 cv
15.8237 4.57617 15.9277 3.91211 15.9277 3.02393 cv
15.9277 2.14404 15.8237 1.47998 15.6318 1.04004 cv
15.4321 .60791 15.1357 .384277 14.7358 .384277 cv
14.3359 .384277 14.0317 .60791 13.8398 1.04004 cv
13.6401 1.47998 13.5439 2.14404 13.5439 3.02393 cv
13.5439 3.91211 13.6401 4.57617 13.8398 5.0083 cv
14.0317 5.44824 14.3359 5.66406 14.7358 5.66406 cv
ef
1.5 lw
2 lc
20.2319 147.056 mo
20.2319 3.05615 li
20.2319 147.056 mo
187.632 147.056 li
187.632 147.056 mo
187.632 3.05615 li
20.2319 3.05615 mo
187.632 3.05615 li
@
79.8545 166.759 mo
79.8545 166.292 li
80.6914 166.292 li
80.6914 160.72 li
78.7656 160.72 li
78.7656 161.746 li
78.2256 161.746 li
78.2256 160.198 li
84.0483 160.198 li
84.0483 161.746 li
83.5083 161.746 li
83.5083 160.72 li
81.5825 160.72 li
81.5825 166.292 li
82.4194 166.292 li
82.4194 166.759 li
79.8545 166.759 li
79.8545 166.759 li
cp
ef
86.2832 166.292 mo
87.0483 166.292 li
87.0483 166.759 li
84.6992 166.759 li
84.6992 166.292 li
85.4736 166.292 li
85.4736 162.556 li
84.6992 162.556 li
84.6992 162.088 li
86.2832 162.088 li
86.2832 166.292 li
86.2832 166.292 li
cp
85.2485 160.639 mo
85.2485 160.504 85.2935 160.387 85.3926 160.288 cv
85.4912 160.189 85.6084 160.135 85.7524 160.135 cv
85.8784 160.135 85.9956 160.189 86.0942 160.288 cv
86.1934 160.387 86.2476 160.504 86.2476 160.639 cv
86.2476 160.783 86.1934 160.9 86.1035 160.99 cv
86.0044 161.089 85.8872 161.134 85.7524 161.134 cv
85.6084 161.134 85.4912 161.089 85.3926 160.99 cv
85.2935 160.9 85.2485 160.783 85.2485 160.639 cv
ef
91.9175 162.997 mo
92.0703 162.655 92.2686 162.403 92.5112 162.223 cv
92.7544 162.052 93.0337 161.962 93.3579 161.962 cv
93.8433 161.962 94.2124 162.115 94.4556 162.421 cv
94.689 162.727 94.8149 163.177 94.8149 163.79 cv
94.8149 166.292 li
95.5444 166.292 li
95.5444 166.759 li
93.3032 166.759 li
93.3032 166.292 li
94.0054 166.292 li
94.0054 163.879 li
94.0054 163.411 93.9331 163.069 93.7896 162.862 cv
93.645 162.665 93.4204 162.556 93.0962 162.556 cv
92.7368 162.556 92.4575 162.7 92.2686 162.97 cv
92.0796 163.24 91.9893 163.636 91.9893 164.158 cv
91.9893 166.292 li
92.6919 166.292 li
92.6919 166.759 li
90.4775 166.759 li
90.4775 166.292 li
91.1792 166.292 li
91.1792 163.852 li
91.1792 163.384 91.1074 163.051 90.9634 162.853 cv
90.8193 162.655 90.5942 162.556 90.2705 162.556 cv
89.9106 162.556 89.6313 162.7 89.4424 162.97 cv
89.2534 163.24 89.1636 163.636 89.1636 164.158 cv
89.1636 166.292 li
89.8652 166.292 li
89.8652 166.759 li
87.6245 166.759 li
87.6245 166.292 li
88.3535 166.292 li
88.3535 162.547 li
87.5796 162.547 li
87.5796 162.088 li
89.1636 162.088 li
89.1636 162.917 li
89.3076 162.61 89.4966 162.367 89.7305 162.205 cv
89.9644 162.043 90.2256 161.962 90.5225 161.962 cv
90.8823 161.962 91.1792 162.052 91.4224 162.232 cv
91.6655 162.412 91.8276 162.673 91.9175 162.997 cv
91.9175 162.997 li
cp
ef
99.5796 164.042 mo
99.561 163.501 99.4448 163.087 99.228 162.808 cv
99.0122 162.538 98.7153 162.394 98.3198 162.394 cv
97.9419 162.394 97.6538 162.538 97.437 162.817 cv
97.2212 163.096 97.0952 163.501 97.0503 164.042 cv
99.5796 164.042 li
99.5796 164.042 li
cp
100.534 164.509 mo
97.0503 164.509 li
97.0503 164.545 li
97.0503 165.175 97.1675 165.652 97.4019 165.976 cv
97.6353 166.3 97.9868 166.453 98.4546 166.453 cv
98.8052 166.453 99.0933 166.363 99.3276 166.174 cv
99.5522 165.994 99.7144 165.715 99.8042 165.346 cv
100.453 165.346 li
100.327 165.859 100.083 166.246 99.7417 166.499 cv
99.3901 166.75 98.9312 166.876 98.3735 166.876 cv
97.689 166.876 97.1401 166.66 96.7261 166.21 cv
96.312 165.76 96.105 165.167 96.105 164.419 cv
96.105 163.681 96.3032 163.087 96.7173 162.637 cv
97.1226 162.187 97.6538 161.962 98.3198 161.962 cv
99.021 161.962 99.5708 162.187 99.9487 162.619 cv
100.327 163.051 100.515 163.681 100.534 164.509 cv
ef
104.653 166.444 mo
104.653 164.95 li
105.157 164.95 li
105.166 165.454 105.308 165.823 105.587 166.057 cv
105.857 166.3 106.281 166.417 106.839 166.417 cv
107.361 166.417 107.757 166.318 108.027 166.111 cv
108.296 165.904 108.441 165.598 108.441 165.202 cv
108.441 164.887 108.351 164.644 108.189 164.473 cv
108.027 164.311 107.675 164.14 107.144 163.978 cv
106.281 163.717 li
105.652 163.528 105.202 163.294 104.95 163.006 cv
104.698 162.727 104.572 162.34 104.572 161.836 cv
104.572 161.278 104.769 160.846 105.166 160.54 cv
105.56 160.234 106.111 160.081 106.83 160.081 cv
107.136 160.081 107.468 160.117 107.83 160.18 cv
108.189 160.252 108.576 160.342 108.99 160.468 cv
108.99 161.863 li
108.496 161.863 li
108.441 161.404 108.289 161.071 108.027 160.864 cv
107.765 160.657 107.371 160.549 106.847 160.549 cv
106.38 160.549 106.029 160.648 105.787 160.837 cv
105.542 161.026 105.425 161.296 105.425 161.656 cv
105.425 161.971 105.515 162.214 105.697 162.394 cv
105.876 162.574 106.263 162.754 106.857 162.925 cv
107.667 163.168 li
108.261 163.348 108.683 163.583 108.935 163.852 cv
109.187 164.131 109.324 164.5 109.324 164.968 cv
109.324 165.607 109.117 166.084 108.71 166.399 cv
108.296 166.723 107.695 166.876 106.892 166.876 cv
106.533 166.876 106.164 166.84 105.787 166.768 cv
105.408 166.705 105.031 166.597 104.653 166.444 cv
104.653 166.444 li
cp
ef
111.027 162.556 mo
110.316 162.556 li
110.316 162.088 li
111.027 162.088 li
111.027 160.639 li
111.837 160.639 li
111.837 162.088 li
113.357 162.088 li
113.357 162.556 li
111.837 162.556 li
111.837 165.526 li
111.837 165.922 111.873 166.183 111.955 166.292 cv
112.027 166.399 112.169 166.453 112.376 166.453 cv
112.583 166.453 112.738 166.39 112.835 166.264 cv
112.925 166.138 112.98 165.94 112.99 165.661 cv
113.601 165.661 li
113.574 166.093 113.457 166.399 113.25 166.588 cv
113.042 166.777 112.728 166.876 112.304 166.876 cv
111.837 166.876 111.503 166.768 111.314 166.57 cv
111.117 166.372 111.027 166.021 111.027 165.526 cv
111.027 162.556 li
111.027 162.556 li
cp
ef
117.58 164.042 mo
117.56 163.501 117.445 163.087 117.228 162.808 cv
117.011 162.538 116.714 162.394 116.32 162.394 cv
115.941 162.394 115.654 162.538 115.437 162.817 cv
115.22 163.096 115.095 163.501 115.05 164.042 cv
117.58 164.042 li
117.58 164.042 li
cp
118.533 164.509 mo
115.05 164.509 li
115.05 164.545 li
115.05 165.175 115.167 165.652 115.402 165.976 cv
115.634 166.3 115.986 166.453 116.455 166.453 cv
116.804 166.453 117.093 166.363 117.328 166.174 cv
117.552 165.994 117.714 165.715 117.804 165.346 cv
118.453 165.346 li
118.326 165.859 118.083 166.246 117.742 166.499 cv
117.39 166.75 116.931 166.876 116.373 166.876 cv
115.689 166.876 115.14 166.66 114.726 166.21 cv
114.312 165.76 114.105 165.167 114.105 164.419 cv
114.105 163.681 114.302 163.087 114.716 162.637 cv
115.123 162.187 115.654 161.962 116.32 161.962 cv
117.021 161.962 117.57 162.187 117.949 162.619 cv
118.326 163.051 118.515 163.681 118.533 164.509 cv
ef
119.97 162.556 mo
119.197 162.556 li
119.197 162.088 li
120.781 162.088 li
120.781 162.817 li
120.933 162.529 121.13 162.313 121.382 162.169 cv
121.626 162.034 121.931 161.962 122.292 161.962 cv
122.869 161.962 123.335 162.196 123.697 162.646 cv
124.056 163.096 124.246 163.69 124.246 164.419 cv
124.246 165.157 124.056 165.751 123.697 166.201 cv
123.335 166.651 122.869 166.876 122.292 166.876 cv
121.931 166.876 121.626 166.804 121.382 166.678 cv
121.13 166.543 120.933 166.327 120.781 166.03 cv
120.781 168.154 li
121.544 168.154 li
121.544 168.622 li
119.197 168.622 li
119.197 168.154 li
119.97 168.154 li
119.97 162.556 li
119.97 162.556 li
cp
120.781 164.194 mo
120.781 164.653 li
120.781 165.22 120.888 165.652 121.103 165.94 cv
121.32 166.237 121.626 166.381 122.041 166.381 cv
122.455 166.381 122.759 166.219 122.976 165.886 cv
123.193 165.562 123.3 165.067 123.3 164.419 cv
123.3 163.771 123.193 163.285 122.976 162.961 cv
122.759 162.637 122.455 162.466 122.041 162.466 cv
121.626 162.466 121.32 162.619 121.103 162.917 cv
120.888 163.213 120.781 163.636 120.781 164.194 cv
ef
125.669 101.54 mo
123.602 96.0854 li
123.579 96.063 123.579 96.0288 123.579 96.0063 cv
123.579 95.9946 123.579 95.9604 123.602 95.9155 cv
125.669 90.4614 li
125.693 90.3696 125.76 90.3247 125.875 90.3247 cv
125.943 90.3247 125.988 90.3472 126.034 90.3931 cv
126.079 90.438 126.102 90.4839 126.102 90.5522 cv
126.102 90.5747 126.102 90.5864 126.102 90.5972 cv
126.102 90.6089 126.09 90.6196 126.09 90.6313 cv
124.045 96.0063 li
126.09 101.37 li
126.09 101.38 126.102 101.392 126.102 101.403 cv
126.102 101.403 126.102 101.426 126.102 101.449 cv
126.102 101.517 126.079 101.562 126.034 101.608 cv
125.988 101.653 125.931 101.676 125.875 101.676 cv
125.76 101.676 125.693 101.63 125.669 101.54 cv
125.669 101.54 li
cp
.883665 .769161 0 0 cmyk
ef
127.213 98.6069 mo
127.129 98.6069 127.093 98.5591 127.093 98.4507 cv
127.093 98.4263 127.105 98.3911 127.117 98.3423 cv
127.129 98.2944 127.141 98.2583 127.166 98.2349 cv
127.189 98.2104 127.213 98.187 127.25 98.187 cv
127.729 98.187 128.077 98.1626 128.269 98.103 cv
128.365 98.0786 128.449 97.9702 128.498 97.7788 cv
130.141 91.1909 li
130.153 91.1187 130.166 91.0591 130.166 91.0229 cv
130.166 90.939 130.117 90.8911 130.021 90.8784 cv
129.865 90.855 129.577 90.8306 129.157 90.8306 cv
129.073 90.8306 129.038 90.7827 129.038 90.6743 cv
129.038 90.6509 129.049 90.6147 129.061 90.5669 cv
129.073 90.519 129.085 90.4829 129.109 90.4585 cv
129.133 90.4351 129.157 90.4106 129.193 90.4106 cv
135.697 90.4106 li
135.769 90.4106 135.817 90.4702 135.817 90.5669 cv
135.529 93.0503 li
135.529 93.0747 135.505 93.0981 135.481 93.1226 cv
135.458 93.147 135.433 93.1587 135.409 93.1587 cv
135.301 93.1587 li
135.217 93.1587 135.181 93.1108 135.181 93.0024 cv
135.229 92.6187 135.253 92.3306 135.253 92.1382 cv
135.253 91.8267 135.193 91.5747 135.085 91.395 cv
134.965 91.2144 134.821 91.0825 134.641 91.0103 cv
134.461 90.939 134.257 90.8911 134.042 90.8667 cv
133.825 90.8423 133.538 90.8306 133.177 90.8306 cv
131.809 90.8306 li
131.593 90.8306 131.449 90.855 131.377 90.8911 cv
131.305 90.9263 131.233 91.0464 131.185 91.2388 cv
130.465 94.1431 li
131.401 94.1431 li
131.809 94.1431 132.109 94.1187 132.325 94.0591 cv
132.529 94.0103 132.697 93.8911 132.817 93.7104 cv
132.937 93.5308 133.045 93.2427 133.141 92.8462 cv
133.141 92.8228 133.153 92.7983 133.177 92.7749 cv
133.202 92.7505 133.225 92.7388 133.261 92.7388 cv
133.37 92.7388 li
133.441 92.7388 133.489 92.7983 133.489 92.895 cv
132.746 95.8589 li
132.721 95.9302 132.685 95.9663 132.625 95.9663 cv
132.517 95.9663 li
132.433 95.9663 132.397 95.9185 132.397 95.811 cv
132.469 95.4985 132.517 95.2583 132.517 95.103 cv
132.517 94.8745 132.409 94.731 132.193 94.6587 cv
131.977 94.5981 131.702 94.563 131.353 94.563 cv
130.357 94.563 li
129.542 97.8267 li
129.505 97.9224 129.493 98.019 129.493 98.0903 cv
129.493 98.1626 129.625 98.187 129.901 98.187 cv
131.353 98.187 li
131.929 98.187 132.397 98.1509 132.757 98.0542 cv
133.117 97.9585 133.405 97.8149 133.645 97.6226 cv
133.885 97.4302 134.089 97.1782 134.257 96.8667 cv
134.425 96.5669 134.641 96.1226 134.893 95.5347 cv
134.905 95.4868 134.941 95.4624 135.001 95.4624 cv
135.109 95.4624 li
135.133 95.4624 135.169 95.4868 135.193 95.5103 cv
135.217 95.5347 135.229 95.5708 135.229 95.5942 cv
135.229 95.6187 135.217 95.6304 135.217 95.6431 cv
133.981 98.5347 li
133.958 98.5825 133.933 98.6069 133.885 98.6069 cv
127.213 98.6069 li
127.213 98.6069 li
cp
ef
136.05 100.806 mo
136.05 100.722 136.058 100.647 136.075 100.571 cv
136.68 98.1606 li
135.798 98.1606 li
135.739 98.1606 135.714 98.1265 135.714 98.0513 cv
135.731 97.9331 135.773 97.8667 135.823 97.8667 cv
136.755 97.8667 li
137.091 96.4966 li
137.108 96.4302 137.15 96.3628 137.217 96.312 cv
137.285 96.2622 137.36 96.228 137.445 96.228 cv
137.511 96.228 137.571 96.2534 137.621 96.2954 cv
137.671 96.3374 137.697 96.396 137.697 96.4634 cv
137.697 96.48 137.688 96.4966 137.688 96.5054 cv
137.688 96.5142 137.688 96.522 137.688 96.5308 cv
137.352 97.8667 li
138.217 97.8667 li
138.268 97.8667 138.301 97.9087 138.301 97.9751 cv
138.301 97.9927 138.292 98.0093 138.285 98.0425 cv
138.276 98.0767 138.268 98.1099 138.25 98.1265 cv
138.234 98.1519 138.217 98.1606 138.192 98.1606 cv
137.276 98.1606 li
136.671 100.587 li
136.629 100.748 136.613 100.881 136.613 101 cv
136.613 101.243 136.688 101.361 136.856 101.361 cv
137.1 101.361 137.319 101.251 137.511 101.016 cv
137.697 100.781 137.847 100.529 137.949 100.251 cv
137.965 100.218 137.991 100.202 138.015 100.202 cv
138.117 100.202 li
138.133 100.202 138.15 100.209 138.167 100.227 cv
138.183 100.244 138.192 100.26 138.192 100.277 cv
138.192 100.293 138.183 100.302 138.183 100.302 cv
138.057 100.638 137.881 100.941 137.646 101.193 cv
137.411 101.445 137.142 101.571 136.839 101.571 cv
136.613 101.571 136.428 101.495 136.277 101.361 cv
136.125 101.218 136.05 101.033 136.05 100.806 cv
136.05 100.806 li
cp
ef
140.354 101.361 mo
140.606 101.361 140.833 101.277 141.035 101.109 cv
141.237 100.941 141.413 100.722 141.547 100.461 cv
141.681 100.209 141.783 99.9321 141.849 99.647 cv
141.917 99.3618 141.958 99.1011 141.958 98.8657 cv
141.958 98.6304 141.891 98.4204 141.774 98.2524 cv
141.657 98.0845 141.471 97.9927 141.237 97.9927 cv
140.909 97.9927 140.624 98.1353 140.379 98.4126 cv
140.127 98.6978 139.943 99.0337 139.817 99.4204 cv
139.691 99.8071 139.632 100.167 139.632 100.487 cv
139.632 100.731 139.691 100.941 139.817 101.109 cv
139.943 101.277 140.12 101.361 140.354 101.361 cv
140.354 101.361 li
cp
140.337 101.571 mo
140.069 101.571 139.833 101.503 139.632 101.386 cv
139.422 101.268 139.262 101.1 139.153 100.881 cv
139.036 100.671 138.985 100.428 138.985 100.16 cv
138.985 99.7817 139.086 99.4038 139.304 99.0337 cv
139.514 98.6646 139.792 98.3618 140.144 98.1265 cv
140.498 97.8911 140.867 97.7739 141.253 97.7739 cv
141.455 97.7739 141.639 97.8159 141.807 97.8833 cv
141.967 97.9507 142.11 98.0513 142.228 98.1772 cv
142.345 98.311 142.438 98.4624 142.504 98.6304 cv
142.572 98.8071 142.606 98.9917 142.606 99.1938 cv
142.606 99.4878 142.539 99.7729 142.42 100.059 cv
142.294 100.344 142.126 100.596 141.917 100.832 cv
141.699 101.067 141.455 101.243 141.177 101.377 cv
140.9 101.503 140.624 101.571 140.337 101.571 cv
ef
143.25 100.806 mo
143.25 100.722 143.258 100.647 143.275 100.571 cv
143.88 98.1606 li
142.998 98.1606 li
142.939 98.1606 142.914 98.1265 142.914 98.0513 cv
142.931 97.9331 142.973 97.8667 143.023 97.8667 cv
143.956 97.8667 li
144.292 96.4966 li
144.308 96.4302 144.35 96.3628 144.417 96.312 cv
144.485 96.2622 144.56 96.228 144.644 96.228 cv
144.711 96.228 144.77 96.2534 144.821 96.2954 cv
144.872 96.3374 144.896 96.396 144.896 96.4634 cv
144.896 96.48 144.888 96.4966 144.888 96.5054 cv
144.888 96.5142 144.888 96.522 144.888 96.5308 cv
144.552 97.8667 li
145.417 97.8667 li
145.467 97.8667 145.501 97.9087 145.501 97.9751 cv
145.501 97.9927 145.493 98.0093 145.485 98.0425 cv
145.476 98.0767 145.467 98.1099 145.451 98.1265 cv
145.434 98.1519 145.417 98.1606 145.392 98.1606 cv
144.476 98.1606 li
143.872 100.587 li
143.83 100.748 143.813 100.881 143.813 101 cv
143.813 101.243 143.888 101.361 144.056 101.361 cv
144.3 101.361 144.518 101.251 144.711 101.016 cv
144.896 100.781 145.047 100.529 145.148 100.251 cv
145.166 100.218 145.19 100.202 145.215 100.202 cv
145.316 100.202 li
145.333 100.202 145.35 100.209 145.367 100.227 cv
145.383 100.244 145.392 100.26 145.392 100.277 cv
145.392 100.293 145.383 100.302 145.383 100.302 cv
145.257 100.638 145.082 100.941 144.846 101.193 cv
144.611 101.445 144.342 101.571 144.04 101.571 cv
143.813 101.571 143.628 101.495 143.477 101.361 cv
143.326 101.218 143.25 101.033 143.25 100.806 cv
143.25 100.806 li
cp
ef
146.246 101.449 mo
146.246 101.426 146.246 101.392 146.268 101.37 cv
148.302 96.0063 li
146.268 90.6313 li
146.246 90.6089 146.246 90.5747 146.246 90.5522 cv
146.246 90.4946 146.256 90.438 146.302 90.3931 cv
146.348 90.3472 146.405 90.3247 146.473 90.3247 cv
146.564 90.3247 146.643 90.3696 146.689 90.4614 cv
148.756 95.9155 li
148.756 95.938 148.756 95.9487 148.756 95.9604 cv
148.756 95.9722 148.768 95.9829 148.768 96.0063 cv
148.768 96.0288 148.756 96.0396 148.756 96.0513 cv
148.756 96.063 148.756 96.0737 148.756 96.0854 cv
146.689 101.54 li
146.643 101.63 146.564 101.676 146.473 101.676 cv
146.405 101.676 146.359 101.653 146.314 101.608 cv
146.268 101.562 146.246 101.505 146.246 101.449 cv
146.246 101.449 li
cp
ef
152.017 101.571 mo
151.345 96.228 li
151.303 96.1108 151.093 96.0435 150.715 96.0435 cv
150.657 96.0435 150.631 96.0103 150.631 95.9341 cv
150.639 95.8755 150.657 95.8335 150.673 95.8003 cv
150.69 95.7661 150.723 95.7495 150.774 95.7495 cv
152.824 95.7495 li
152.849 95.7495 152.866 95.7661 152.882 95.7827 cv
152.899 95.8081 152.908 95.8335 152.908 95.8589 cv
152.882 95.9849 152.849 96.0435 152.798 96.0435 cv
152.362 96.0435 152.126 96.1187 152.101 96.27 cv
152.656 100.664 li
155.243 96.5308 li
155.293 96.4468 155.319 96.3706 155.319 96.312 cv
155.319 96.2114 155.268 96.144 155.184 96.1021 cv
155.091 96.0688 154.991 96.0435 154.874 96.0435 cv
154.814 96.0435 154.79 96.0103 154.79 95.9341 cv
154.797 95.8921 154.806 95.8589 154.814 95.8335 cv
154.823 95.8081 154.839 95.7915 154.856 95.7749 cv
154.874 95.7583 154.898 95.7495 154.932 95.7495 cv
156.553 95.7495 li
156.604 95.7495 156.628 95.7915 156.628 95.8589 cv
156.604 95.9849 156.57 96.0435 156.52 96.0435 cv
156.099 96.0435 155.763 96.228 155.529 96.5981 cv
155.511 96.6147 155.503 96.6147 155.503 96.6147 cv
152.404 101.571 li
152.362 101.629 152.311 101.663 152.244 101.663 cv
152.126 101.663 li
152.059 101.663 152.026 101.629 152.017 101.571 cv
152.017 101.571 li
cp
ef
1 lw
1 lc
49.5122 135.93 mo
45.9351 136.003 li
48.0229 133.098 li
71.2183 122.969 mo
62.6255 127.488 54.1978 131.833 45.9351 136.003 cv
0 0 0 1 cmyk
@
62.0718 117.84 mo
62.752 117.84 li
62.752 118.256 li
60.6641 118.256 li
60.6641 117.84 li
61.3521 117.84 li
61.3521 112.592 li
60.6641 112.592 li
60.6641 112.176 li
62.0718 112.176 li
62.0718 117.84 li
62.0718 117.84 li
cp
ef
64.7681 117.84 mo
65.4478 117.84 li
65.4478 118.256 li
63.3599 118.256 li
63.3599 117.84 li
64.0479 117.84 li
64.0479 114.52 li
63.3599 114.52 li
63.3599 114.104 li
64.7681 114.104 li
64.7681 117.84 li
64.7681 117.84 li
cp
63.8481 112.816 mo
63.8481 112.696 63.8882 112.592 63.9761 112.504 cv
64.064 112.417 64.168 112.368 64.2959 112.368 cv
64.4077 112.368 64.5117 112.417 64.6001 112.504 cv
64.688 112.592 64.7358 112.696 64.7358 112.816 cv
64.7358 112.944 64.688 113.048 64.6079 113.128 cv
64.52 113.216 64.416 113.256 64.2959 113.256 cv
64.168 113.256 64.064 113.216 63.9761 113.128 cv
63.8882 113.048 63.8481 112.944 63.8481 112.816 cv
ef
65.7998 118.256 mo
65.7998 117.84 li
66.4478 117.84 li
66.4478 114.52 li
65.7598 114.52 li
65.7598 114.104 li
67.168 114.104 li
67.168 114.84 li
67.2959 114.568 67.4722 114.352 67.6802 114.208 cv
67.8882 114.064 68.1357 113.992 68.4238 113.992 cv
68.8799 113.992 69.2158 114.128 69.4321 114.384 cv
69.6479 114.648 69.7598 115.056 69.7598 115.616 cv
69.7598 117.84 li
70.3999 117.84 li
70.3999 118.256 li
68.416 118.256 li
68.416 117.84 li
69.04 117.84 li
69.04 115.84 li
69.04 115.336 68.9761 114.992 68.8481 114.8 cv
68.7197 114.608 68.5039 114.512 68.1919 114.512 cv
67.856 114.512 67.6001 114.64 67.4238 114.88 cv
67.248 115.128 67.168 115.48 67.168 115.944 cv
67.168 117.84 li
67.792 117.84 li
67.792 118.256 li
65.7998 118.256 li
65.7998 118.256 li
cp
ef
74.2397 115.84 mo
74.2241 115.36 74.1201 114.992 73.9277 114.744 cv
73.7358 114.504 73.4722 114.376 73.1201 114.376 cv
72.7837 114.376 72.5278 114.504 72.3359 114.752 cv
72.144 115 72.0317 115.36 71.9917 115.84 cv
74.2397 115.84 li
74.2397 115.84 li
cp
75.0879 116.256 mo
71.9917 116.256 li
71.9917 116.289 li
71.9917 116.848 72.0957 117.272 72.3037 117.56 cv
72.5117 117.848 72.8237 117.984 73.2397 117.984 cv
73.5518 117.984 73.8081 117.904 74.0161 117.736 cv
74.2158 117.576 74.3599 117.328 74.4399 117 cv
75.0161 117 li
74.9038 117.457 74.688 117.8 74.3838 118.024 cv
74.0718 118.249 73.6641 118.36 73.168 118.36 cv
72.5601 118.36 72.0718 118.168 71.7041 117.768 cv
71.3359 117.368 71.1519 116.84 71.1519 116.176 cv
71.1519 115.52 71.3281 114.992 71.6958 114.592 cv
72.0562 114.192 72.5278 113.992 73.1201 113.992 cv
73.7441 113.992 74.2319 114.192 74.5679 114.576 cv
74.9038 114.96 75.0718 115.52 75.0879 116.256 cv
ef
79.2158 115.665 mo
79.2158 117.84 li
79.856 117.84 li
79.856 118.256 li
78.4961 118.256 li
78.4961 117.808 li
78.3359 118 78.1519 118.144 77.9438 118.232 cv
77.7358 118.312 77.4878 118.36 77.2158 118.36 cv
76.752 118.36 76.3838 118.24 76.1118 118 cv
75.8398 117.76 75.7119 117.424 75.7119 117.008 cv
75.7119 116.584 75.8638 116.256 76.1758 116.016 cv
76.48 115.776 76.9199 115.656 77.4878 115.656 cv
78.4961 115.656 li
78.4961 115.368 li
78.4961 115.056 78.3999 114.816 78.208 114.64 cv
78.0161 114.464 77.7441 114.376 77.3999 114.376 cv
77.1118 114.376 76.8882 114.448 76.7197 114.576 cv
76.5439 114.705 76.4399 114.896 76.3999 115.152 cv
76.0317 115.152 li
76.0317 114.312 li
76.2798 114.208 76.52 114.128 76.7598 114.072 cv
76.9917 114.024 77.2241 113.992 77.4478 113.992 cv
78.0239 113.992 78.4561 114.136 78.7598 114.424 cv
79.064 114.712 79.2158 115.121 79.2158 115.665 cv
79.2158 115.665 li
cp
78.4961 116.952 mo
78.4961 116.072 li
77.5679 116.072 li
77.208 116.072 76.9438 116.152 76.7681 116.304 cv
76.5918 116.464 76.5117 116.696 76.5117 117.008 cv
76.5117 117.296 76.6001 117.528 76.7759 117.696 cv
76.9521 117.873 77.1919 117.952 77.4961 117.952 cv
77.792 117.952 78.0317 117.864 78.2158 117.68 cv
78.3999 117.497 78.4961 117.256 78.4961 116.952 cv
ef
83.936 114.096 mo
83.936 115.136 li
83.52 115.136 li
83.5039 114.928 83.4478 114.776 83.3521 114.672 cv
83.248 114.576 83.0962 114.52 82.9038 114.52 cv
82.5518 114.52 82.2798 114.648 82.0879 114.888 cv
81.896 115.136 81.8081 115.488 81.8081 115.944 cv
81.8081 117.84 li
82.6401 117.84 li
82.6401 118.256 li
80.4399 118.256 li
80.4399 117.84 li
81.0879 117.84 li
81.0879 114.512 li
80.3999 114.512 li
80.3999 114.104 li
81.8081 114.104 li
81.8081 114.84 li
81.9438 114.552 82.1201 114.344 82.3438 114.2 cv
82.5679 114.064 82.8398 113.992 83.1602 113.992 cv
83.272 113.992 83.3999 114.008 83.5278 114.024 cv
83.6558 114.041 83.792 114.064 83.936 114.096 cv
83.936 114.096 li
cp
ef
87.04 118.024 mo
87.04 117.056 li
87.4561 117.056 li
87.4639 117.368 87.5601 117.6 87.7441 117.752 cv
87.9277 117.913 88.1997 117.984 88.5601 117.984 cv
88.8799 117.984 89.1279 117.928 89.2959 117.8 cv
89.4639 117.68 89.5518 117.504 89.5518 117.272 cv
89.5518 117.096 89.4878 116.944 89.3677 116.833 cv
89.2397 116.72 88.9839 116.6 88.584 116.472 cv
88.064 116.296 li
87.7041 116.184 87.4478 116.041 87.2881 115.864 cv
87.1279 115.696 87.0479 115.48 87.0479 115.208 cv
87.0479 114.833 87.1841 114.537 87.4639 114.32 cv
87.7441 114.104 88.1279 113.992 88.624 113.992 cv
88.8398 113.992 89.0718 114.024 89.312 114.081 cv
89.5518 114.136 89.8081 114.216 90.064 114.328 cv
90.064 115.232 li
89.6479 115.232 li
89.6318 114.968 89.5439 114.76 89.3677 114.608 cv
89.1919 114.457 88.9521 114.376 88.6479 114.376 cv
88.3438 114.376 88.1118 114.432 87.96 114.537 cv
87.7998 114.648 87.728 114.808 87.728 115.016 cv
87.728 115.192 87.7837 115.336 87.9038 115.44 cv
88.0161 115.544 88.2559 115.648 88.6079 115.76 cv
89.1758 115.936 li
89.5679 116.064 89.8481 116.216 90.0239 116.4 cv
90.1997 116.584 90.2881 116.816 90.2881 117.104 cv
90.2881 117.504 90.1357 117.808 89.832 118.032 cv
89.5278 118.256 89.1201 118.36 88.5918 118.36 cv
88.3198 118.36 88.064 118.328 87.8081 118.28 cv
87.5518 118.232 87.2959 118.144 87.04 118.024 cv
87.04 118.024 li
cp
ef
91.5361 114.52 mo
90.9038 114.52 li
90.9038 114.104 li
91.5361 114.104 li
91.5361 112.816 li
92.2559 112.816 li
92.2559 114.104 li
93.6079 114.104 li
93.6079 114.52 li
92.2559 114.52 li
92.2559 117.16 li
92.2559 117.512 92.2881 117.744 92.3599 117.84 cv
92.4238 117.936 92.5518 117.984 92.7358 117.984 cv
92.9199 117.984 93.0562 117.928 93.144 117.816 cv
93.2241 117.705 93.272 117.528 93.2798 117.28 cv
93.8237 117.28 li
93.7998 117.665 93.6958 117.936 93.5117 118.104 cv
93.3281 118.272 93.0479 118.36 92.6719 118.36 cv
92.2559 118.36 91.96 118.264 91.792 118.088 cv
91.6157 117.913 91.5361 117.6 91.5361 117.16 cv
91.5361 114.52 li
91.5361 114.52 li
cp
ef
97.6958 115.665 mo
97.6958 117.84 li
98.3354 117.84 li
98.3354 118.256 li
96.9761 118.256 li
96.9761 117.808 li
96.8159 118 96.6318 118.144 96.4238 118.232 cv
96.2158 118.312 95.9678 118.36 95.6958 118.36 cv
95.2319 118.36 94.8638 118.24 94.5918 118 cv
94.3198 117.76 94.1919 117.424 94.1919 117.008 cv
94.1919 116.584 94.3438 116.256 94.6558 116.016 cv
94.96 115.776 95.3999 115.656 95.9678 115.656 cv
96.9761 115.656 li
96.9761 115.368 li
96.9761 115.056 96.8799 114.816 96.688 114.64 cv
96.4961 114.464 96.2241 114.376 95.8799 114.376 cv
95.5918 114.376 95.3677 114.448 95.1997 114.576 cv
95.0239 114.705 94.9199 114.896 94.8799 115.152 cv
94.5117 115.152 li
94.5117 114.312 li
94.7598 114.208 95 114.128 95.2397 114.072 cv
95.4722 114.024 95.7041 113.992 95.9277 113.992 cv
96.5039 113.992 96.936 114.136 97.2397 114.424 cv
97.5444 114.712 97.6958 115.121 97.6958 115.665 cv
97.6958 115.665 li
cp
96.9761 116.952 mo
96.9761 116.072 li
96.0479 116.072 li
95.688 116.072 95.4238 116.152 95.248 116.304 cv
95.0718 116.464 94.9917 116.696 94.9917 117.008 cv
94.9917 117.296 95.0801 117.528 95.2559 117.696 cv
95.4321 117.873 95.6719 117.952 95.9761 117.952 cv
96.272 117.952 96.5117 117.864 96.6958 117.68 cv
96.8799 117.497 96.9761 117.256 96.9761 116.952 cv
ef
102.072 115.976 mo
102.072 115.48 101.976 115.104 101.784 114.84 cv
101.592 114.576 101.312 114.44 100.953 114.44 cv
100.583 114.44 100.304 114.592 100.112 114.88 cv
99.9194 115.168 99.8315 115.6 99.8315 116.176 cv
99.8315 116.752 99.9194 117.192 100.112 117.48 cv
100.304 117.776 100.583 117.92 100.953 117.92 cv
101.312 117.92 101.592 117.792 101.784 117.528 cv
101.976 117.272 102.072 116.888 102.072 116.384 cv
102.072 115.976 li
102.072 115.976 li
cp
102.792 114.52 mo
102.792 118.168 li
102.792 118.76 102.624 119.216 102.296 119.537 cv
101.968 119.856 101.504 120.024 100.896 120.024 cv
100.625 120.024 100.36 120 100.112 119.952 cv
99.856 119.904 99.6157 119.824 99.3921 119.728 cv
99.3921 118.856 li
99.7681 118.856 li
99.8159 119.128 99.9194 119.32 100.096 119.448 cv
100.272 119.576 100.52 119.64 100.848 119.64 cv
101.264 119.64 101.576 119.52 101.776 119.28 cv
101.968 119.041 102.072 118.665 102.072 118.168 cv
102.072 117.608 li
101.928 117.873 101.751 118.064 101.536 118.184 cv
101.312 118.296 101.048 118.36 100.728 118.36 cv
100.216 118.36 99.7925 118.16 99.4722 117.76 cv
99.1519 117.36 98.9917 116.833 98.9917 116.176 cv
98.9917 115.528 99.1519 115 99.4722 114.6 cv
99.7925 114.2 100.216 113.992 100.728 113.992 cv
101.048 113.992 101.312 114.056 101.536 114.176 cv
101.751 114.304 101.928 114.497 102.072 114.752 cv
102.072 114.104 li
103.48 114.104 li
103.48 114.52 li
102.792 114.52 li
ef
107.36 115.84 mo
107.344 115.36 107.24 114.992 107.048 114.744 cv
106.856 114.504 106.592 114.376 106.24 114.376 cv
105.904 114.376 105.648 114.504 105.456 114.752 cv
105.264 115 105.152 115.36 105.112 115.84 cv
107.36 115.84 li
107.36 115.84 li
cp
108.208 116.256 mo
105.112 116.256 li
105.112 116.289 li
105.112 116.848 105.216 117.272 105.424 117.56 cv
105.632 117.848 105.944 117.984 106.36 117.984 cv
106.672 117.984 106.928 117.904 107.136 117.736 cv
107.335 117.576 107.48 117.328 107.56 117 cv
108.136 117 li
108.024 117.457 107.808 117.8 107.504 118.024 cv
107.192 118.249 106.784 118.36 106.288 118.36 cv
105.68 118.36 105.192 118.168 104.824 117.768 cv
104.456 117.368 104.272 116.84 104.272 116.176 cv
104.272 115.52 104.448 114.992 104.816 114.592 cv
105.176 114.192 105.648 113.992 106.24 113.992 cv
106.864 113.992 107.352 114.192 107.688 114.576 cv
108.024 114.96 108.192 115.52 108.208 116.256 cv
ef
115.219 50.3101 mo
112.958 47.5371 li
116.534 47.3931 li
133.481 56.5571 mo
126.47 53.397 119.63 50.3901 112.958 47.5371 cv
@
118.176 61.7202 mo
117.544 61.7202 li
117.544 61.3042 li
118.176 61.3042 li
118.176 60.0161 li
118.896 60.0161 li
118.896 61.3042 li
120.248 61.3042 li
120.248 61.7202 li
118.896 61.7202 li
118.896 64.3599 li
118.896 64.7119 118.928 64.9443 119 65.04 cv
119.064 65.1362 119.192 65.1841 119.375 65.1841 cv
119.56 65.1841 119.696 65.1279 119.784 65.0161 cv
119.864 64.9043 119.912 64.728 119.919 64.48 cv
120.464 64.48 li
120.44 64.8643 120.335 65.1362 120.152 65.3042 cv
119.968 65.4722 119.688 65.5601 119.312 65.5601 cv
118.896 65.5601 118.6 65.4644 118.432 65.2881 cv
118.256 65.1123 118.176 64.8003 118.176 64.3599 cv
118.176 61.7202 li
118.176 61.7202 li
cp
ef
123.264 61.3042 mo
124.608 61.3042 li
124.608 65.04 li
125.288 65.04 li
125.288 65.4561 li
123.888 65.4561 li
123.888 64.7202 li
123.751 65 123.576 65.208 123.368 65.3521 cv
123.16 65.4883 122.912 65.5601 122.64 65.5601 cv
122.176 65.5601 121.832 65.4321 121.616 65.1763 cv
121.4 64.9199 121.296 64.5039 121.296 63.9443 cv
121.296 61.7202 li
120.648 61.7202 li
120.648 61.3042 li
122.016 61.3042 li
122.016 63.7202 li
122.016 64.2319 122.072 64.5762 122.2 64.7603 cv
122.328 64.9521 122.544 65.04 122.864 65.04 cv
123.2 65.04 123.448 64.9199 123.624 64.6724 cv
123.8 64.4321 123.888 64.0723 123.888 63.6079 cv
123.888 61.7202 li
123.264 61.7202 li
123.264 61.3042 li
123.264 61.3042 li
cp
ef
129.536 61.2959 mo
129.536 62.3359 li
129.12 62.3359 li
129.104 62.1279 129.048 61.9761 128.952 61.8721 cv
128.848 61.7759 128.696 61.7202 128.504 61.7202 cv
128.152 61.7202 127.88 61.8481 127.688 62.0884 cv
127.496 62.3359 127.408 62.688 127.408 63.144 cv
127.408 65.04 li
128.24 65.04 li
128.24 65.4561 li
126.04 65.4561 li
126.04 65.04 li
126.688 65.04 li
126.688 61.7119 li
126 61.7119 li
126 61.3042 li
127.408 61.3042 li
127.408 62.04 li
127.544 61.752 127.72 61.5439 127.944 61.3999 cv
128.167 61.2642 128.44 61.1919 128.76 61.1919 cv
128.872 61.1919 129 61.208 129.128 61.2241 cv
129.256 61.2402 129.392 61.2642 129.536 61.2959 cv
129.536 61.2959 li
cp
ef
131.192 63.584 mo
131.192 64.0884 131.288 64.4722 131.48 64.728 cv
131.672 64.9922 131.944 65.1201 132.312 65.1201 cv
132.68 65.1201 132.952 64.9761 133.144 64.6802 cv
133.335 64.3921 133.432 63.9521 133.432 63.376 cv
133.432 62.8003 133.335 62.3682 133.144 62.0801 cv
132.952 61.792 132.68 61.6401 132.312 61.6401 cv
131.944 61.6401 131.672 61.7759 131.48 62.04 cv
131.288 62.3042 131.192 62.6802 131.192 63.1763 cv
131.192 63.584 li
131.192 63.584 li
cp
130.472 65.04 mo
130.472 59.792 li
129.784 59.792 li
129.784 59.376 li
131.192 59.376 li
131.192 61.9521 li
131.328 61.6963 131.504 61.5039 131.728 61.376 cv
131.944 61.2563 132.216 61.1919 132.536 61.1919 cv
133.048 61.1919 133.464 61.3999 133.784 61.8003 cv
134.104 62.2002 134.272 62.728 134.272 63.376 cv
134.272 64.0322 134.104 64.5601 133.784 64.96 cv
133.464 65.3599 133.048 65.5601 132.536 65.5601 cv
132.216 65.5601 131.944 65.4961 131.728 65.3843 cv
131.504 65.2642 131.328 65.0723 131.192 64.8081 cv
131.192 65.4561 li
129.784 65.4561 li
129.784 65.04 li
130.472 65.04 li
ef
137.424 61.3042 mo
138.768 61.3042 li
138.768 65.04 li
139.448 65.04 li
139.448 65.4561 li
138.048 65.4561 li
138.048 64.7202 li
137.912 65 137.736 65.208 137.528 65.3521 cv
137.32 65.4883 137.072 65.5601 136.8 65.5601 cv
136.335 65.5601 135.992 65.4321 135.776 65.1763 cv
135.56 64.9199 135.456 64.5039 135.456 63.9443 cv
135.456 61.7202 li
134.808 61.7202 li
134.808 61.3042 li
136.176 61.3042 li
136.176 63.7202 li
136.176 64.2319 136.232 64.5762 136.36 64.7603 cv
136.488 64.9521 136.704 65.04 137.024 65.04 cv
137.36 65.04 137.608 64.9199 137.784 64.6724 cv
137.959 64.4321 138.048 64.0723 138.048 63.6079 cv
138.048 61.7202 li
137.424 61.7202 li
137.424 61.3042 li
137.424 61.3042 li
cp
ef
141.512 65.04 mo
142.192 65.04 li
142.192 65.4561 li
140.104 65.4561 li
140.104 65.04 li
140.792 65.04 li
140.792 59.792 li
140.104 59.792 li
140.104 59.376 li
141.512 59.376 li
141.512 65.04 li
141.512 65.04 li
cp
ef
145.76 63.04 mo
145.744 62.5601 145.64 62.1919 145.448 61.9443 cv
145.256 61.7041 144.992 61.5762 144.64 61.5762 cv
144.304 61.5762 144.048 61.7041 143.856 61.9521 cv
143.664 62.2002 143.552 62.5601 143.512 63.04 cv
145.76 63.04 li
145.76 63.04 li
cp
146.608 63.4561 mo
143.512 63.4561 li
143.512 63.4883 li
143.512 64.0483 143.616 64.4722 143.824 64.7603 cv
144.032 65.0483 144.344 65.1841 144.76 65.1841 cv
145.072 65.1841 145.328 65.104 145.536 64.936 cv
145.736 64.7759 145.88 64.5283 145.959 64.2002 cv
146.536 64.2002 li
146.424 64.6563 146.208 65 145.904 65.2241 cv
145.592 65.4482 145.184 65.5601 144.688 65.5601 cv
144.08 65.5601 143.592 65.3682 143.224 64.9683 cv
142.856 64.5679 142.672 64.04 142.672 63.376 cv
142.672 62.7202 142.848 62.1919 143.216 61.792 cv
143.576 61.3921 144.048 61.1919 144.64 61.1919 cv
145.264 61.1919 145.751 61.3921 146.088 61.7759 cv
146.424 62.1602 146.592 62.7202 146.608 63.4561 cv
ef
147.4 65.4561 mo
147.4 65.04 li
148.048 65.04 li
148.048 61.7202 li
147.36 61.7202 li
147.36 61.3042 li
148.768 61.3042 li
148.768 62.04 li
148.896 61.7681 149.072 61.5522 149.28 61.4082 cv
149.488 61.2642 149.736 61.1919 150.024 61.1919 cv
150.48 61.1919 150.816 61.3281 151.032 61.584 cv
151.248 61.8481 151.36 62.2563 151.36 62.8159 cv
151.36 65.04 li
152 65.04 li
152 65.4561 li
150.016 65.4561 li
150.016 65.04 li
150.64 65.04 li
150.64 63.04 li
150.64 62.5361 150.576 62.1919 150.448 62 cv
150.32 61.8081 150.104 61.7119 149.792 61.7119 cv
149.456 61.7119 149.2 61.8403 149.024 62.0801 cv
148.848 62.3281 148.768 62.6802 148.768 63.144 cv
148.768 65.04 li
149.392 65.04 li
149.392 65.4561 li
147.4 65.4561 li
147.4 65.4561 li
cp
ef
153.216 61.7202 mo
152.583 61.7202 li
152.583 61.3042 li
153.216 61.3042 li
153.216 60.0161 li
153.936 60.0161 li
153.936 61.3042 li
155.288 61.3042 li
155.288 61.7202 li
153.936 61.7202 li
153.936 64.3599 li
153.936 64.7119 153.968 64.9443 154.04 65.04 cv
154.104 65.1362 154.232 65.1841 154.416 65.1841 cv
154.6 65.1841 154.736 65.1279 154.824 65.0161 cv
154.904 64.9043 154.952 64.728 154.959 64.48 cv
155.504 64.48 li
155.48 64.8643 155.375 65.1362 155.192 65.3042 cv
155.008 65.4722 154.728 65.5601 154.352 65.5601 cv
153.936 65.5601 153.64 65.4644 153.472 65.2881 cv
153.296 65.1123 153.216 64.8003 153.216 64.3599 cv
153.216 61.7202 li
153.216 61.7202 li
cp
ef
158.56 65.2241 mo
158.56 64.2563 li
158.976 64.2563 li
158.984 64.5679 159.08 64.8003 159.264 64.9521 cv
159.448 65.1123 159.72 65.1841 160.08 65.1841 cv
160.4 65.1841 160.648 65.1279 160.816 65 cv
160.984 64.8804 161.072 64.7041 161.072 64.4722 cv
161.072 64.2959 161.008 64.144 160.888 64.0322 cv
160.76 63.9199 160.504 63.8003 160.104 63.6724 cv
159.583 63.4961 li
159.224 63.3843 158.968 63.2402 158.808 63.064 cv
158.648 62.896 158.568 62.6802 158.568 62.4082 cv
158.568 62.0322 158.704 61.7363 158.984 61.52 cv
159.264 61.3042 159.648 61.1919 160.144 61.1919 cv
160.36 61.1919 160.592 61.2241 160.832 61.2803 cv
161.072 61.3359 161.328 61.416 161.583 61.5283 cv
161.583 62.4321 li
161.167 62.4321 li
161.152 62.168 161.064 61.96 160.888 61.8081 cv
160.712 61.6563 160.472 61.5762 160.167 61.5762 cv
159.864 61.5762 159.632 61.6323 159.48 61.7363 cv
159.32 61.8481 159.248 62.0083 159.248 62.2163 cv
159.248 62.3921 159.304 62.5361 159.424 62.6401 cv
159.536 62.7441 159.776 62.8481 160.128 62.96 cv
160.696 63.1362 li
161.088 63.2642 161.368 63.416 161.544 63.6001 cv
161.72 63.7842 161.808 64.0161 161.808 64.3042 cv
161.808 64.7041 161.656 65.0083 161.352 65.2319 cv
161.048 65.4561 160.64 65.5601 160.112 65.5601 cv
159.84 65.5601 159.583 65.5283 159.328 65.48 cv
159.072 65.4321 158.816 65.3442 158.56 65.2241 cv
158.56 65.2241 li
cp
ef
163.056 61.7202 mo
162.424 61.7202 li
162.424 61.3042 li
163.056 61.3042 li
163.056 60.0161 li
163.776 60.0161 li
163.776 61.3042 li
165.128 61.3042 li
165.128 61.7202 li
163.776 61.7202 li
163.776 64.3599 li
163.776 64.7119 163.808 64.9443 163.88 65.04 cv
163.944 65.1362 164.072 65.1841 164.256 65.1841 cv
164.44 65.1841 164.576 65.1279 164.664 65.0161 cv
164.744 64.9043 164.792 64.728 164.8 64.48 cv
165.344 64.48 li
165.32 64.8643 165.216 65.1362 165.032 65.3042 cv
164.848 65.4722 164.568 65.5601 164.192 65.5601 cv
163.776 65.5601 163.48 65.4644 163.312 65.2881 cv
163.136 65.1123 163.056 64.8003 163.056 64.3599 cv
163.056 61.7202 li
163.056 61.7202 li
cp
ef
169.216 62.8643 mo
169.216 65.04 li
169.856 65.04 li
169.856 65.4561 li
168.496 65.4561 li
168.496 65.0083 li
168.335 65.2002 168.152 65.3442 167.944 65.4321 cv
167.736 65.5122 167.488 65.5601 167.216 65.5601 cv
166.751 65.5601 166.384 65.4399 166.112 65.2002 cv
165.84 64.96 165.712 64.624 165.712 64.208 cv
165.712 63.7842 165.864 63.4561 166.176 63.2163 cv
166.48 62.9761 166.919 62.856 167.488 62.856 cv
168.496 62.856 li
168.496 62.5679 li
168.496 62.2563 168.4 62.0161 168.208 61.8403 cv
168.016 61.6641 167.744 61.5762 167.4 61.5762 cv
167.112 61.5762 166.888 61.6479 166.72 61.7759 cv
166.544 61.9043 166.44 62.0962 166.4 62.3521 cv
166.032 62.3521 li
166.032 61.5122 li
166.28 61.4082 166.52 61.3281 166.76 61.272 cv
166.992 61.2241 167.224 61.1919 167.448 61.1919 cv
168.024 61.1919 168.456 61.3359 168.76 61.624 cv
169.064 61.9121 169.216 62.3203 169.216 62.8643 cv
169.216 62.8643 li
cp
168.496 64.1523 mo
168.496 63.272 li
167.568 63.272 li
167.208 63.272 166.944 63.3521 166.768 63.5039 cv
166.592 63.6641 166.512 63.896 166.512 64.208 cv
166.512 64.4961 166.6 64.728 166.776 64.896 cv
166.952 65.0723 167.192 65.1523 167.496 65.1523 cv
167.792 65.1523 168.032 65.064 168.216 64.8804 cv
168.4 64.6963 168.496 64.4561 168.496 64.1523 cv
ef
173.592 63.1763 mo
173.592 62.6802 173.496 62.3042 173.304 62.04 cv
173.112 61.7759 172.832 61.6401 172.472 61.6401 cv
172.104 61.6401 171.824 61.792 171.632 62.0801 cv
171.44 62.3682 171.352 62.8003 171.352 63.376 cv
171.352 63.9521 171.44 64.3921 171.632 64.6802 cv
171.824 64.9761 172.104 65.1201 172.472 65.1201 cv
172.832 65.1201 173.112 64.9922 173.304 64.728 cv
173.496 64.4722 173.592 64.0884 173.592 63.584 cv
173.592 63.1763 li
173.592 63.1763 li
cp
174.312 61.7202 mo
174.312 65.3682 li
174.312 65.96 174.144 66.416 173.816 66.7363 cv
173.488 67.0562 173.024 67.2241 172.416 67.2241 cv
172.144 67.2241 171.88 67.2002 171.632 67.1523 cv
171.375 67.104 171.136 67.0239 170.912 66.9282 cv
170.912 66.0562 li
171.288 66.0562 li
171.335 66.3281 171.44 66.52 171.616 66.6479 cv
171.792 66.7759 172.04 66.8403 172.368 66.8403 cv
172.784 66.8403 173.096 66.7202 173.296 66.48 cv
173.488 66.2402 173.592 65.8643 173.592 65.3682 cv
173.592 64.8081 li
173.448 65.0723 173.272 65.2642 173.056 65.3843 cv
172.832 65.4961 172.568 65.5601 172.248 65.5601 cv
171.736 65.5601 171.312 65.3599 170.992 64.96 cv
170.672 64.5601 170.512 64.0322 170.512 63.376 cv
170.512 62.728 170.672 62.2002 170.992 61.8003 cv
171.312 61.3999 171.736 61.1919 172.248 61.1919 cv
172.568 61.1919 172.832 61.2563 173.056 61.376 cv
173.272 61.5039 173.448 61.6963 173.592 61.9521 cv
173.592 61.3042 li
175 61.3042 li
175 61.7202 li
174.312 61.7202 li
ef
178.64 63.04 mo
178.624 62.5601 178.52 62.1919 178.328 61.9443 cv
178.136 61.7041 177.872 61.5762 177.52 61.5762 cv
177.184 61.5762 176.928 61.7041 176.736 61.9521 cv
176.544 62.2002 176.432 62.5601 176.392 63.04 cv
178.64 63.04 li
178.64 63.04 li
cp
179.488 63.4561 mo
176.392 63.4561 li
176.392 63.4883 li
176.392 64.0483 176.496 64.4722 176.704 64.7603 cv
176.912 65.0483 177.224 65.1841 177.64 65.1841 cv
177.952 65.1841 178.208 65.104 178.416 64.936 cv
178.616 64.7759 178.76 64.5283 178.84 64.2002 cv
179.416 64.2002 li
179.304 64.6563 179.088 65 178.784 65.2241 cv
178.472 65.4482 178.064 65.5601 177.568 65.5601 cv
176.959 65.5601 176.472 65.3682 176.104 64.9683 cv
175.736 64.5679 175.552 64.04 175.552 63.376 cv
175.552 62.7202 175.728 62.1919 176.096 61.792 cv
176.456 61.3921 176.928 61.1919 177.52 61.1919 cv
178.144 61.1919 178.632 61.3921 178.968 61.7759 cv
179.304 62.1602 179.472 62.7202 179.488 63.4561 cv
ef
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.0.2%%For: (Troy Carter) ()%%Title: (time_evolution.eps)%%CreationDate: 6/4/12 10:37 AM%%Canvassize: 16383%AI9_DataStream%Gb"-6G?Z:Po-eq"JA6^GR#Ki]O<)GO8-99/$lJJACh&r_hu3Ln55VH[kZ5/S3UAbQmW3$527?[?PtI=<P-WbMqn)OLBY>/8s'8@B%E`uMmMI`Sq920!(]8a.CcW;>=.14SIfrAXL<?nEA)H9dY\o&qc::^?$rE4(3:V6#WHEUCb2r!0FC:a%]Xd))M]ton9]%F)IJ#'B(%4oMY>B\'6OmUrXtg;ZH^Gq=D'RP2_=T25.JC0J#^/63ia>F.Kd"PUc^[!8eIh#)W#T0f=GQb?1>gqsBZ,Pcdpn+Qj/!'phQ8k1fF%,%R`g.;.q/,/[d*ZjfYS?XSg"I'G!Nd*hO#cK]>-?GB_12qkD2"U7Z0h>+-p5G6sM%?R5TEnY,T?*l<,0C#1#B!#F<30_XW%\FO4%FM>)MJ.GOn759dlD;0A_7CK:f"jLbmR8tmq-Q<8jm391A=/5beeb!amp/:?We/#Xoo>^e1Y%17j,l1*)S:*?^h9/io&&=AQS)X.?%rDIPH7'ZKebo1%d,6,dQ-`q>blb:pH5U,UX2kjnAD=JZTmLF#^f=O2sRf.KZWOFM6<s6Y\78e.1N$>B+;Ha5dR7c2aD>6Ho0[d80%3PET'-Z'im_M3:G-;<bT9_Cudn^_BU1AK)6SSmK,SUTe>U*!nO3D9/)k5S@^@G(O-]u=@aH7U)Im7:.CkaZg8nI?huW\k?#$FD<N%lMsQiaJDn>okQP=0N=F)s/(^(pQ7'Sp]iVWrsSuoD&Y]4-!mSq"i2QM<E4FHWq:#5MJptQ$j18G"qCLK>)%U9%&7"fD;$o!Z#-QE%FCaFd[Z.\2)f+Ckr5;d8'%SOtnBFi;T9MrMVcq';eZ*'9gXRc;Y?'mL'OhD&Kno@mTAl@<\I,VF5Htua#sY[1Nerg]5/Ruk-e?*G%i?sYT@tMFQA&;%>Kd4H1Cl./.[YuHJ:E2=m`DRZhp.;M\qo;l"0)WXKeLHmTq*E(NN[Y_mQLL*P8OlOLVm'+PB^Z3eT-IZprkho!%55`?bkR>m:dq<dBn1WA0naRKo=J>3Cq!\rHiTTM'j!TO#9CNU1iV;o+c6B(tMHALrp;gqJ+m8L8kD[8JZ&Z4?hDej*a=6`e3JECb%93^QM7;MCB=9h@:.2,4,DpqS4V`6m<`*/D>EI8HJoNhC53]O]MQ;]^)*Jul2"/Tm1_jjae[3=Uq;CF,9^>O')nP5dQ=Ju*q]HQ?`%7ekUalr]2?:0XXbe*$?FKq*01V.MdO'K<CQ.euU!fB%2P:+FGte`A?B-^XNUF`Y-<kmuZpBo$iA43JVemQ;U[*0^0+M[^.HLR7a.%gSJi2Z:+]N?Rce%p.nQL'DF0YL[#9I\UWkY<*%UbM>NY=1JR`#rCd/n(B&)Q]Pi`,.hq1\pFlJH/CNGD?huF@/XL1.qj7;_<9S8p%0E!7Ys/8'#\\h3(YOjdR7K:7"'WhML^T8ph$VPT\/=YaQKn$.7;m04:PQ&n#l3dNm<XYR\Y`;$,/P@"Jj.!D.I`(&>#JO95L90\J%[)Dsl[q/8bj1h8sefOO@D:!4nDma>G;d!9CgW&+1^QCIuP"m1`0T(>f(57G>%f`TggU&h@6<N_/($JNB!DR.%,!Mi?P,CaFaPSW&%nBE"j7BtK$'jFW/JrRMjBTZ!hba>,e)V/:LpbpPIPUWt(doQ*=OgICs5^LFNP[ZrO\)BYM[BU0t_'7Q7*tS^*%$cb3=c(!c5dCbI%Ki9l2?o"u%Hk44kYtqmZX<Jq$:3s^$Z8F$4G`.IIoMDVu]2^D5^+'&?!16>"Op]Nt7Q&+!R1!\8,N%aq9nGfa7O&J[)l+i#^LK\P%-$]OL-*<<dOAZ>(K^^LJ=c.4i:;Jih"9t@hL>NAh23%0e:?ta#dQ1Q3X&<W30RcG4*$;"ug7u[A6oYdV<LZ@L&?nl5UZ3k&%-*;o%IR#@u.J@a.YQ^5VgXq6MBhnEK*mPVefuA<S[ZLo!caHEZo<I;!Cl.nFI@E-_D4C6X,:l)sGa#O$kFD23ngEI#QU@bM5Udi$2oRi'%,grB#0sRgBGt1IY:lN:SlDEr8L#jXJX\hbhg4[e(8SCT@OBQ$CN&nV5;&Mb%KATpK\l8^*X!6V8IYu2s=G!/Ujp;Ml67[/<i*@'P%_/Y99@ZiJR(NKY\Y7l4?)/oAFiY%\P-H$[R'CeLF='!]-^i:+r]bP\,abUm.6hlZ2(r7/h)`E=.?Yg]^#+7sV7;'r)FN-SKfN\Jd%c_;tgF,B#R"TP6C"CVP*1FO\/I)\i<AqV/'c_Q'4*4di`N6sB-3M=$>cO&HEZc_I!O,1qfMFA_W1`%dEB=q=LfQ9ac\dP!-+EUAP%,I=0X$rql$OL(<j;[T?Fp8q=#Y''RT+L;??&D9Jqj03MD0Ha)4.MXB@"iB.#LC4]481>IP5MhQ6d((BB7AMKR&Rpa6cS8@0E^ccX%6-cdm9aBkJ]59>!VH%pA3(o';aWr]L'QDCTVD:N'&#>ccE>,=hhe&=.8RP.06mgOiqNj`U2Wk2M-6%)Z2*TS8i<N_^CpXP)(:A_X%@#%!RjeKX08%<P6Z"Ni)a35eKeM#u")'rsK$?Ak^3(]`IT5^@IZj-&$BlA\$aZQkK(24dlFtA/o&HRA3<(iUq4;L%YK%c`(O_K<'%;E_`gGT)&8_Cep"L8DHlTqg&UTb]g&cj,]QAZ8e6;ECLgLI7*(.oatQ*\s/OOG[$7dl'c(OmtCEfP3]@Ru,ftjrhkdP8GY.aXXd/%-tQiEZj21i1-]1]6Xce?:ZVVN[B^QU(X\hTN(^]mJD-Vd8S1ChbJTT>o]`#<PfqRZ_3V+N&u%1:kQfi]>>`PZRZ(G%<9?3fPprgI%$aPTD`Fd6Q3edD87,A.3+mN3,a\M5GY(pPj?O0+-a6;"cV5(rZW'htuLJNPA/9&qP%l:&1QnaTRI\]riJk":#B2D:MQ7+Yjjl'[6%fOqS"WZr5jrImEBBi"?H/4*+h_tbRDWC;4Ob2!.V;ktC/.1[iWk!"^42B-.gneU=hKjp&;1n73jHD%\MGt4U(jS5VAiEr=1X7Wmr%P\P+4K[M$aT(>03i:Vq3BW3QarQ7YM>d*..f;GC8,ddnk%6D6,CK:4tqjlL]Ua6_@+Fd';10qlq2TskWTsILB>V)S5aui=+e[[jp%LX5A:rC4&BDu3"0W4LOal^L46a6\,[PeTd-ZR0rlcBWM<Y4(]/,QiJ$;&?0a-9\Ed=lfVSRABFKs/-ROl%o:L>iq?/dZaLa"_p\.%)95nen1&#3#p>5n;BXP,cEXr3nu*LqTQn<#PK8=%1,1e:n%"PdqU`.*$09U"2`ZBbh\@@WFBf0:I$@OJGDS3BO]-WsH-]`)1[2^B%(=F_:bHU/KR56@@S//SSd<!q$!*s3b-iqJ)4[@GGF>,+S1->f`(PC0hcDao5OGX8:V8sLj>%)l1Y.ApQTEg+mC4/@!%R(>JS+a"L%Wm%A2q,sBaOQ#D:432arIP/G:^0P-42tr`N-,e[Oi%`8njS`#XRbA@<rg?i'\WY(n/X(6!K1=nP+mN]X4de]"'#2A^V0%r.^VHnj%3I_H,aJcdD7a#U3V8,1o<^LXDoFDNU3jDo9%it"rrm,_bcFc7Z$]DC6e1Y8*.<ERE?TdI\P.jM85c&n@A"s[)pZRT#ddPtcE-il(%/?tTkj?1k$U8;R&l`S%9#M2/ZH15i+MeP45;"X2_-HNek[49NpM/]7YHn3&[^1[jWUKiC+$<#!9TZf/[5":CQT/-d^#09^5PXmCP%;pX4>4$dmhEG7AmD2%h%iU8Sk8pBYM,$SUS9e?V>Zf9V73nNOoV\2`iHVJ^#M^l3W&GK-*\rmWY+7Mp[9U-V?bN(cOXZimN7>lb5%@%:_!CLSl3>7L-<*8cWE(h-F=V+L><ru\5'>7Y&bmTQ]&*,;-_EVhG8[%352j,7+Ie5#,^!5c[V>\Y@ZW[N-pbf\<f-liH5Q8uWU%l]>j@eRL+NgP&g*a<f'1jcE-j]*?E_K4P8c7X9r.7-a/9O,Lpab1t"dCcXbH6Rcp;\2d$X7%ed[=u7/6]gAHWZ(/8aC'1JS\Se=4%ol@[_]NE4,BB(>@Pm9;OlVjC@*']1:U?YVhKq-cWeB2K2ZpKFh.pQ9ZXVmXL\R+r,.':[&,SYHu>s4"pYVrX1'MM-lUfB4DeM<-8%OLVPeI7\X;L%`%V`N40j(?&(cHd%?R_IH0!:urhuc"k,d!,i+7MHib9a^TC#,tIS/3PTTkjO+(V^a2KsR8aC43rA6G00*f8@`t^$%>ts>$+Qeee(e8rPRMADJ2GJj0jEYK9\mA:e?S3ekgX0qm[k%;brg)TuV;i'GIaMV$9M)7MN?ZL\f:(ZH]<]oY8@X'frg31XP+$iH%N)>N1U_r^c^iNl?e.O=E4r0ErmW38u3.:ZrQsOk6qTI^PbW][p_#+PGm)f\[@9H9Xdihr)/NM7Qb-`kb?lUEC2m1b)g+2\@oPHd)%r#(joS9&DVb[r-In6[/ULE9+D'&ZaS4=Ro!'SVmmmOR)%k;FdRUI7bcL8185Hf?fJa;0Od*T+HhC'W=Uk(Scg:%?**aJ!e;(N*IF%XRR,3I@K96PnMs$nlaq6#MpZqR&dV_gsOc3CI'\%^i6DP8o'SW\'?Ac;tTj5AR7DF[MY8OHkcA#-ug/HiZnSd;?#_<iOtHL*/i7)%EJXTM\+Uf6fSQYJC,H^WL?-pW)gP:ScJRD4']W"0]8"2-/kR8_5P5JqKuE02m=dmo6K+bJ*jsqYG":Y7#2=:ZfKb-?`HSc=HGN=*%oNS<nM&S6tHop8#\(tl8d:^aKo&RI?s6e6nNTBioE>rXO>.EBBF\JB/O/L6@GdPq:Is:TiYO0heiMHKP:LA3ZcVQ3Ao(8jZgg<Uu%ZNBmUq0/T@cd`r)Kuf"Kc!%TJV@VWsnrs*5J%Js8D0J5#f4erqoiJi[mKh&u-+2;sqIcqbM/W6t=_lR!Bi=B+I+\3%T%!a1DVK&3%Jk#(^?3_$2?6N<r*CNj<*[U$KepgI3S+Y?*cY8mJoE%e2inHPE`f6tRFKt`!HV\"UgJ+SKmj"`Q<_Q,jrkG4h;t<9@UdYkPfFt=D%n#=\$s6Fu^g>P31_gcanV-:4YGjEpAmu?M'%K`4`4jdo[&D#a2:[MbhpZ^+i:i]b*p)D?&qYB$^If2(&28mLMU\+\A8>M^_D>UYl%aU7;(pKFIig?cRU8^2=S62_B@YUF!_<hb;O9qU?]qYoBsH7tOJBXRlh,!XMVWVKmDrG(67rr#/EIpDlPVjC?Xo>YDJL;Kr]l'%>W%ChK*`f/4s99?$'8d$LmC.DGa%If'X>p>O1:./H_CQI8:f?h[Ip"cBM0;Pa,T<1\uf[8]0tnA/He&fA2AN`]h^es^_h&-Dan;dsG=%q%@5ffDh$QaJ1_C:7W.@0R.NR9ZA54-dKNC-qT+iAmL_d,>+]_bl>S<TcmcO8E1+ZSteSgK?$+S%>9;I)UF5!>5)t+>?<Z#9'>s,%nN=1?#,ZW[f=EX"B?\[m/*XN\]aii,%!<"b=7u'oZ<2<WeoO_a!>7QaGL9les![56^RIq-bn[07J-2Ck(M#me)<QqM>,>EgY?DIC%8nb@)p!M`<qk[%qT:^R@eV%i>qq5dOKbaN!!I)obJtN'CCOWSs2X=Ooh#G"(].J-:22X(@"J>@9m02uA4ok.e!;oj_2JQ#^bW>%f%)h@]J%`A<A/?HC)T&1L3QS,1b5F2Zk_#igYT"b(-kV@E?8Cr?np1c#%Ob<Zm:Mf#6Gp11OHE2P7!]iR#l93!`p!uI0$8="1H`+\#%_r-308'(u0r8$\J5Q@k'oDAqC`t>;Dfm`q!^Vo03eS`q;I0eiZ#Ol6*$Z(&]"qW`%VZo_!Q2c9m'1_Rg;S`pgno'fs$'F9hHggVl%s2Qs(YM"1"s+L4n"$(:LGG"1H(]7W#-83I?BtX)qA&4CH4f?Ffc"H]Qo3XlP%/.M_Gcs'_hW$1Kfs#LO+rgQf@<(K5[!DS2kc"[a%Xo\J[BIlsH5+!:Ep")B%7ZSWp3aZ^4s#m+q*5LJTs,J094!3J>2.M.9CD8AaV>na3m,XDUKRakj%j&I%QqdFB*p?GhVE<U[YMT5Y%So4R.mrgBkdi3[#:7q)l(\Rh%e!67h^\6/j2YrAc,UY>KFe+$m=ij5Welm"L[C:JY[,&P5"2BuV)\khYC"NW,eB:nQ)$\.g_mKt+%ag?,D@AYUo\g2ZGg'6b<gWl#S4@FX`3TlqKcFa^T)nf"Qp@hFdqn\)ISQ/#%/eK!cX#D]cB=(Oaa_AB=5etK?Kt^5V5/D;8'#,mm%d(S&k#[gLld3<1DbA.Y?HH1ZYYS=\A>(Ncr36qZh^AZl+2Hocq+6GC_c!J0>rhp&uLfjJ`g$#6(gDD+/Dn9/&K9>^`,_8e1=1YeG%^YW8lX8^mmGLK?qB!(aMR3$IZ`nh?ZRd_kl7hj-.DGX,qS8%[sX>\i#mRa>Mlqjd`Qp<dMc'$dngt.Fc=`ae2VH[XLXJDj%X;)'o%%]f0X^;IPp<R9$JnC3H#lG8#g0Fb,Ni'<1"jc2P4<MZWKrida>(`lFZ",uWNI/[AdZG'$H:RdJ`-12elmT$C>ke2U>+k;rJ_07J*%9@Nqo_h.QB[Xl1"diP6?MfqU857Ao7orCQc607N[^XfSY^I9Pgpt#Z-\^u/,s0p_Gp0utO^N*Y1DRUJIR'mK<<Fms@:.k1k;^?)#%0U'a4+gJ;LQF&@.gq%?I-W^Uec/!QPnNZElY2BqkTp63QmYZXu8(B,@J*P<bP\b_qmF>]8#Vgu1&gW'@*VlC5[O"FCF@Aa[WBs5>%3g<4nE&!3I@f]/OZL>Do712O)JlJj8f*e^iAo)$6hnIg,nhQ^]/PSsZ.rIFtAs(Ll\g58/?O,*h5KMUbEJtMcJ.'EQQ5r]f?YKnV%<ZPtLf4f:EG9!>PmD[U4[+]/pa"0!0"7srTjOe:Q''QObH`u":\41FG04"A@\'o!.^2TH/o%:D+:elMIg<UjKlD3>$hA3kd$sZbZ%E_&-4Xg6.'@K+kUrMB&_R<Ho6],rkQK8f&p@knXS]UsAL_iR/ATEcSnJ?qup^KbS7]RldteU-`pOpGD$TI!!Z1V-[N\0r"u[aUdN%#KG;0I"""iDSN44Jb8$8hglZ&L/eh3mrrQL?De!6eFVQOZ&KR`iI;i")HqT-G@0VgK/B(C+1M-=`u\%Wa-G-FoHB[B\F0R0E"V9S%%u`(97ek,_cdRd9e`emYH?o>3gZM':VR6?NIXTJg+N6[ql<RK9E8WjDHb$$Y6Gk,m\4X+,=1u_ebUIjOY:oQMF<-#_SeTQ0TCrq?%gAe7J5O(Plr#fJXoDrn))gs>dPIs2J_-S(0JNZi7LV"mBlI9%JZMWX&21>6dB;\buYrOc9JB%TCaa%-`q9.Q=0)`-UPV0@pKjW8P%oB/>6:@AtHIjrcTI/_?4]'YmD_&UV]VUbS[69+*!gRZ9*S"N0eH\\l742(JEo$I,W99ah?mD"$)fbFiG3O.)[64'Y"//6h8F$#o4%TE;^H0n_suk#8D:MlG;Cp(>8CmF:"XNRhl,Y30[a%QH5kiH;^bh4Brh&tmdKY69!Cl0GnW!\Dse]XPNQ_p+"AH=20]0tbodHZ""J%:5nNG&+#:Y$Q]l/m\@0'0n!0q'50Ljj?b"-:%_V@!*JPaBpt]p+=<>OH;A@Z/#pFPHEZkiMSiu&e'/K4*$IsGV>%FVQ@r?::U4`p%MG$?IY+h@<f3^gd]qh;":7&S#!dA-2$bYoQO/XX\6k#>!GS%2OjQO#f?!5\1<ch>sM;g"r*+[csY_lO=jNqWCg&c*uW:E:8R1Wm3%.T+0TL`Lg?-EH"f]S(KgeQCEu]`]oS?"D0VYYpVA-"N6df<^t^#nX5b[@jaF2G1NhS'="!(lonq!AOXhfY60kkInr70^XK4lsV_&%pE%9s6s@=dr^p"B[1d*7@$M30K#b8%>h?'"id55/,&BrSed%PrnUX$loU_[ZreT06SPJePmt;PV.tTE:-I[1B%fTcHJ+gb:6/-r>%(D;`E4M%2sDgmUJPsT5/rA?sd7Zb#aCK:na!*4Ngo@N:?C?)_Pcb2.sh:K*FoFt3J<L&,I2R,:;W^8A5;d/_'oc-!;<rK/_Y+c&^%Mp#SUT7?GIUu7-Okl[&Srt'P7:Jmnm5f(tEao8Zg3hH[Y0<#URcr"Sdg<h6!UH3V0-j1ja/@eEb"5SfcIa)#,"9bP/]Oi'&irLN2%8Jh()HtX[bE*iFBIKWQUd:q2-6J5`u=a*4`ViC`-S#>rIC]1g4X#LZ5HuK$t[il;k8@93l]tDOe`;O=aC$2(q1bg&h.dhCo05-`9%ciT3R%#,Of`X,g@\F`g295eI7V)L-WdV?D;^$/"E/CpLSFt=FO[V<)pImo^eMP?0sNJWbNnKF#+J'Sf'64?7M]4-@=6'R31C@@qF%!TUldOkAUSd4;G&h]a=sCO%k.iCnp4:jij*_Y>X(lS(Q:3Y&)-`Ccq1YiUUiY3+gP0CS;;T.m68i&iHQJ1gtjN@B2a<#Hh/"Dg?g%`H-T$Xq\_YHAs:8dVB!I%<?PMf<#K[VOMkl9n^@6BS$X:NB^(tZ!8hGC+l*Dp@^&N>XuZM<gP`;hr`A<ePfes0-)VtD8#[Dr2+/n%5?:eI_%5]JH*F/`?1a':=*s+?GPZ-N<dp<O2P$bgd`.^FSlnm62_loZ\[,6nZaBP5Sln%e[56"p%=%OB24%JB?9QUc+'k3h/(0P(%jYq)>8b[P.[.$HK.D6r+Y5Fu1Sc%>DMjA)q\&RUuqTA8Ag\e$C0CDbQpT\$sA\6dCNMjX6kBMLR_!Z&C]B_\&eb6+g<U&Ar9'+gm%bsccMYjj7t(<dQ[7@b<6BRhfu\8GBk/71R,AQGlI/$nl<43(3$=B<Np5JH?LKuQV=Zd:?`E+fX=d'Vmjr)NqcmL!JAS+c9o+*TuL%//_>=F$E`,ju0-[^.Pq`ce;7)VKX-?k>"s%RCt'@@3#!Ph6l*>pTA3N89sTm,1XXG]U?H6[suWJ6SC+!1;Unc4)`sPdc,FF4g_qi%2Kpp_mR3.3[J&:!/$.3Tmeu2C\Z\pq(2IRC\,NefOTIUm0Q'\(3o-?E536^84'g21l:kXAS3el[A,WYe\%,]=[3*o_db;%9*n%#B%4ahI"XSY&t?:_QZc)jqs)CL*,:0%<r1G*b:1oO?PqYIiDg?G]5h,FY]#)lQoH'*8n\i7GMXaXP*V2H^k;lr2:VfSK2XOGY/3RTA@%L!?XO]un*R:4X[_.c+>,e\*VCSRSK)K;>=!C]3&M8oU]!h>L=(f<*f,E@e4dLNWIKIB_eui(f=`Mpl%QpQ=3E.dM94S*guk@@ch(%.4t?R\5R8'AneAmGoYK$<4/U$ZG(4q=ZuOW%-c9/cK^_0("2?kUJu);>e$?A=G1R9Ai=63lgL0kSaQE[Y!PW>]9::@3N_(b<'<o2%[?/Q)k-gV'f^7\6=EbiO3N&;dJ#A'Ka7l[aS!A9V85276]6-1=)AC/;>EfU^J!e'CmS/+6LH!O[@&GBsqJKuEWU)q=X0Wd.<peM%%FFO#X*Sfn1qJ]Q=DIil2^"@,e\XgUMGe6+'1+n$2F]t*6U^&uke&.I8MjMK'[@g8\_H]6?oKpTE2.(k"KQVSdrES#*L3-U%qRLHc%9;L$9ej%a?jbno@:B+!n*#:n&]ecJ]g@(l2:4^E^N\;=nX4cOp5Qj;6>X*sdg9,A=^P-fV,lOkcQ:[uF@t%atPc(\]5PB[im<4Ol%VHKfml@P(2QL)SJ8is.Lolo1ddCNH+XEMA/P(_XD%s3-'1&poC\_`'92nFH4ZeE,rAt=D'MnVrmYJ6r@8Z-frjGgh8'bG"UjnRF;%G.KFW$BJ8uVCD3:kcIh`jCkGqo9Emr;io,sT)LqJZG`Q%3jW!Nn;>*ZdY;oB$TlTDG%tQc2K!\^U!rt!YLAG.4F&<Fik2AlaSEjP%VnGt'TUft+*ZfW-3T0\YH^grmC%q@98URQ15;UGslcJnNdE'K)CdrjKlib)*/HF79lLhBZ>p+ls7`\M;>u]BN.eNOe>/&gS%_#Gl%4<5.*[p.;>fp3EIZlgC'*#RaN.N@li,TUHF>%)>NUm'uTZ`p?gdWt)PmsF?R0Y`pMo;h+LaP4IMd`(q-I+VA']$,Q`JtK2Y,iG$X%N6.Y%8uc1]l8#\3T6_@aTC,?RD_#%#:Cj:o1Nn=ZD".8*o[Bb'_VRJADPtbVYbuuHqs3!*hbt>$GG]K^kB/fGm5nNu\6MtMSo.2^%`hORFoW\d6aXnRt+jXrqZMduf$@2J)/Ji%AWaS]Ljb"XRqk4jRDTg'B8gEEaQNd3IcbXGe;uND4Z*rN(%E"R]43bu$lk>k'*^#kd%>n9a*$CT];p*P4QQ[DE?R9A/8rrbR:(@FH)X=J3R_OfX<Xfm/E#u=2EMeC8o",XJ>R=DbL.^j]E<-iD!FL$L6<k57IRC)THB1*)M%]3B<!45ZY\<A1f))rb+gD_(-6.$L[-@d^d+.cq8-i3i.dHgQ$cM9r3.5G@7SFcKSaqk)Bo\a2/&\T0KUA@:R8LV3U5mLBNSf6,,H%S^'/PSechYV^gWkXIa`kFa$HGgGiKtcHaOo8+0rs]MncW0tX#k#C!3(>_dMa<IN!d3X%+tF=U?EMEaEg"iL,2EE!>3oQN^$4"Ia0%n%[)l::m'?H`Ke&Vc2-pWO8d4^E9WK:3W-JoM3YhSSI=DWN=ikp\VFi$gj0T>=b[M9nMPI(Yl!5o8@ib@^dB]Ik%._'&Ok>;tM&9%geM9/So3lQSQa&uY/<=iHR'<=W@V3uO'uPs0efZWX37Sknr;&mC32V'0WaD?U)(/K_drEU:2)kU(<#?"1qXDE&*m92_,$^#<FXHb%4"Cs@NsZ\`=dS0XjlK-\g%kE^k(VJ&/4.huq<@WO$_'*h6?/KmZY]gUD>Ed?;(uGQqg(.n5&`Q4H@7O!_2/7i)*Q"iWPn\ghdXF!%S]at,3LaS%[Hk,6jSND.;#+0qY2&bpBH2a9=9*WQP%>`Y7r=,(C@cLdm#D&oYiJ*CM"bBX]jAtc-,UfIaXq3[)CVLU#Y<.(Abs74%.1:\mf6a>bs%\)do"i=9I.G)CSS$[I&R@CN6KdB&FFaMU%rCU-\G:LL7PBT!:H]n/k`ZXE1WcE;+3+0@#hPAs6rl9%X=a=<EZuc+%j;q"]4#`^Db&Za(;K=a.8[%^79`iO/iuReV?p9TE'6DHf'SLZg0Cd-SMOn("5kNh_G<?m*UPIu1fjSKfK#?4QRW(OcLn9<'6Btta%H*c9:Knf[1ZCQ@sgl\7F!:D=\=$Ec$"a;Y%;TC.mBNt&D@=k2LZG+/#L:/iX4Z*"45L%GjFr&Xj_)U:3rCge?e<)hm=ZWQj@Xk=I%p"ma8kQ.L]B?Ne,6q93jW53SiF"lpdeO:C/M(7[9JXFJs/Ic3hpFl,sFrX,Or_6d1:VG,p6CSTEZBt%@c2c`b.:3D$*5lt@RigRf%@L-^%@P/b;kJ5Y1>'=FSi3F>%Y#UbamiknF;J?7tA4#g=!De@#K<t[>o?'<o;p3.*!YY#S"NZlq+d65*\R-M44S]S"Kt4N_1$5#>%m;$*%5-/Y/Nf+Z9U)&AY?2)2M;kVD![2@`Qh=4':_NeHHP^%XaG3%B$ghm2ZagEb^TS6B6QCWk"f#H0d1e?he"&MV[f%poAb-C*G%9KFgtdh01>S\,*J"7Z+@'5:QBa4U=L%*"ZV6d-XpZ.e7"A/^ZsJ*L*$9p']=\hUBTM2+`cQ33,[c@&to$tD#8h(XJ/?(Ja$(rgq9%D-2b%a;0iSoJaO4NiQ'jIL$ZTId>XoNN';W6Mn4W<V0,mD6SWK`RUC483&"8fR^I4%-V296<q'ZCFBG*36DUP1\nJKb,R75#DZet%-f45``FJ'cQT0p85*f$M0Z5e2#'qjR+K6WZ`(>M^5]HD`qGA+L-_Y?P!(g`,IDaU=?kq5LlpYU"+O?-#Beh>u"M"g>Z$04S:i863%i;'\a;P7&^hLR&QiNZhZH`bLGiZjCJrp9I)%^3nh$^:mlrcD$=i8&N3^iFdc&HG5is4L$t!2@Nc?^_?@+,jcEUrQUFI[\g@No]q4%mFHZq0/"+@<$sB6hRhe$QH<U,+[.o24?IaoTu<&8%Yq,V((W_IBa*P=K?+so`BD<513egn0b91lmX&)!`(>lH/u^Y-;c?73,a#?b%ci",6D_NFelqn`J1mnOTiW9/N+^*=9X7G&5@?SrbFmJ>P.!0.%,QSBt`r;.@$#`YshhPO@g1(Z7Y>^,lCikoe1JRc(?AY75mN_!5%7#X<7$m[*)ZgWh(KN%G`E2:<c8oLi'p3igF\ojFcplNhr-q5-(K6,C"(b0.[8/O!WD-b<35sW12*2WoNL`0g81+Kf%^_6&TGh(_c%r3CIUYqQZY'2%[4psi`gBXC=nX$8@G]dF4:Q&VY_0C<Et$35Xs%L2R]#Qb"Qi_sq)'&,DdU?Y']=i?>%dDb;mm"JZM!NL#IHCg]A%Q=AfW$-MBpj2W]i?"d3rqL$6S$#rp+Vk:h0;A+Bo&[0'kS9Sfp^EeWE6=\EeQUiGJe&^Rhic3Nbk'a?7YOTT@ZT&XUJSX8@SY_1%%9!DaDC1egn1oUVHO#3.A6]$!!]5<$N/.B+Sf,%r#0Xq`")Y<c1,HDc:bHpDrClL(^PqTI9P'*^f`rM*^B]-Jc$U0COAZH-]\7o1c%M6S>/0?9Al3%nZ?%V<IH8Mk*15bcXH&]:ao6"<8RZsZN5j3m5F]T3HjM\G%I_;,Wq1`"h@&fD><$JD&aQ:-,=6^&%'lHp8`05YYX%)Mi259\<7mOq:hY`/hQHUNg5a<5EQT6(_f;^SqU`P"\9,4]`qSZkp=ISBs%'^2eoYf9IR6j?dAH68k*.b[)UOr=C5d*8]S`ksTmI%#u#%gCYhc[Tb8]\SP[d!Zk]dIFP7UV$Nt=cEMt*`hIG;3](%0`W5/=jN>AR<FeKB2SHHjCZfK_m[Ah%H5#$u;9g$/UT9HMJn%s9#%37`=`D$Z+ig@mnE0I-j\NK%W/MfU@Dl''J'[AfpXBJF15I-j9V+HFIu5t%@P&(HG_iSrUS6a^@0/e!gqo$khOg+Yi0Y0Q'6CVMc4%SKH:<#h]>_!^M5-\\B5mH-4rt&LrH7kJQ+QK$%$m6\__WJ[7&)V)oOW-]JS[h4\d"hN!OE7*/Uc`f0,L9I1.Ki`oe9Yqgr4:BcgJ%3\kdt^7?kb,_7.%EQ`V#$?FRZiq:QR:G)Bc:*bZDLH9-.;//\X\H[(*@.0P6r5IuGIis%ck46H!?;%gGh^I`D.;VV;R$XLIDm6J`%,#01&;2R;2Zbr.Ir]Q&=-/XeD>LLMXR/O!#[/&;?7APdmNKF@>n?B-h\_+Ri@R),A]]3ude]0pqAog5CjYfokGFDU@a7AlGGGT'#%Cd1lP2GYhKK.`F[9FflVA-STd0f2o@S[aMk0S<+_-"*5_]''P`2d:76*'0eBJ.+JIkO;S6FO:tJ@^b2S3HWXdF:m2X6flZ`B@)Lg%K&bq=7;'tmZNWkFTo73hUKVL3*4k>B3i(h.jNp>.d*]*,QUBrlO;sDVk/7Gul<Bca(S63NPlRT_O^8#;DWCFf45)Zl]*QRY8H-]"%@=OQUeuphuV"\tKW4h9NCOEn>h@S-AGiF![r[aPTSRrq0.k1iYE^*mW)IGmBEVlt,`okYc8WYs!G^TM3eJLi,N(t%_+=50XN/Lq0%JCO,CahoIM%3]L..[^/kB(QXb5Nt[V"ehMVK$>F'ERs8?98O'pm!'6Rm;CW:[(os+Z,pn$D?U@9pG(?<k_SceJBGE5?;b%6>Onm=%U!aPb'<i?b,W>iT3GF4KOtBe*:J0AS6BG#`9]fh?RJ!A'a$iN3-^iP_*iJ!F+u$tm+HJ0*KlO',)9*eaLe+]s9G.sto*,]PdTuR$%8TkXs(%:RN0iHK;24K\mQ7*9flGo;+6fdc#Hk2K^&s:5tZ+L/0p_LiA<Hr7^4Z!JbDbA(:J_u=<"+P@R7$_?FO6,oNm=A')`tu6Q%>g.I8,*1%d_2KTCZ6LR+Z'YZ`Ui6nfq'pd:I-<l9Se<_NA)XI),@E&LrFS$JWT,ht%K+Z7,s<3<8G5tUp.QZ7G1Ri-*R#@@R6=]e%>_KHiB`R<BcIjGt/]UKH\(r0>045l<!b\^O'pJ[Vg<OR<hMe0-f'Mm#GT,6$8HD>VGeI0kVSd?cQREY*6\5KR40UIQiJ*'Kg'+d_%QhP";OZ:&d()r=XOrI59+dNKG8Fm:(@.1&G]o(Od5@<jTZXWBMDuCfC$TV6o4#2JP6$3YP[TF*B^6f&6(o\1?&`qn91pT:<B.oM0%>uj`Iicr7;@Wi47LZHn9T=s4#3t[ljhGkO<!P`!0O9FQ!j#eGE-\;O(2,lsj![QP50c>:pMT@biFsR6*\;6*i9Cg)P2u<N0%&P;0%'9R9KluR[CLl=C$3^4;=a,(EUU"ce9Hpf=2huDIR4!Fboe)nPlG9fsO9,NeJ3_tU.ToC"R_'CkfQ]X<q6tSYL6me0M5;,,CP:/GH%gG"GSU!e!+G=gkD`\PlFMTJ4[A1SgUDNG\^-ZSfLbTqr>"p94Te?)A"60`-8F2JLCS[2aOH4pa)+XqhKHn:XO%h`bcLeAi-XU>H@%"_7/hie;1u6!di[r6\'T-(0f+@CIL$6j2k0Kg<>9*6,b-Xa2*7kPXYE:_le7_To=Z`J9TIiOllAc\S'452<[2O!Vu)MkdQ!jMTB/%o_]SH_m^;M&!q[!l8\TYJt4H'`(`970(q][M<)QCm"XMsjok86`1)\efPj1QE-)W'59k'oq/@K[S.j2'MtY-,Q?@ARg(VQ/7g0^8%QTXf088(UjAm6V7'+'XI'B";SpN_?*X$AI+fElg`$$1^*19`QZp_@,`Nn8Q:KdJ2X6eWD>a.BZTQr).p_BR6$4.\gc!"R]bT4l8$%(uh$CIQ":_Q(ej]p[oh?_jdn@L#m<tf=ACi;j)&nT)8)"::qPSh3pJ#PrP<kg_qgLD/C,Yd&n^:)DGkQmVJ9ohCE;Q82^n+@TO4O%_lHU>(k.oSkVhb-JKoa+:.&6C4KT482mB=gbD(2=6S_PT;eMd/(ahc1cUh`Erg[LglHdR_Uu$Mo+<smX>+%oN.^V!oN)XV+r/=Tk%AJ,l[R(X8b%('q[?YKES0M'-UWJNMNH#Ln-!AVZMO57)$>#`?Ea`(bYkQsk8'=Cr**Bi7F-?\)'c[q`V.\+\I//djt8VJ,:Y8f#,%0)Q-P8Z'AP*>($jO^k<+OY]rYU30$os6Q^$.[Z"q.gUc<M,2t;'(I?d4*RM)bch%[iK4XMUDWk8>Q>['J;eI?"7<]4CmZ1A+iEi.%$_c8;R)G:u#q,"[?52LHU@Q1l?K76=I3A>\qY!g?YR<L<&#sEL(Wjc?!W@l,U<fIVR$m(15Nd8?qI(k3(Pk:f((]!Wb]<OG-XIpE%NYdLYA/6g*#(AYQR\e6N_4rXEY<P^XN&KB3,02n+jLm1+k$eXGV'js`1bX\fp>he;k%<?,jf.*I\+uqiZ]D=!4)Nq/.bX2t-+$Tk%WHLh1`\^8F$I>r'Le;j6ki&)lV:n\BlJR)<iH])%RJVe5e:)5+$(^pqMo2Tm6Sn*$pVlNlMk.'dYa_S%[l;F\WV8Tjqq^`M]Bi&e%l7&g`>"#8MdV@ikHuJo2Tq,f`VN&bQoI`XFfM,B?Apq"Cm(,Np-f9.qhY0[;H7.0an"/C?RStRQR05*b^E5\YK=GpFXs*)Ka#ND%%gWT1PKc1[fNo+k=@)8G[Iel"Gq]i*cV=r8_X?*&+Vr4LFpcV[4JO_SQm^W[#m>8NOAT7/i.+U?69laR%^3r*1-ZtVXd*sA#_O\tH%NKXh97XBQLj)5q-m-BS>b05?h>^R6'LeHeq`ts6o>MNd78]DQgQJ0D/W(HCp8W*/-Ri%=[MtD=oh'Kq%)"S0NJBm][-C.@BjB`64%LImS%(ZYf(7cDA0V@1PCMa&:qfPJ-lQs_C*l"mr(>WUr4a_'!*;,1lcflWobl\T6&"`5M&k(Jh,flV4\'IT)=(UQpN]_4B]2P#%e%BeE]db/gO7FMVarPKp$5cP`-]2I41@Y/\\_'/n]/\TED'U17c`"Y$42-V-4RCq:aNK[o>oA^^hEdKSEn1M/ONd/5n:6;B)$/uU5-%_E5SM\tE<>J=M`VZfsrufPoMc0c6BV2I0-3h2iIHOA-OU9,Eb$2+BK0OQG`QXWB]r/kFoFmnK0;2I4[E$1TMnRSDs^?oH;W*AO$9%BV%Rm7Rk\#'5*+SX[MB>&[U_RrQ7rYN0m<e+N#o[__\hmc)(jeODkD$Qr/`+NTgG+p&3Ft5k<3J3S)-)8eC#:r7N;)T]`]%;%oR2%V1mO4R)FDq1"O<sm]5(N\?.C)\k%RRfUH^]+sdi?n9a,'PMq^f!1l1jG8'@QZDi0]=13ZAmA"QcMn=R!&>Xm5*=,UWG"r/QpFm7Q%Qj>elaX'WZ8#4G_+*k%[[.!aF#'V0bK4#k3AU,r?)_l!MN>IB;LIl0B-bSRoPpBg$p,.%>FqJrG?,B"@$(RSMehqY\(2)i"GKJ<u%6E[j<186bf20XT`7K5f#6foj-??8&E&pVblG9^qt!50N1`BNQI<sKD_ZfiB&k-T#rQdm0fkOKT\n&96h6H1A#"mnGmEj%@Gq:Jd0%*/*bYp$Yk:]q@!*'1^KP1ibN\bkAJUS&c."Ag0hW]j]*j!4":CkU9pfSk%1b^=Z9J4W'V`SCeR]3un=OU*JYbm"Q]Bs($:?OkfuA%BajL%A0Y'*bf:#@Kof=t#&D$@-Z!E4Po%$<$elPU!s`!1(H+HU35MHUUp9Eq"V]\,mSBq_;kG.&XSl(Y>t[e]q":PVkfVc_qeg@C%2`.t18=0^p.hn93/V;.(mX'ps=orJVE!Q%N4nLZ/QHUVJ^XBpCOjPp_/gkpsiT9-<0YI$(15s<O=7)^Jp[HDIV/a]c\!>$?S\qfj%r[@lTS^D>Up@p;n:;iHliV'8QK*3GTN3U5-[auW@6<QPt_[$kL&T5)dbceYtRgk(K-?jBNg^SJLXRU:K\.^V>"7N`=1@ljRL:`Rc%ar<C6.-.8<ES8]__d2@!r!Dp]P21)D$?+.\=?Fq?G=bRfhmrV&40]/hBpPZ+::*Q`==[/NqMjLfK?4dBjf.3V8Is'nX=)*&Ls:>.%g$RgiF%+eS'[;NlF%+e#0<phM6?M>aM7#Pmc\:+C>rbT-qnV?_7+^OW2N0k[BlJ,&k&4Np/$Qh!<q*e@&SsF;'%8^@BaWC"_.cS?%8SV&[_)lgH?W+ob)LG8a?-r&K#BM1Jp5skU'-o;<'An3nIcY&ug4B"qPp&2&FZpVHQSI&FoL0JpW5pfm@1C+%]&)`<"\L.^FrTSA%]a+k=qesUr2TN4i$f>U[M?;Zqn.?OHiuCcNJ?ar:p\<6Z(LSJ/WtX,>V4<r=CF6\Cn+nd7/YHNf8`W@PM-]i]+@VjWOZ:D3jk``1%W"mr,Rt8I`\#].6;H]<][r:/3G2EIPChK'*F8M?U=!G2'3VCajEMdX)LGAMIPFC(iak<iO.8mJG*k!M/eIKl[>G%>nc%kV6s3?<G%iB]-_b+&FV\L$tk[Xd-*S1Lr"W6E"@ZIaTrjo2q7T8.SN/+5\dLNWG+R[TPbp8m<6\M.'&C0GQP]cNIMBC0Scc$VPsp#X(C#YB9d%?"j@l2jDZaV5c*fLNI9)c^]D5%mcb`Z8gEkKYsd(:CHW5BDM:%BW#qEH1TjO>kuk<E`&AKc@pGqm9OUAJiZV;C$smPrQ9h,<pM[4%SpY#]Yu&#[q+O]TiVTr-8sk^/`q7kMjn^727K&e)*E//h,'-iT)4g2UM##AJW(Q`p)m5nT7@.E:,k](Xeq8F:-ZTMZ)1AWeGJu%L%b>?+\F<6o1kSCM#5UG6B3OmE^8q*/:C@ld68M/c(0:Wu#1J?^ud][]X,q/1VaCm[FZaD80.r@#j]c&LR/Sp3>n!r6&oJGV]XjFaE%354$.kt/5L_![6DQfM:n0tZ+:6N@jMi6@A]Z5.F14b[KeDlhQu%QFl\h#'#9=/$=U*,WP0m*0R#SD]\<A!O[,kcHO1f<$P:=lm1s%R3"RV<ggn:NL0gh\Td[eXiZQK#m6VQ3Z=Fj(is(tZ5gZuq-n>M9-nVF<hfAVGLM@1\@2")Hps)VWJ%6N-g)^=WDcA8,!d8tD<aY'%<WfsOL-4f0O;2aL4qH#ebkbjIPn0qU^K/>r?js;1kUA?nfkk--Ka@WFM.H$Hilb*(jYfLNRJ#sr+62Ea4iNq4i.fF2Zjb8u$U<es%JMf&`8co+?@8d2\q=?0c#3G;$:?@GJo4DD0_Y3\N=P_UtS]&In9lO0;o#=#f<Ls$+L1tI;MN>PTCbF$f(n9$C,LBQVb2k#gMb$AX%8/M!$n;`k>R++1hhN^!8(8.!E_fGe[:=U1*$d]8KGRgD8IcMZY!0cOF1<CX'!eiKdgl6U\lXE4l!JZEAJK2JH4&TRp!97'PaBjRo%Z2d8]3KO=[Q"(PdNhLC@$hf^HAcX7'!=\X`:G.8i2:A=K,MpL"jJ@6t)6":_PV4A`0VM/8;TXX4(mjghjOc\=.3FP0Nd:e6dS'C\%'^hU,PRhI:Jbj"4jW"3ub#'eQ$]HPX;"_Us22U]oTntiM9"`\M]Z"\"B0uj[l8Nf3=3/((,Ff3#_S(Dl6^tmE;!u#Gj6T]:I]m+#%f%gJSL*HBgNINicP'd-?j]@IjYFg`DTMS)X-'*/Ohe(rOI]7,bPMO&Mpq;-oATEcVYFhF2]XRb5GH-UJY@$qK,4D]Tia0C`>Q)RU%!JK:p(HnG@K^SMkgS$ZrHi9Zl_FeBpfQ.gJY?s-\EbjI&IPgE)IaO%uB9/%"YFfHcd_Mu6A"5gG\^rK\lVqUcp\MjAF%kS"^Z\o#%L:`L"r*I.smc,8Z?9`?Yr`f=f:21gG?GH!sA@.]Fh!5ciTL.bmq"OVRVPfN(j-.Uu$bt6<TD(D3]meAp1oU-rEN`aAL?m3Fe04;R%$d/Sb<YNKsH[s+FKL[M;hEsHk?GGR65L-rk%\X'_l8R^NHpaLb&UGPVpj!CeXaXbkF'OI2hS(;q7([:Lh!5ciZ.6tRGM$lAHi9\b%o5O0[)=Llr-flg30j;d<8tLJgGctJe*1Om[IaPY$:$+XR\4ml5n)GA_0HJblS\Vpf]Tll3HFVEC#4M5C]o"IJ_MiH;?W=>Mh&#`7%a1p4ZOM%)frPm)S94m;ll]ku9lPFF##at?qh<X654"(J\Pl(61cb^.%O)NfeQL@khna>F1RY;]ck:5Cr^JU3R=\du/p\K0fE8Xb]%d`Vd]p#F/1_708<3B$lMIaK+*L]okkHi9\pG)!8YjZE_(lBaVNl,B%i?GDX$b+\7r$^6/6<ket.*\9b;lK:6GIcPkSU2T]tAJ:Gc%DE?O.$*f%"H%^PCU2T^_Z,`"T`(&VK-U\Zh]%:j')eObMrBb.[/Dqf!Y)U!D0?J[dnaH./<XoreorEjoJ'^Z;Z>ep@oYSD(%k"U)%C`)F0E]*:rm6Xs/J</Q3mnI"3fc1&VFaPnpR%2WgbP%OXeYSRf!g4ngUd3J-=s\o!BZdr>kcnIZFuR_cg\LjFIR1DkSh"lO;e8i1%o;Qo"/l$3<9_N@<2M6RRbhU,(HR?5lVm*P:q.24]YFXK#>r4b!;Piq303/"QX@h#q*sIc(eTTtLgA,0\8;DQ4O4*"Ml^N"EXM7Ek%8#e.HlntrAbMN,sF=$ULdac7T\+Fb'C0nJW^0HcfT;GAZLPP1sl1%I79>B$C3U-:cr/Ya)>KM)9GO;g+\(nPeA\6i\epMD]S4/Y"%XH0o_F"<6:h36Z)qfVf$rq7qM31ITFS[$b7`U)jbcMm2-7s8Xic6(A.2kRF'RQZ#go]Nfu^;prg1Z-@rmJ&W.&s@R,b%;"2Mi4Yn%;h'AHdrqAm@IlhV97&fq-U#\T'Q5he$:o?$i+gYp/:o@efZoOX%FFYD-2h/"=Qjph=-hXH%ZF@k\6`??kI.4%nXq:1?_@(hSWi*[%hXlHjKUJkYf&,UkASK%Cr[$[,Nu=CMpd;&dR?-Et5:M([?hP@A?M<nog%TjmduCgD6Z]YrU\AK"m;-BCrE.7EjQE["j0kJG.9lVl%o"t)YQL/=NIS:blg?gUYfZL90e<eDMdIhBhnS9%4>5PTB:"/DaPpMZa1\,!H?;"j&NETZ.EBS3C*G2lnEiKl9aF\?n*I7JJD%jWh%I1`qpb(!+HaP6!=rRmO5q-9Nh7%lTd^AY#a_Ag)p[(k5'Y9h%=]1]55FaaLDY-=OR)J]DM5elmfnRY@=I8;>?[L[_=K:bBs5mm7$%#3Meni'&8.i"%`=(ZA5.VR4/]PucZF9(DUqMa,k;]+;^NH7SIi-aN@%!@BAPPk$mTMkgc-_,@Q,S^OfJ?0liL0*h8Y?3F8O[fl(l%0.?S.5Mttg9I<!SXih.N4Pa=c)L*MS,0p1%FVu\]JsBUp&nurlciRp-BRrE0JZ1dqa^\k,R4)D:GtFH1Um%!,rMAY;c9G9QpB$F@%]fqEOQ_8udVj+qV>S/[`S+lIm-Jl7<.HbL4Z`A#H\]a8a7Je<c9I`k_Y()7f/,*A\mQIqfaS]o6lqa?E/l`42$iAKcgY/WEcda\k%HS6<Uk#]F0Y%:AC(WoX$3W!*Qhqd$c(7L<5N4a%CRPXH%87#(>.u9p25cWLhT9jgmp.s;'r,fHXJFi@(9;Ya.rol`%[.feCI&j7E%gP\Oi?rQrB7Ts%?l5P1YkLmHh^EigG_54Rfd%?)_%Te+lW5><bN;?Y)>kiH7r''u"ZE\e))FUa,78(&>l449+V0A\\;J]OcQ4U(L%XF<*bg8+nGVjl-'2#,,OF],r'ST?i?B#N,IOQ7F-HQKoOAH(sbEU/1-5(iCus(FT0?nCbms/NZ?Ydn@PX\9a8Iii6=d?#NO*6gTI%!,c[r>be*n'Q99eY4`m_]j'W(._@ar<j^#qin"q/iPkANX_[5j,B)alSLo)*ZsWg8SY!WLNNK3DF7rMChk)7[mY@sZ`jqOJDO/$:%a^tg?:.,fdP4f[t(\(*?)1fbJ(_=DMjguQtbqE)"Y'1I4GOX&a:=\HOZ3CFR)]e]f/s<B1]lT0i^X`-518dZQqXt9<2b3C_$eEj.%Qd;/3:+[cRQG3Jabh%X;3u[-u5Oa6:4SOl*=Ul2Q;l$^P/`^KT^P&FV%`fbTVtN/>DBb&2+L@Y'MTr,$<F1,.lWd.(85#H7eSaXG%8)Znm]':!?cs'ekaZ2\Z22N\ua].6c>gB)kH96\eO-b^uQZq;n*<+10T=Zo6q==N2>Cq#n,Ut#B_7Xig0FQ09hdHrECZ."So5I(P%I,PN@P+/G;b@_/3;:(rEo@o\0VH1\%Vt]`E!^54g.+Vt+=ooXT@Bm>$QWHC^()kHBbY%3A*Bofd/T9%3/jpn\l?82Z%D^6i3,0TW%XAET+Kc*OHH<9e,X+QDFl=9hqjB1NQEUmFa>i)#(S@ksG(,!b`9_n?Omu3?T069?ZQ<pl!EjrZ#47+u#&p=WR,5'*\ilUHYIC60B%^C(inJ*+q$^Pr-.q=jg:pA.fIk?+rq"O"`Lc+dmq?-j>L>(W?&hB*`Ao)-#-]ls/L=O*K9mZq0<>#1!1MsVtTkE@Ltq?oGi";kZZ%8]ku,YWJ%!GL\@e`*-*K0)F>!7Wl/OI5Q6I[GB^,hB_KVNC>F@1M*`pQF,fsjk&22oVu(E5?2I5T-&\^c9.!rUu0iM:A5S^#*(K$%#Xbh(d3-l_kP:5Wq&/N_8$6$=[5?;.e%Nn%j7^0*EV6ZM<k#[_0\4I[q6bQm=K0j5Eg>CGWHZ4;d#7Qk\T75BQOTDJ+Ddsq_KQR"%2_Q6h.k(&]DUcTfmip0+7iXKZ(h`(4*2047nO$ACkK8.3DS?^L(mBeR(^h.U;J,a*o90MZn5\%9Jt?N83gVYthunbs$qf/nFBpd.%rrr>0jihc-pDf4^.L6R+qu6Z&qhS&#fp,[`!9PdRgT@[WDs72e-3<Y!o3hp2\!KUSpa!a'B+P4WGRTc,%i7?dVu[!o?-SViE'mCT%/^=g_1[]o9@ZjTUSHaq=k^ge$fVi9!-e,hRegD7!6gAWW`fb--":E,G:2oq,!MdUmg_^s!OT%X@.<`Ku#VE>ppQW"h-96U[$D1hV%f[/1fgAGB""W\2OG[9Y4K(L+.m`f"M5<Z:[]8!R"+7$o*n)NYBo$aaDho^uY/Y@Y)o<W[j#VOub6"*j@FMXLuT,0$#/lm:)Y&kad%+4b<?>FR_!X6VjGnk2;Nn=@M*4T5D.HohR+`8b??J5m\X83NjEM*#KHY9'9PY?'qJilCupO36m)6f.elj9t(_cUP*ADTYB`ZI?r*%4pSc2F:4t3[am?LI:IGI:1](S(45J69#Zk%em1:KcLhh);;(YkBj_`CoRI,6rEuLM=5MW`pjbq:^P8t$YZm_30koq[Aj=^_S;\p"%9.?S&G-.[h8Ii]tBX';]4WuC8+XQF"HN$FYV-WTb-Xo;.X)H?<6VH']g(WB">V5p.kH<LX=]/]>pQC9K]YAg^Qr1`u"'PjQI&ATd%_<b[YcAV<)$,sFo;LEh%aGZm(:/X>mg`.,r448<2q8[K_]X=R((REgB;YdrurY(O?n)NfeM[nC*Q1"V"akE&.AX00#^+8<I`JRj4%fJ7CE+oO0r!8uj;E*%JIQI#P`h,Rh.hORr/7K(F=kgZdtj?R+ed_f@t@O8Vk?.Cu.?t+6V1',WH%Mp_LkQ0^AChq")NY@?pH@O"-%#-m$QM2hrP:LcVSE\=j#'+F)OH$aE.j(rrRC1)8+5@VlfQS]+tNC[ocm+@8fJD.en)2>goA1lZ:1+?om(6&bJ9gY4_6od.NF0Q`R%8_IlIk(;8._*]CC(M[;TeGbE@O]aZX[5"\jN@09AkDC+o,9%6'EM5eBXP?h$0e.F(&\\?pOMa4%kP2B@HQ#p@b?#3Pda6ljEW/hQ%1:Ttor+LGI62+0oq7UB?.[tg*Ki3DjVtuJLaGI!3Z57D1(1j]`"2<D)SmtY?$?m&@'T*lfifhF'!po.`ia\`7-RS4@.R#bF/)fgn%T8p`cpW88Q"o*!e55$]g@XQBr(KPRQqgIc5Aq/EW4e87L,&mA/g#?;riptCtfZ?]eS:%A$AoPfH'/_=s]12O0`mQk>IZ`%de]3a5%@^XRarCJ-da>[dFWS5O3gpYlgQeGNdVe=]MfWglgDSFWAr)uX+f2/H(hc?PTlO9VpU([YMP1o!-HGB)ihUeM_9X$.`QImf`rUW)!%cK!FWLT;uLDceODSbRlh`L%<7VOcl?r.>ZTe@$?8ilSQ[(Ah_l?<H=b#:H*:HRen':V<pOpCC"]l'1NRs!K1c9`%BWAXJ<uGs?-)%R;&j`]gEif+a`91.5<38]so>"fb!cdAAS(c-Ajj%,QC8=YE\<NHJ\%HP\%8_ndiI_e6N[f,u(IZS\'bcg:LS7GoM!@?5J\Rg1*bD%dW:BYh1RsDfP%V#b.]QZjFWfBqFSYGUj`_1n3-/A)4B<Oh%f[5CZk>)(p_P+Blj)P_$kH/L?75;r0DEHnkPSUhp-5Bja<D4!L;eg%[k:;[P5fqb]:SgM>gC7/idLf?k3NR)9\Y+'ZBm/aKe@Igr4T<>IXUVTbi.b)&g=NXq0)\ZA!+!HIFu1H(Clc+[5,Ag\Z%f[KIc:m%9XrQA5dN/ZorBMQ&kUMa(fS\C%sB7[nh%JD[C#XTEeGD#VgS4O+VGOo'`@6r:E0P=ZASds?KZm4!&GaFG=2>[^)SC\Le(A!IQ0m.%'i=tXLa_J*IecgU-s8r)D>i*UK)2Ms>:pP-dq);@Phj,s+,p>1Vb572IZsmKMM,m;k#X<!f`(#drLIq*OO8BhE9AoF_K>u%i2uVk%Mg&U*']&i3Y<6`_dfdF54e_t?bn8b7\MuX1,GH)a3Ubu:j0>)HJOlr>f,Tf,%$D;oV<+YnGRl/O?NW"Z_+caB8Xg!J:00&>4]%(H%bMB'Tm@hH#N+JZ=]?YX6k4I%SU,^.*cc53J2])b(JQlI`?5r%6hM[qa`>PA+XjU;*e%g;pLp6D5^;Rqap`>R.ppiPWVsR/?-DGbF%Zoc5G\G:4cOEQ\&T"PuQ\T;HI7Y"O>hX>bg0Q/!G&BM8G`dC&-4FN2:F`-Jn!c_m).@K&*`tQMo$pKVu"Hph;_e=H'Tp"7-Qu!Vq%;5K:?@lN:Dj)P"aoQ7`8<dJt-':HD3GL,rF:JYIl*HK;*r@8?k0eg7q80&0BeLsdeGl$W`7hJP!^:TCfRc&Mg8g8BZ2);aJ]CU9D%^_44j`dg;/hmS?ck[kR@H#.M<k4=UFJ^&&ekU\@nc`\_LJh&D<a%8[.BhH!4<YP1c/m#a\61QiK=WXG&Km-J^0!h1H*#apN3Tme4%beB:k,UWG*C@actk0*]#.Y"\6-tHjh*`gngKC*4n,82lip]Fb=&K]bX5A]p]LI+V30AhSq:L_X3gIjk&VU4p0F[aO6,ZbUEkonBq%gGtDCs'B.PPVh92H;Vlu"Rh`=>d>?ce%HLaFabu!\*ilB8#hY.Mef!9dk_:>H5SnQnE2ZG<o(?#d<&Q'@4&J!EXcs\a@n4C.Af$O%\^2llcT1JOWo2"j':nW^Z[AK`_80/MSfGS991]C!?#Ha0$CA)7^J"%X6)S[!B`4_ES&J`m&!U*2T!'(qF6l59#jJfXP>?tW_X,lV%lJ^2pNojkQm`Gq0>A`Y_k%OmCcPPiTiiTdb;AF^qf([6E2Mk4J3_dGd+eOh=*6I6qO^X9O3V!I00$Md_6Mg+?9bFZaKuDr22iX`&%hWiBgT%'mclL'h!6CZ+E96nL_RcoMkj`Ok)]Deur6AUk+=JXh(GPb%oXA8OC^tjK=8K#jD'N9=;gX"\fq)-p=fO!IHed;Z6dPRHB%lD*d(9]]nYqO_hI!]Z0u92=c1P\M62'9N@GrP!l:09IU2Xe1jsR=39hcS<h"_#Y*1b?iS[=3<&.a<!cuA!u?m;oG#`^g,;\3BY@A%g<"#5@)o81eU6j(>5FgIJ6qdHKGBW82`[M+,%CdRna_Tg/2&(t@>NonVQ%b^D]:en&VQC92K""$Bl`:WbhbE/n`'f8M::K0Fq1Ej%A;!?-\`o51KA15eQ"Y>#9qk'rUd#mXcF%/=j[C)CDVI9<<h9'V^G]#VA8,aNQ)&O$m(6EhSoboiNE1?c[?erOp14!)p!U!dlh-24%J,A@$oCln2ePEBGo7ceahO^R1ld+sbH?u"I&i(IG?"R'PA:f'YLF7UBipt(ZX1e,04+4P7/&+\8S,W>Y"a,"kG64;^42]\7eq)rW%#!Db\R`d71YFadcIlXhZ*@Vg5%QmH[&375>kO&,gmqUVTWCehX2);N]2E.37bFR\lm/su0C$i)'bZ3E,g/XtrG:SqsX#CjFNP`[k%&`SG`PoSL4H)$;leSiZNHN/&GHPe44r6O]Qr(:f5a1%*OCUfkm'Lk7Ob8.M5,T+`R$;pX^:H(Q+:Jg<ISXTXpItC;MUYEIsItC:b%T?n.Bp*Zg2SW(?M[6HsRn(AeO1qDLnY%Oj4:M!%70tAG-PWXmR0VT_@dX;C"?pmAt4eX$].57J>i9kb^A."9/#`sF1d1hC#`J2Z%%0'9]W1^39ThDDO7Dih@!CU/@,0Qt3PG.i3Od[hha0bbFmh:(b=hq0M]Utg[64i,3%\a,=%9&1IK[YE&W!Z+_3D8sWJ+%u6bYo.S(%)a1:"0m,PC**1PKkKDrMM/VIV(&4a[d)-a"3n@B!jP?4gS(&I!`#lX3,n]+W:,0[+<,uNljIM(]/X;X<LQ1apj@hAmjO%-0!"Y(Q%DgogO;X:f5Z3$<:GRnO<gL24WpnXfB:`Ehac`n&lEe8MFgaPhM:@Xla"-Z)tG%Y<IO7.>8CSs:VFdZ`Oo^$[#n\g7D]Q;LgSI)Wn%1SJZ+e;77`QGaM$ZF@\Vp**cOSES12#>`g9(J[gMl?9&qTLUT?oiB-h)iII&AtQ1-hb%0$e":h.;8(G0-FC`4Z3cLD.(0os(DKr2%`&1+thS)iM98^`2-<m![nf497#F[('O5*_Q\U(q6];M/Q.>Oc2h2.G9CgL-JIHMQmX.+beGhLU`0>$K2)^d5a?0ggkM0oI]H@4Z0%S?Z*ZLa'V8Yn][<R.n>)rH#6`(\?]mpgP<8'q^hT(@r<)Y%&'I/ncP(*]);@Xtlk&fN).XT!5rOOJ(]@,To2k_I=QH>r!<%>H8ht%Ne55$M&Qal=;c0WGG?5om/dYRl*AF^l=kad79uL/82#+ZGU+fE6)54"/rV09c%e1WZ_+%MhT*Jm0S"rT3qp$A%S*2>]bCnX?]bh:%@Wd-F/6%4l^V]^gN]N+d/XHHl<&UHWEYda"3sG,T,De7-Ebr,-#0V)Vo.G5Wo/;m3IdT\]]o]UXi!/QIicl(?/VU#d(r@[FPo[ZY%iR2a_'-[he%:%%+j6_0."/_4mPn+)hIO>c-)2C/,#o/,K<&V#0>FF0.kt\UbS_YK._O/@!-so<SS`86&X&o6E],3?$EHflMZ0(#p%@P!L-NG@Ws?B@2h)G>r)YRZ9l,`G8m=[/>B]P2g-)3/"=,kVfVj3#<X^b`ubB3,V'mB0EbZ%fN!*6KE]QB^ER\'C3T(qQ2^fkFhq%lfTnP7?&i_4_3T0.LLp.\##ot(q<$FK7Yu.ObY/2*t6N>o8L48(<8YCCuh<fM&JBPE'5/:Oe`J,Z?:Ga,^qJNoPIEiQTiVRF:95#%K6YmdNsg*j-VKr,boDY]dr=4S4#J_LT1<>_f]P1HT``N/B'>_o>V*0,*))0$!9tNAlU5[e=-j'Lq.nNn';h*as)[V!*[FCu_Tj'A%:)^2o0(+nti,Ir6H*AJV&<@dSHbJ2nTbgjV"<nR*SB$Osg#`-q'0T\<+1u;@c@[*VG#1:l1suA/NWaVYZfigC*#AG`gBJEYh#:^E%)$2Cm1:L]fW(js?+>9OH+*k0g+[9o4+khCdm#<*RUf!l\SMOGn+1j(gZ*9rGfj(V7B:3XSY;sGnZXP`b[TGM;IQ]5(lt+HEI-He5%O[t=[$-+&f(3ZbE,ISH=?7N!,r&EJN(C9[4ktHNgrmlBGS:AjA.^q(/(e_E$?2>9<^Gc\'F,6kD%(s5a3i)=fL!>NRr_Yu_nMAJt%s!P2PFH<$R:RQupIZbA1g\=Kc^1js*b1``o5At8k6[=&+'7ZKqf=l,KhTi5gD9?eY_22a[WoA[%`sb2+ooJNo#RrM,WHk);/DCQJ%f$`*-pIoS<$hsSCIul$Bk0l?]r*B[.W3ZjZLt$eH\G:tiKR;DJVMM8ZlKlofL8A&R4?oj\YAQto-#92XXW1VLm]<uI&c_moV#K7l%:296ID5Pl^=^28\XL)<P<PVQl$RP!/rc\Stk`<^Z>GH=Cqn(]Za_CUD"TRGYBr>O]8h7I_5BJG>HqMYI\nQF5IFq/'+7k2(^YF)%%2qkB;p[@`((0r"&?LF*-X(bc3&aHNqk5cLc&Sf4Y"^HA$":-)J;Rul.?iMMH"b4fq;U2RI_gi5<VI@XP"bm)#NAZ!tp"q2E]am@-%Uue,<r_H^`dRWP/pJUhkgH/'-E_b"^40@f;pbSa>3D!-4:W$5^9e8"m7Dfa2Z4/@IF/gQkC"::-RVlSkOu"Xl8S\<mXcPSY:=UX8%X_Bf711`!;QWTCBZj'iqY*lZ8Y\ZD'=jS4,7u+Qi/Ih)=Wif`d!H.uYd%6uZG0HIk=@sM2RO3a8K%cNL-0/o@@S3Mh2Pcj:_6J']%Br2=c-``C>"n4q.$p/;C:t(M?M('BYg+WQ:0V)#Aj0Se=;hD_t*Ipf'&iF<*MF's07@/Q0!#P8Z(qHd5Baap?#`Jcd2m>QFW$Nae%$95MRS8??D7*fS1Whq@0-cm,j%"LpHWhaJOJrU"H:6QDQD(@X$P"EPFDErk+aZ3Q_FBW/=ZC\M,S?=Au;8^[n$B3Uq@%%OX%n7es%P*NK#S7*od/MR]+Kn^-B-E/9.CUOO<0KrJ][:&>ZbeG^P0I6iI-j&[d&e/T>E<'H)^_mj&,@)N_>#*(KGZhIq1(jmB1/6t&Q>J[L%:]q'N9RoFVF#*+nO<^5K4P@s#L1\dVdkUn+"_^faEUHQ:M@O][7>aQ"\&b)_.Y+8"!n5^$!#:6Dn3R^p`IQ[J-KcpI``a/9=iDR"%kYkDs>%C2C5bK<(,"rcF`Dj*^"j%]T_?,nK<8*s]OV'sC-,WPY)aGSNJ-'"Ra_S2".^[8pA;e)Iab70S4u?IJS?!Et"saaIL='`)%N0dYHK\\q`2Ar,uk&^nH$Y0gm\j9N/TGDKuX=6.=,R"t::^bnZRo2r.(6Xtt6&373[R?tnMCd#h%Zss%Z.^<ZA5WQV$k:qm&sOtU%0,aObQ;!b`=ZXt41:8IhG\f78.p)qE"k5i,8"bFRA0>JO2->uP!)(F!WMXME\3Tbd3fF[G`3qPO(6G^&CaK8!l'>o0,0L+t!X.V$%K/O7-d"$?P0$P_6"\qm%,"Ri6fbQ.@PTV;PQo`q:+@cZKP<mFV0M>5qbb-?k@`La2k@GdnA-s2?4u+5>*2,&d,*$1?)DNP6/sA)B%/:eej,jYP#)Z^DkC^HL<\R1V9%g]%c4fCA.[qM0qkQp^WW?s.#A]psYkQJ[`^mc[A!R7K10R+W6$tM>>Cp>`7jr]*Ur#)R<(qsjS%Un4\$KZc+Zh_9$_JE^U]=]f::\kXAFOYa48"phFA=@kDa2$GB:),=\_Ve$tb),j@&A:P\nJmO#gA3,)UeHN5uoW$Ve'JeZOUF:[b%V.Ftu:c&6X@bDH'^_3>Z&5SV1MeiKO(d"S\K>PQ'Omb+<4YiQI&59)L;`#p-SUDom9k6^iFuCWmPZEMc;7\S0'M'Wp<#KrlX6C=>%:hG?q+ZtEgJ44u6>s`e0$'W`9XFLRR;!R&@P+f0:gVQ7,!^f@cOTs?trSU[>?OH?-^^G0^#@0TP!$MO^!DQ3T`dn[("bcdYnm+1&%7MJ+qK_9:bD;/N2L8eC1.4pP)Wkq^jQH<P6OttN]aHk2ECsfeE1;hNO,r!k-743moOHqqq=4L8@^FJLW<?pQ8!mP1cL97H9?)UQV%"f.fMObkALa+4k$7HOa0[qqTMR?B$5>)2MPGT[PhDhq1I4!;"hr.]LID,Xk3-;5[nIR>8L#;\gQbD&h"T*SBt3alIQknBFe7W*pj%YnW'BOOU:a3mg3FN%t^H,3`4,UO\M=<b<h[(?&O1.cakHVlG`&&S-o6l_GTMY!L3L$q)p\RAj@>Bb(D6hZ^8[<'R+6RN4@1aYYGA%3)r53WKAr4IC_c""7[KQKUrm7EZGQdZ?2S]%cq+I13HItc-eTTJYAcp-,A2u&(-cN29I8G`&\&i)6-:'eKPb?$3Eq%R7,XTSq$i-%;A(`n5>AAXaH.Z:%03f5WDntX1+NG],GQm1+_eTF=C[.19r;$FO_?dR!tqY,k8o?ZS1#%NK*E2/!AY'-JAKa.0>^f0[Y]A7PED1D%Ag,W91H;$\_m64M;'eOd5k%#O<1t3k`=S8:'$=)$8IW/VN+Sg`">e5#W,R=P!6j\\apI3ER0=u`S7GO`QRDkB%4)*F,p`fC4TLO8%\_<da!+hH_'GJ]B9Xu76->F.'RZKIo!E'=Ud^^VLo1&OW@O$NNF@i<2d4+GrS>d8=9MCU9RAHmI6qiJ[!(iMSNPZ\#-<6g/W"9mW%'TYPj4J;$\4Ht9`@DI"Ws2XT,aIpN^*CL),h/n.i@,,/kYODM9lG'6GVHTr@.6B]-OM:^^>5Y7X<I-$HcB<k+P.sfU-Z/D/f>jfY%>A#f/0<o(K?&"Y@i;^8#+-4XY0,$3"Li6K$Y(S-XM.epr.M=Kb(6I[/64JD`3hR=='6X>6D\+i9ANQ94=9Bg'q/(YGkl/R.!6ua+%ck;g'$#]hi2s<rSklZD#kjFNk#S^*EUHQ_m_uZVmjl>:6T5eDADVAP/8QSWq"c6F>66BUb)iEuKJSGQ0_1@dLG/qElpdeNq%OP:"%!j3@S%Q52h%^pfWnXQVrKU'N%,1)LP#%PMl9!E4;qZ[g$[19qddZ4a:%dh%[C^Q%'dK"`aRS;lMV4$r0)4OP+Pbin)bMH<g=[nlN%Ns=\X736W5"%)+f_1TM6Xde;QOl'\A<EkXB)F+E@X[u^sO'=InYn*+gcjgJW?,5TF5]hIe'?!Pr0R4$7$bQi`9,n3BM[W,]bJ&7H%*gi@-lBO*[+?Pd;#C!m":HLd$:\+Y5e*_.*VZW@?5jsHe=L1:KJ%?pkLq6:8HGHrjfGlFC/4,[M/YO^*)VP>aO.ol+'EE)Sp_/o)%rj2sZ0WJR0qANOsn6<;2qV/emBF`E3cPW7HoS/E+Wd_/s[(7ti@:MY?Vg\a@UJ.R"NG>hJiC3N5I!Yc*4\utBWD<j0FKqpSo/\9m%E2q_($u4r:E$u!b@MP/YUe$5%iTT_2AF=ga$K3N7R,LB0%$")M9SpU4#mD4uOFcdl"F"69;(e,!%\VV^SdMbb!/U;N!D!ccfTkq1%\.uH]7$UJ%-rU2r(qZGN,4QP@4c0:Ebs_[8BbDXn+SZA;J9ON)ER(C:Y5ft*ACEg_r73EiEXgG!73^+jKZR&=.ob"0cc,_Ic4Ve8%d.&m?m!URnCbQ$sIIt,02qfdHA;FnC3(!+V6<jX8*.7IDJ5<g,T`Ud+RuLdPJe4EX'T*tbqhTlW$itk9Vl;EC@NYnI&?Rk]!k>>?%;pob[39N.(GVQ/XQ)eN$4W"ng-#=\R"LS6E%7[fpD8:)5ec`Yf(+$5Y\`SJ#`'r[Sanb=[7]1oR2r4VfI]NoY4`VCL!p)+V"j7,/%C1&FiYK%>-&5%*a!/jKZHBiUR'I1^$%)BlGmb.umDg)o.KTD>)i8B1Z+^g0niLl?"l(H`l(L.!Q`D$:MVPC]$,VYUgB:8qi:<=8o%$^=K-UWNgX<Uc/Vh;nKW#KKK)IcClVrPuNh2'`EYlVJ':f<O``0dVdBWn9WARfkC8pM&DLkeP4-TBq)Y_-C,cXT[gr1C0n3&!OE:%Ys<XIYXBXRd)Z3/d-R<YBE,ogWa?g/A*V\AajmR.Y[ctMr>hebD2$4oL-d.b^J9X%AN,H;l?5E!EeU6Np`PL^+r;(QqWO6,8-sR"%(cHcu8/tQn"`qg<&c)QI?.$oi&dEDu?kbmQNo1!"&6\?*0&-*RZgaH2$\[9m2q(3S*AO?]ghk?A=<MC2k].%NRW==R?uT<.P(WGf%MA?[-(Hrg8/tCQb>j4\C0J$A.5^b<B!9c&t,d8=`a.].K?l4J62ZuV5[keGjKT25*^eqqZE08+JE3RGlFKk/'%PGBK@OA^'McgUm%"?TWef`f,J_\Toj.$8(6iEU/NR+2>mjns;B`_2\,i!jYA_7OYT$O;:,*Y'GCBQo2um)#F+,tKgY"@RsK(9g&&7I`fIQu!!5r+VXh%lp0eNG\E'PZ*CSm(aaJL/ufmF*,IAi*Gg)#j4QX]Xp@B1_e?d935E&;a#_!;O*Q6Z?Ma`_qAo_>$To2V>9F>[pY#mJ/"FV)7kPT;%Y])dGT]M-N#NW0/=g/Gh"YB/1$<Z5m'l[a2@k;#=a'*EiKFoY>HbjF8`Ja#j(`[3ooVu5e_*:G[nUtr&H!'&\)[Jj+h1,Ym_Z>Z`%bCM4SMPc#1+H0:n)@oRf0(CH@o>(IIjWN)h5R<Ro\<'CoBL391&SqaNm56)l`+)6oHBQ=-E!q=").#\IBuRoGmP?.K,VEghY;,".%TBCbCM_ulP<<O?YFFJ:`_Hge^(55QrB2[ZnMIk62"1'H3,"IL5`81+MFf3;</+>u+Zmsi4AlR\\N3'%F?pg$p)8in8MT"Ae9!c>)%%k;V$L4R/D(;5lr'XF@JNFTIe:=oWQW#AV;qhs6+L.p<o&t[#s#kB]DbG,qW@&^"T`%u?ILm'%iBOHCccsW51=5Pm[:n<sX=X#UI%eTn<,#[)6.)J!\+f,re`#$ERAW#nVJ>bOEhYYc1jE!mZ#fe$\'%C[&fi,F$`+ri3l/AsiIeT??O<$&8`q#CMu^b8"pN[>P,^]Jag%#dFjj;@Hdm_%)lhDcq.U*EYQThi2ii78A44Riu>+/(1Eq6"1n2/(7CeW!A`(L)Lj%E;5A^5-R9de)Im.Bi/oFAlV\Ia=]NY5ZOa[%`e#98^D[j><%pT=%0Np:Lg)"G,VNUM&@WAi"X-%.RMuDRY`L;BJIi/=V-JU"G<AVSKZkYn\%-Wl7Nf-t'H4c/![;/iB`s(l6jRZF%Wa84eKOE\H[OdDpOL`pg70nc17;g%RJ@,K;*;9Nd4?\SqP8&<*d./Vu.%hRK.WCZr,-L!HLPoR:Yb/)$@0PGJi9rb)#4Fo57lVKK%aeF+A+jO0m]*F4(gJW\c^t1JM877E"]mK,f'to&bJ-B)J#pTd/0+c.@MjtC.7U1VNIRKtd=Brd"BO0-bB#cWQKEp<#J_!4.QU!q_%ZWoGi#,?';IH+MADE?0kr(Y7q)Z]fF0MYZcbm<0X@qb@<"Cm*Pin,ai<6(RB-B?hC38"Wkn2PPAgkI0n4h(i;;MF4SACFAZ$Olg+%10$aO>[AP3L_i((B!"$`@3(2LA&,UaA`1/PpJ'$+i1.bj5(!Bs><^>Na7=59BY!6b(;sB?\/rm77^DFMP:ToW-FI5Q;,\l0Q/NEs%WC)q(DDYab73sGukd!c,9/C]7p2uj^;PM[^^(Z@J+.lusEhqBC8-Ob/,npuJ2b?N.7Q-RR3SGf_*IfCDi'\KIKg?F3(p'#T6B>Y!%!;hV2D7HX.^;>dnrRuA*)7:E^-H+QC9\JG*D<tJQB$$2$I_ksn]pY]8REX`-Bu;]66%BEc$h'$?H"LlcY%3Io)>a*QF&#+W193mn%kXFAi+-Van0Gk<Ua?t&&`nhGAlkU'9@(N[&ioW=Df;T";_!R.k-ZdYa=jF448Ie2^0*AD,KpJTkR6#Zo$=0.e3;mfIaXPj+g1IYd%;I)[gBj,!Y^#4,B[P'&?)SSk_;FMb\!S9^W&7jWbU2q4>4FB4*e)f7Sd!=:!p#bk,e!LF+:-4.Sh;@<SR:a4e\egbf-;=:<O(9+9%;kVaAdi$d@9Ig,O2[,HCW?Vq#h2H3^!I;)c4r7&P=0Hbf2UfC_o=i>5`"R+g>iHj^k'god'T[UJg=A.`s"i2Nhe*!m&hP6`YIp1R%dCc<_kuhY.?hE2-9%T`1;n>u.Lo\a6o+e['3k1@m3k9mE^:;0']j5B!N+a[*2X8aM.O0kZP=]D8=ld!I0)@fp.!F57#N&f?LcSK@%Gk=6e4m`4T52dJag*M!d-98Bc;GspO[&'M:80.7Ab:AE4bo9:PT(OD<7do],RqqFYZsN^dP-j%.d'IKOZ3YJ<4WGBkR;N3oFOu(#%U`T5b%D.B8**.oc*^MiJ3X'f2]8QZL3I6*KgV_:f[g4#OP3agSSL&5)ISXTr!(]1RN-.GSi=ba)lke+C`16o[+p?t3m^9ton<VL#%n_V3)o)?X\o.d(1ff.[T;Aj@HCJiB8W9)SCcHDJp1'^&r19bUq3fk]>TidR\b?C4_;Pp$UX+J4>h_bY"H&?1$rntu*D]r&=/Z&Y<%n;XCoRC=fDX64%S9J[4YF<D%CU#:!mA??!dJ^S:1?Xc=oVoFp4c^/5#mn+/ejNPfQ(Gfc+6bURHNQuXXdh1CF+E=2E5&@FAl/E-u%dWoJW]\_J;s)X3,T@<Mcp"nH>^O-SHo\TIB^n2M>X*X4cZ2;/i4%hQJ>ji,8l+I?8R`L`MMn#=s8#5n=N^T4#l?_n]9T$F<4-.`s%28bVj1D13PXJckM--jl.V=r2Lg<!6?EMYukX7Y7O6^<G`lT^S"Q6>G*dl0g!I'7]bWMK:jg(gZNieu+UF6UC5I4E1tH7u6AJ#Y$0%Ll.X&m/pNamWA'm$ac/R)*XrG&m?qZChf2M]st"=jm/&cMie`97-R[;]sdQ>9EaZ9]baaSl;<o)Rt)Wf6)"%IP.J$WBq';p]qF;'%/tMb5X`Ka[cnUuklriOJF.22G_7gWIQitk_>j&dC`>))0SL[qgSbKZm?D!,\Mn's:=)Z.=(:8J0#e#cJ_75#Y45!C3KKC&Kb.c0@%m0q,%J>IUV0?D,']ZH!(SN9S;k.dp7l[Tt(S+GkGE=6HU,B<eF^CF=cfl4K1YMi(XTL3PX8mXbB+;\RkjAh,KP#k<88m]2N=#0X+%C6Ge<$lu3<_W&;YOj6cU)S%@9<&NL`?-*c:Z`Sm2)6r`a*Lm5)V7p3V!A2&@K$*0L44MaL3An4ic`oDu)>>C`O=OXXRa,p)!qNjR%JS1LBLbc,OOJ!oF5(k_['Q2>)F>3FjjO5u!ncI6E3b6Os<Jrl$fhtg4c+M0Icf)AmH(%e[4N0%Nj\<`o2BC\^1*`MB5o9pij\;<k%+rt\O?\!OPmS:bggZm#NjQSt-j\DBt'P3<aO/;di$F@3Xk?XMQ8a&'p"X3<8!<UW2%kSBT].#0(!GJK-f3H*P:E>P]XAOmk[F*FN%I%rX'*CkTbPfB)V\1NMFm^^CN]":s_aIf(D3Y^OVSN.BGNS`CX1a#.pbZ;]WMD^SHGD*eAe5]ilq&`Prl?3)YWRn4&>?'t:fU(X)%+J*En@Qt(3fbWNOiO9F=].LOu!cpQRFehuLiO?5@:o0/+QJ*:KERd%[l\\W43`E0]\b"7l<.u5l/_.51e5?ZmOS,J"F;3PJ*_M;%%)%qS1.Y9/$8g^)$A.dGi]#ao=U=\S0rDi7]GhdPC[nAMK[gqg&]NrGNX#F@.=$:MjcU(5b-"Oga;[;k(O2L6X.Kadu&l0Ne^kHRZ%]f^;/rP6PH1Oe:\<[fMWhnHYRVqn+f<qdo`GA6-pHC+R%c4/UZO5AX[l[pB/C6U-pci![7"6ZY;>pltQ%rT70(]F(HJg3HIYJCP'%D(H#s-_,kHa$o"B*3?qQi9]f+<^^ga"ASL7cXe.-R!?6rQC!?:FW6p4=n<7DOosVd3VlM-pRc_M"Kp,_fV8@ja#2he)X+aI-i1(U%_sArCipbku9Mr`/Cub(!-Pa@oi7%r)eANf",W\dsa7`:)mkkGBI$e5m;o.3jFL"Y$+h`q3kf6Z84sn=919Nc--,cJYBE17Q,*$Kb%$t[;"@o9HtWX1d"FoqBaNd^lW;,(Puh-GMg]p`ge7#?heS%(^@FGiPh2EJ#l=VnXZ]g`7YD[q?;KbQU]U!N+<A5loHe$6PH:o(3]%#G%;IKLJTWj=2;sX;XL(eV94645j-kjsR`9_s:fADMjN)&Kq77?e7'/\8T\o0J8IUBhi"0_InQhTU6,7KgbhK*Y$$j:"3R&.,"r(%'tl;0(;2P-(ZPd8aSYI1N*\jIPDd=mLJ4$oFPigN_eBbrk(*D:CX!G-LL,Uk6Z6J^b'W*soNjSd+7lb%T"n&A(3e1egR&Z#=7Q2g%\(l@n]-#D=J2ms(9_e'63(I6'GRZ9_eA;hueq)fBWV(2>:(T5B.`$"8ftE&W/m^mO!GkJp&gE]K.)iVclXKcuSE>V:1MSU!6lSFj%k_0U(H>.JMcG]$YDXQrjiWg"F$M2F[53L1.ZoUuFUtuJdW)(.E>c@E)oA=?=Nq`tQ)LR6a)f(.Q078J!07Efo37\G;Fs;$nd*CZ/%S9BR-[;jp6>49G0>I2^Ms1QG2Ll^&$E(Y?oMcS[BVl'4:WVr3F=CDU3'im[7C?A;rh9Hn9m3Kt;Ao'JC*P+o[XQR@Mi#Hb1[0iG9%<WD'-Dr9/:%2l,;ZY%9[=L6)VQggcC?:22[[B#:)Smq.U\(`4c7K:%*iJ8#nCN)%R)iIJJ$`Bcodcp[sM:]f'r+=]WcC=2t5Q((p%hJJ#rnJc<MACe9D%M$#BN^O</G,Y@J4'Y%V*H2RA3Lo_WhJEK;MFb/X:I$2[!S8(T[KFih/DGa-F-H"L^R+=!-)@uipSQQ?(/4=\%5+'u]0&#bN"@miq<^RG6g.2oU-\@$&a$eqA*'A(ng7Ga*,HeQ.G./KR-K]2-+D40L*U:/f%_'7T?qQAg45`Y%[N0;qk\`K?&ok?#%E/?I,%fUh.%T,Q-HW4C!I;6VUs6,,-`os5s:8;c=ghhh>K!ga)UeV%9XcGd3a&K]8->2!Ae>/2i,A[TTgifV:IHtc5W26)E#Mu/c%&2tYL+iW+@MYX7JS@uN%[%n>I,o7;`'0.pY#6MOK?(4c7EW'4pK9-l"K.:PC5H'F)lj%[-RJ-*?FGfoK>-]50c5,PpaO%eOn0qN&%K.,EiILr>=c?u7Af>ls"Yof8OFNrSQfA(ch]5GCG_6nb/"E#6iTSVLsBg9,3nJYXLGoKC]GqWEqGqWI[q)F[.FNlq5T]R:>d<,72%&l&66O_E<3Ld_-2esdm:'!6m"M:P.jQ1Z?"BtXpi5N_!?5:i5dqK_RieG!(eeF(dP2sigtJQW4$.fB$gg(,?EXG.9VCa"WcFhm+,%pWpfaR\>N8&1)]3.X1bu2<!9(GJUB`n"ThWSE@o&gCI$`DdsC%Hf9YM?94XL1\(=/)\\(23&Sl$olD:t_SNUGXr`'Y2Eq[Jll$qn%.Ns<NQ+<LaC#N`B1gBa!/bf=!+epOM4o&3(VN=iqIo;sjIJqh%&/mMCKB!s^,\I`_11$gMCkm$LIOGh@5DMS;/53k=q#5,3G.+>3%KN21G:VhjaPc6tKl?p=1bE057+Ef.a\oLF=X;6Sd,0h..'WD0<p/1ScZ]/7*]F!Z00c]Gnn9g-_On1Y2[CRc^d=Q@<QX+,Y@.]jM%n0WmaV;f?-2NEdE.?=<,1C<0?0SYdn/.#+L&/cu%:KO'LAekMJ[88T-YA%/GZPD3g\6Id2rUc2Od>FF#UA>Rhd)/F%,tVnUr_p.V%iu4nIF-T:h1mk@^R,rRL%lQG0[Eu$'SF><n`'[lc1r:njQ/%LG+MJ!9+,f\/o#KWqR#L';R.0:`0X1[fQpcegBUBoPm*.5(^eKHd%h[PdS57Ea\B>\8E*7R5lZ=,N6RpgpH_V$WRIQn7);/_2GV]UrU\#3XI-"I\-pLZ7X(<ik95+"Hm0)G%sBpcgM]nZK'Qm<#A-hb/\%P"9tiK;W-ui=EiE&[r+Mh`&G`lqbN0lo2iCl?bE_DM'0Qh@5[,3]Free>H_1g>+HnIbtPIs1Ji)-m>'&.PRV@2.:)cFMc7^kbS5B%Sq]fFdqdV)L.S,'F^hs%-:-k9<4kCAk7Q2\q_P1%fhXnnZ/:-O@t+\?`dSG53'2CR+L.7nn"PKS'VYei3i"YNQ1-D.a<E[TIQrE&%A'7.Icmf8X`qBgUJ2TEd&_-FrCrn*Q+BJj]@Clb%;B&*Fm2jaogF]@d`pc6<?[-<a6*4_Q.6e9pA#nE$2',:'2/p?!Ee!#upj!+u%_;P"Z&WJ2OqDSkU/M2U.XJUl5ed#S'IX_db)tM%IDg;Y9pY%[f?<n@IjhZ>f\*VPg4i]/aj7i*9/\=E1)X?.f]OZ'TU>C=A0%=AN%mHIhM,pWKUh7&p.0[F_1_A(tmV>i`N^?$32f<F.\bDB9VMuE'J%Ve5jj69cSK&;!cNjs8lnk-XR--j^lm./Fba"@n_p[Rl-]1hl)%CA'54OW<bt]5QAj3R,pg[i?^<WuEp`?Bj.tcZ&Nm4NGi<s*["Xb:u\o@DD]*':lcPgYK=YFFMHPlXOg]ZYu7GcBAa9htL(,<[>&^%<TZ6?ED!9posd7lQ""WhXN<2<qb<=XP&r]0cq);!4-d36A7j0Q*3um-oJrd_hfW`pH80=V*AY"Z<4W'q::JA:T3?B)`g,:5V/5hD%['nN<!;]X#>6Bmhl<UmB2"T#B]69MIJ"N4.IYU-M'YJs$]`N.On^-,[a&?<.V;u&%=j+F<<6.LeEQhcj'hWM]>+&/TO88ITV?_XT%2rpq_Y]RQY7XEXc`&+aSO==tm(R(SoZN9]r_RG7>Q.3FgQg&+1$.=-4KD<b!H@=)l_]d8m7sC"N3?u/3!G%fZ]6&6h1F5cd8dE,A%5;tBk\U8H9C&k:IEuX:sbd/:;1!fIVC]Y[7Bej^P:QpC`5L"R9G6]u3Q9E`Uat]\JWIl,^)=!lWjh,r>F$i7LoBrMgGE\d_O6?m]%X\_T=DJC?<h6k&%d!TS_JF9E\&:6sdFi.<,9,7@/V$9SKlR-^:e\Q_WqIB:Hd,MrmaRLtA^8jNV&0/sOp>eL",9B>qmQoq&lp:ho%i6@SL6R8IS=7dY.=t_74r,saQ.M+-dmX@Pp#sR_jN^V$LE#mq>FsTJ.gjP$D+j$.nAX'lbM5*]&e=/ZWGhH>%M;-j]R#<L=PC8=i%p$Pf/$<UV'Z@?mFlE-B==(FLrRq(u>e1NAsY!n@2q%b8(Z?)-;Aaa*pGA4u+s5GM;%`Y/P8LsDp@\f735"=tbfu]U/0L<h*Lag+7%)$)i>NI\=4&U]jLNU_Ak)KV$K^$KT8SMta;\MO+%!SeZTjAroYZ94-J/XKrug\9l'rX/T>Y9VNlA<iFpmjb@Q=Xn3Oq5l+sDKeb]%*7k?7$"X_CW&CN515->GeF+k;DPdlp:iQdNNZn;-5P.rdiQD!HPAk)]'utqJqC55OAUP;s=P`UL#Ele>AP>OO3a@S:mC9#2I;rOL%3ZGm6Ts+<;]b2QE2j:1O4UH^d<ti^EZgsfki[t6-S<R$/6:JikS=?gA95WG9Za*cs?!5.3P,tbAL+/o\PZ=6rc,qN!p-4elj*W8U%3-TIC<ZO`RC6UFV0e./`1,\-=VYA%EdHGBHqhMHq6hX-(-JhRnS+S'ul^\LE5:>[f3G/jM,p,T+(F=RfT^8Pon*Hr_O(QSH'/',l%7qJoo]D45^R4i6=0j!>6`Oq&,+aP*&,Nanh*DHM=Zi$)!ioRBimBXcqW<VfDb?``>IT[\6o#>&QH"4XjN0,A80qsY_gN%E_kWWmE%b<24@A4gU<JZVL8*Mt)AoM,sh13DVr.oR#PUsK=.&^UUVe"dci))0La83GMCcC9LXa2LBU!"F$%VQrG;=7Oo;;""U*CA4QGlK/r$%kI_(T+cIGA@P$9Oe@Ye(YGOr<KQeStDFlX@+#TDs(RqQ>Z?+`m%so]:]q#B"AjDPZlGjt/%?+4Yj5WI-dhGJ_&`3L>7G?52mh*^P%h$<lc9n1M%"K!r)%e"!d)"i'c9SbE#'B"jt&Y*JsR"02GU,S+?W1%0Sr,skZE)b7uaT8/T+GXJ>.\Z!]9S@X&XmCAr@J;RJRXL%&%;nRoR$iQH.:F+-M$.*)q)M554cGdM;7&HCQ[bV8V>>5+`^@/7k8b">mG&q"<YKs':`C$5]&pHMEjPK.R7*ANu/MFY/]Xtt-UL(_0%VjBO>ql%@hJnSb1%FGpB/>BI:k*dR2h,g2kfOQ"HDg?6BSDC5)DYQYM"5'4eo,+o;@T;l0'&C2N6!Neo;#`OC:T&J9:u!QA:ak#2%Mor5o[TW3Ka%kuMn^slYYWmR!Z0-H[VA!&V9503"\7-$j%:P[%blt,XVH4Z,?*@F:b>0^X#<]TGI2R?4"5'5PoJP^D,i?k-T'>C.%$-IR<KD*XeH$rH@Dg/)1q^kVB^0;rWER/]kq5orS/PjR.OY@141>g>3WR&bZ5aGuu7qTXoWK55oH3Z-,-M;B7'>W'PWV6dm8<.o'%9^9Z`cW/!OJblnKRG2_VU->`.Y0I7@EUbj))jMC%bG7<TIP-4A=3JK:ET"_iWTD#QE@C1)qRHN]p7@RA]jCd$Z]s,uWR!)fUr:M5%WVp_&e;m7qI$*r2RFLc29H6Th8X(rFTK[7Fk(_Zin@lDGNQqatE>`j-3@];Z#L.A^^-"$$0&f)Ckk-rK:H(<VmrZ_uTXu/V*d9Ph%4dKe+-X8h&?M&P+]]b4Pgb#)>82%-d_i)7_EW:5GmS<D#4IkV!SE*)Ajl&V2jl&V2jhlp]M[YO-XHPUJ<0DBu0paRhN$uZ)PF/5F%$b_j]$b_k<$U'L4$/MZraGbmsi_ZpU+H7Gn8KA?-K^T6qlNB]an((&N&*q.M93<QW6%sFoA_]=4]f56[SU4Hd3*^d9:2gBpAt@kU%jkVtsm;AKEqQN`a+Rm90!HbYCl?Tj6nG?XbJ/.O]aB.G7NI:XV+/[+<kkMAWd,DTZJk'Nned7#SbrVis_`Fda@@c=mmEI[poF7T\%X:q+`]ic_3#!5s83)P%/:?m(+-Zsf=-a@m@`P-Q^V"P>b"EJcj-fC>\FlJ>=oso0^_&74T,</&&]S0h/+RLC5!ug@\9PojK$lJ[M%S,nk,1K4?PE5mAtE$bpFltMO=$t`kBo&'ilA-HK4VK29elg5KOH`Tbr,DY.TNpi$!E+[4lP!i[sb0$O<N!i4$mOp:5_3n85D-aX/%N5#pqJi!*OFTc>"=LisC&C+dC@ZHu)i63480iX3\E!Bgt_&;T(@k/uf;p-CFj'#D#Ytp#XB;11eB:P,2ao$L)#+Od-3!7QK$dPOS%9G!g$pH&)"qMNN_;EePGj;KbEKPA'=B)Hk1c(lQ"H+2E7IQq9tB]^)"_/n>>fF4.T*&GWI*(mIR?a]@KL&;\^9sGRc\@LH<MuK/5%o)/1S_";QSJ9lQG5`UNndJLf_lH^u]5aDT'8%*sEj3$Z+[W`*m4>*`;GZmAmIVna]C(C\cHsBo^A^'Ru3nuP`mC;[!I<"Rb4Dq@b%i<2"*(6B-GRn;,8Sch?mX,5p3=o#:PHMaps*"'<Q5;'48]r)%`n(1YrL78?g)^Z.niar4NrGDXqO/o@LK"D1Cb/4:$+B^s,`iP3j%\BgT_EoY.9imphGeq#ZLJ0&o<(JVQ96oXF)Ip?bp`.(P/lZ:@CZ'jH5@Pb^T@l(gU@l(e_@l(e_@Pc;I&^ErFk8q\mj"Z\Q+0h6a%O9-rGhd\IU5@QE4QkZ%Sm1u2Um1GiPm3=O<gH@G.jGh!_?_=Tk<5qJWm]i2:T!=^?*jM-im]i0:RO:MhB3>2LS(hW^La8f%*bD9L%*g%HX^\.Mf?/6c6LDMk^-V'KCNe6jkXnK.,/qE[sdlN&O4\Am=\D(2'iDA]j!TLfIa"Y-&9*-.i@RM))^tHj>i!Wrj`$!#D@-1:T%kHS-*ZhAPt!3T,RFOY?dA2lhuVnUsR]G*D&b728L+.3\113HF`<c,UPl<Vfp993;HLFlp\^+?u<LQ5VNJCY#k1?_UdX4kr:&)O1X%>g,^mRjY-c3u&Oo+BTQ&i]%qD@UeY2b-K]$+&"\Cca:lJ\C#XqP*d`0gN0-)Kbd'-#-*ija/H+Z=.h1VTXZ]^"tZCnBtVV4UT#lN%6>\JoD(K>!PJO-PY7b`eO4g+X;:k[l<V5"e.^H\5fJ[4A..0iDdC!*&\/7hSVO&/XAECeuC/"QXDc[ssHKs'mf<J5&@K`oo\\:F+%c\ALp]*!;s/a.`A2b7!Ajp^K=XWn1!lo'>q"gi+4R<G_If]b/+[?oQdSQH'5_N>5Y_`Nu's%"=<:Wq@`S&JZJN#NdaCn_:%Chmg0%44q"1I*pbnp_%c>1s*`.cdTlAH"-ScD*amD9ZV&D,6SFcDV?`1>S[CjT_G?Xr<dtmnWj4qTs7um&"^>K<M#[jMW79DM]eQH=o=j5%EBMh^UC,ToUR@re7TWh&NR#O3pjgd\G\AXn1&Y^6`:6_u*eK=,\;qd/lTc@e5iWp+1TG[UM/K"Vog]uTW;iB]O#YuoAg9DRU=B].%f=3BM[T#!m_7A,40fmqP(,.u4Gci-7-)Nn1,>5k3DR^;t*KAl6:"qIa(M,^N(:CY@Qs0%lS9Mq^FO=(ndVo7+O#UGW`>_Eko?IJM%]t6T-kPVtVVsH4"=+9tW?XV"DJ(^!5fWF%P[XJp9Uj]q+nYO%7eW0qMrpH-MbNul:a=F0:[YYg)*P"!kCt7tr'CtfU^ECM`*PHr]%9.2PYmO&&>C9'\Dq&R:%m`bGjX$'qbM8WId]RP<!U339QhiqpHJYZ.JehiQ7ImK#3mgo8B6R\0H*.jc`KeJ9EE:"RqAqu/W0?';=%2>/pTIU>fhlifR)4q(cl6b6mq"XVm-SPi6BIaS&'Id8HQ/XJ_OBqm%kka&N#[;i=)]cO3jh9r!D0E&A7TaqRA()pU2<s<h"[dcZU%]i>!%:T<oCNN^O@;;F5$\P6h"g_F<9p7&tH5Z\7(@auT!XYu]:hMXgNp$t9c&A8`$J8_#n[e\K93@i@h,AX`Mc@7M)OS./S]r=XE%&#=%+K?"KOIdcLP-^*cl5\*LIM=+kS3TfuYb''3/PL!/me'X*/AV(VP)BF,Xr;&Vs4:]%HII.DeZ2r+p`_-Y`\O&;glEiWrHtpTN%(E^+-:&VLUob+^WWGRQLY>0;LI%:$=mj`6Sf&5?Np/3]sI*;^%\?_TP,Uc..>>VGm?_Ni9p6s<UI"B_$30E*ZY7TPeCuY`YH4-=E%@#j\J,N9\K:M>f;=41#0RjAu\eiDGuYL/ti,&lSWon:lX;c(N]?S3eW262@q]MB\\@+??*k6hD$+'P(Lhe=[eSO_l[E(iE=*)IP&%hQT$&="$oT([Yl6$De9,VEV#(#e?"le->!S>OhQ9RFJ;'FooI-j!mKE46Z%`@/TAZX-(ee$9eDpAuSNs]TZ6^rdo>TN[%C6MsNQE%P_:oher5b.]AcE:7EG]9,ooTF7IG\4^-YJ;5ejsM-]Y:INhoRe+gAnn1$kr8l)d,]'-koH0+`BX*_4'T)26De>WOb!e(N[<(p&S_%ea7`CU+!KOQ,*PHo3FSFjXm;lp3)W(0[:pQ6=R_`H60&EZ,2Yc7IMMlU)Dc3JD)\#_AfP#:Z,3%a!dtL-3R\JEmY>oh;<7ajSVSd%LK@Y1?PfF1*P-@i)fuDG!VqH(?pj;,1%C]5iIdkB8crhY325-'1="GS>cXq=\;8];^djKFI:$Q)-[:urg*a83h4@i)2fHckJkL3V%:]F]UYiqjb7mSe;+Y7s@U[Y\&?PU'+n^8.80u#Ih"5jg?XL:jE1O-Jin_jL+Mj61aOa?C)FtqV/"4\BU\?T9L!j,6!f1aZo6l0\A%;<B'7ZWd,D(Tn%7Usj<5V$\h38Hn5)%erc4l__>ln#N<Yo<BqW)1Ef&:Hp!b2q5i%&$t]%Fc8FP59tG#aFAFMJn(]AP-qfGVmC:V%_-G2><[Bia6J]5#@D*TL7;E]b@*A_ZDS:HR.MN`6Km6V;A\R1U#dkL-aS08K=ZO*s5a`ik,K3YnY(_<oNt9D^[gubWmmi_JX4]@O%+!q$9AiBHuXj!N!eUm:^:(;`VqPKd<d9P/5pTf+6()dGLqAeDi)tZXg1a!$*8=[!Gg>L9[p$8s()l`VuAW&Yo;B"[Z<t'K:RnaQX%e$'=j.6kD6N`]!);1(NZqmO?FYofqE!_1q*!:\CDBi%JlR>^t>Pe)FtH$>A1PZ5/[O+cP"1j"D-DiKm2Kh^%F(r((::X9(gW'Rb&%-(Q5q.YN!`>?l>r]??[@bEsZU1=16BoH(Y3K\pgB?/ig)BKft>>W&C@Z8&$2%io(hH328"VHd':bDD/a9^s5>_:b/!GQD&6E%^Pu%iW?^)2&4K@8$Q1>Ua$Fda6+/FbV%G.dT@8b+WYQ7U<qN:GQ'R3f[CheN:$>$Q,/[XRfMk+(qb9=QlIs:!oY)'mTPA,7:hA"A1+V7%Mja\*D<+'#kq>ce+O2KI#K@.9a7AtrMh,7Ec#VMT/r#]3H%LmP]9K2V!e^YYFm]9DDU2$;*M^hZ2]_/"aT8PpD);iP%&\'.ThQ2J%-Q@7JLo%s+'>Wc)F>HmO(*CM&Yt(JgY^n'MGhc*_f/_!qhN]7@5'VAU6fRrqEjJK86Q8o+pu\+1H#Y8t/";jQALUOLo%@FO;kfU.%X!Xi[iEXP&i*7>$8S:Z[!.$bo)A(`$Kk2M0Y-E%&:f%o[nf;I3?MC[K%`sUANO;]*0qWgL:!k;aBdt>JYKAF<ZNaeG-`3FO'IWA)%ds7\P=737f_>="m[>Y6?=&.F#Lrj$$)BV_/WLJ?jrjdo968I)F>e9b,%8!1_1)RbmpM]UUYk5c<Jd[2)J[\j&*(V+p$I7u32!p6Z%3+hgh=j8r/YYY(VUootM7RC#;/uY0^'kKFm7^FV+a46A+CN^KjA=g(u\K7oIks]r%4o>c:_*q5O$@K6O+JOY)&8aL]:/f]mHT6Cs%ZH?-?Q8LH!7C?uiSR(#Nm(pi_JO.@*K6V8sKAceM4BbQm2WuAm%N!0p?\/e:$a?]7YUOqT\F'7i,m>A,D7CFKJr_8_*t!IO9Yh7\%'mp-4D@/Qo(_6eBJIZDI;@)d+)]g&*1Yk80Hott4!_/UJ;"4!3iBtHEqd`jGa"<OFJreYQ2[(;t9lCA&m]u=&;ciI6"XttsW:ZeA%QgmoAnYGMG_(RbtES_CWS9):kp`S]n_1tDVY2COROqi@4)R=t`^R'Pe&1V_!JF>&$g5@kLEDuB&[U*#(0nVCg+/=*0pinhT/,4L)%G#&H/*cucXpd&[snA1Jp_1+4T./7A$./82&1o\`ePFI/bVf8toNujdG:T?E!,tCT8IN#*PYDDLAc\O@DU#7__G>n!V]X3?D&+\Qk%r3XgU_1.L6r=+YY@W8[&eBOa[^CLUL-4WZ="A-fWQ4H+omf=M/%Jbk08]=X<0`P+7G+.>9Dt<Ut52)"#\9-uYfumWXnY$%XE)GVL%Td2]q>MtuD`pVjZ9,#dF3%:VhC`%!AJ]6@MlI9gJQ>$ud)hOZ,G3b[p@f.:\`<?#X3KD/]OeM$I8MB+G0kLpDRE+Oa@o4%9%aucL%P!!@&Bj9cq/fbK.Xe[T-<Q72?q>(gf]%?NWE\8%o:FsLN(G34'q0&OdT1AF,HS9)B'OCmFV.cA5CpD9**I*pTE)FDT\QeWFnOe(n%CQ,H@+/]fS:4csR8%%q%=sQ)Rb.$6tjt"aZ/g.%K+im^NXAK4%3NT;qk@2(R"i1"e9m3SX0@AMc_`je?WdWBtN%Y9d4;6s%]":pG%-SMn78mn7k)Lg<pA!1dXN<,LPSMDtWX@F?/0+\Z3[`fNET_+p4ee]aEC]0Cu!GA^l[2Zra2%eBpm(`Lcs7-!P$ga'='A:g(r(.O1%94K&?iMAI5\Vqh$o?]gHTSaU#@)d,>)AdGrVVQL)L>'1Pd91DW]KI&.Ro"l6QoO8`>nt/b`cqOGJ5U\MmC*S(T%WauQ%@49"^oZr%D\t@1[E8;p^e&Qh"45>'aIUGeckhT6oQrZsIf]bUHu$]NlY?Cp?(W38n\oEK)#t-V/cir01%.l-6/)'o.)gfrXZiH(g]2*3&,YJG%<<9@Xn7Z8,]j:%(CG'T9f]qB'DD(%1Mu`4PB;[R/ls-%g/3`4gANMeW%VWR9Vn!4K*OQRkkJ=(":Y)AAFtd.RM0,K!8:M9+lb4JC%cp[t/W%.n=dM6+RDNLeQW/0Ck-Yc2Y+/`?cYLLk^M%k]3$\38%%/FcF2ST-oO6BLCUc\ZAJC>2c!8%]#cpte;WQ:on>UB],$1%RU%Q5(/pX)[m`V?!Q9a.$8h(Vh.*J;S!/0;/'bcCMQOE,joh.-OkHP_'9(\T7hfQiN58$"*nel7o57FTMR.!GJJ9iYOg@?_c7L#d2/[%SUn-]]?rK*!!Nk5F-FAf!I[A@OiqPHND,7tB4.+WOWa$>!;`iUa:L"TU#/3e@5N)J!\1kH$l0;+`M)_fE6h@D`K9e>2#mYUp-"D.%=L@bVV#NE)O3C,Tcs+jS\a-:C0.!(H9EpS>N2q/h"Z;sQo;"p3:.h_=KK0#`3W._d>oCBf?.(j)K!p2Kg495^`IS"[=(fe\Ch8,\%3m'l)LX^Ku?B[T(Lk;A\PEW5$MBcf7Vl2'/D"s!Wk.IXifj;I.F1[OZ4W=AM]U?i)RnXl)IFg=Vf^GC&/LBpTikQb0Vt98nX\Z'W%HJ0[!MA'6-@e!+'JSQE2*+Jim)M#qhDpGCij)MY+cVot=`P7bH\Mj(!O5m),I1PO9W'OIdc\g<I>!,5'Q?>[I*/MC)5?N@8jk='$%-=13eTK8*K`S301+b0T7q:Mh6b;>XuL`LSN57]=L!1LDj6c6D75\-PQ_jGG"U&`:/@i5"OnauL$Qna"1gf=YBo'jPeVeq[f0>clP%l8A*n[?:ODi;b"FL0k")K(E66,kM8fd6FKg#6:9b[1#ld^^u,/-P[osh?&!:U4XqF<d--\B\\1$]QfP>3q=tK``j#HI6b;GL#8A?%G13n1I^]u[MucCRCu>f&(+n>6fa39<ea`]\!]o<fWoolg5E.;Iaf;l*%[R1QGnSWHY)ahPi$3jII0!T;!*j,@)EW!'G=@+dT:L%B%rMBW'p;Im9\!WA.;2=!B\.qXH3uV/76'QAe\O-D5*60u$P2(Vp<Snr>de8!)7Uk8*:T,^RjuqFFBS[GDXF!NG3JF0P;s56B8"qdp%X2'dnB'9dj\>ZdN0qDS'3dl)JSh?h$.eF?>I)eM#C>U[N*m"<%8M\\HG7@dk<Q-FWeWpdk%P%Ke12lTVpf;S<B!Nr"fV<BK>QI+-%nIhuD&mRI?M(E(CO>[4/Mto0?RodQ\(h@]5lT9pq-[(8Wa(j&k[a2U9['Y=eMInn]#55t/Jo/uTZ5Ke)aZ]-t:s*KbUdDhT#r(<1%WKt956'qFoFr;5]1CWA&!J;$NqE=JX`RGA+W\o.FTh>*%]tm0e%@pp4qrn4J9a[Q=/c^G%%.)'>8HS,51NfLN*q[?K(HM/8fEODi%:("eJdr!>=>DCM-%oR`&d1nu:%r$i8m=,%RL[dB6G'Ni\`G^d]*hD9O$NO#h##l(W&l/$B3hVP4Qf^%cb5afI4&.:@<=9/u,DIZK%aXA7>5JcRl2c0Xb=b_>=&20OdLdC3rg\QH9Gq4<uIhnO9_2CLFXOB^^L[t(2e&>'RYRK#iHVT1H@:e@o!<>&2!R_u-Q76HF3rnXU%CInu-4E#qGQZ<__AY2qKX+S]ae:$Au.HAPO%GKPC7d`/n0Y>AEW6-qr:_3V%B9(fbHO6WNp1/bKJ*<[fm_Vj_G<(EuGT"tr>R"&b%c/,<W`Co2KW/<O2J4WYXf8NSeiXL;bVg7!9a`'>4rMYk\3kApR?7>mI'WGc&3$A'4mk@;f+AnUldjckGaU!i&$'a]P:_5_NV8nas%jjF\X`lLD(K-N[aW+)ra-hmY#AN!XG]OIZo7@+$%M6S8+\gCmp_[1c5H:s$?)J9'L%6+\?p[*'["*n?SR1gMj49ot&S^:_#.5A7/%19[p5mnWF"M4(dI+fesGiU,%(M@3Y[N7NIkg?+\^<%i#'%Sh+:!U@oNJ:guK+%b:1C_1e\(iQL!-^-L.RK.'.`oQuPRMlsY!8dmo%Ym9&B.SN16!.Rrj5s3'1MK(*3g8a3IXde=FGdIX'AURNt,B4]H$lEL.V1%`p^/\H;9+mociGtTS?dVM\4*1]NG6R@m#OkHM^H\'Y%[S2ZoZQ'hErFhPSB-1!Q!Q8@g;JR9LLolXs0Vkgn7F@KQUf.WcfFSZdYus`ZF3*[*mCPnb"GFN!B]tc>"#L4I'Q%0,71:rio_#<H%l6D/3'-([%a/O(Mf;p:j%B"H+jo=C\i6S8+<18nYOI^\p6jbA9@*X=+W8Ih"?/!h<VU$luK]Zn_]npB<H#XUI%Z><KbT.9Zr'>_N%"XU%t86o8*[Z0N#2:-uXW_6;\ea68B0I7@YD)fUB+(?.i8VslYL^6AElbI'M(]o:':HfLdf@"jYTFPNA6Acf/X@5q(%'u-Qd&%<J%,Y/7fJ6`Z"rMXJ!JR7irG'NIZ+6JC6<JF9AfPY3C#1u<`k,_K!T86Ei@K;pfS<(9ne>c3n6k15[BGo8Lm]2XHPXb>>rb<>F]hiU)%LKtHs`5L*J!0qVRj2+Cm>uVHCjpe/Tp!1MBUUtlbnOI2bf*>791Qp8uH%b1IJ787t$?!_7iX>gbe!&dM'K01+Burp#@j3CqCV&9/%<"K+$?+N`7>]F?[*O,e`BDe@liCYmn6YFiCXZKfHUoSRXW^EJk'PBZje*2a2[3m"^EP;FEkY$dhZJ01nMkrC7V;)BJR!Hq[<h#4.%kE#lf7J\Q.CTceG93O+br#BQfc,e2:-`)+eG+CW:<13Q/.naTj!SdIjT_%]unH;O2`di'[,h'1>SaOiq$8kbLd@td^3<?9IB1Rrg%/KY)fB)nE[Gh8S8dMto.:+]+i#1+*8M!_N_isu;SNPIN[.1'E\TYV(P.'^9oC$EroWn*mbW]P4<E2h1L[qj:tZ0gU/R`BHWk\a_Q%<<iMER<gLI3I&i7BBKcVSWOE)V*B*8Ue'O(T1aC2G$m4MB?s3e8hcI-ocreJbk'G!et&iFU%;o#BX,l?aiL8>@fePe\>_R1N4A;G%!RmSqe3!c$e`+.rqFhukl-@fh=tPk@Q&%+CcWJ[V(ECS=[23f5G$_!V-fs%E22WLaeTNS$)6(F6bpo`kc38peS7Jm(kI\*M4iK?c%+\6k39\RBOs76`JBq9feM065p0J86?V[cCskc)^LK_<$YNNd4'(aTGq`I9Tg3cpqENqb>L)5?@0A*27sgE'd:Ae8c-:(73X6Af>!%LG-M*\P,r3>6/^h-/:Z5A3<)["Yu)DXhX=d\sIr,-RonIq#%fHBb8m7]lhI?fD929rrm'nVU(N42?CNH/kBU_1;G-])<eN6fT91u%f;TA`@jbK6Pb#01m-NfZAU#maK%JN_>GV>/Z'^<^'+8hFqV^,[-S(CqgS(QlZ4!/XB_FU_/I4DfY^7#`'UWc].BW!KfAaTr?JA2p%9P&H;OAj,g8./hn"8dmte-1iV5-e@<nQN087uQ/-BRH/5Y,baG$3j8pn-I]b$EsOaNa!%7)Y=fpp\`]q4,#ht4`nOM5<Ib!,(q8\%kep:04tRbF>lZ)sp5N'N43t78G)]7P\OdGd03`5UZ19:f>H:md$UBh]E`gnm6ZHq>BIOjo*NsW$6kHPG6Q=GoS7^'Ak4^JEi0ml%%%es101!-(%XSB=`q<_sFim(T\iGEb6Baq',3-?:N4h,_eK8[L&Kbb4N"@t0!7WI37oqG5KY*ROI+44Tb1KhtR_otYG5aPUCQsAoq%BABId*QhS+KHpKZ@OZ\H8VF73'9(N\6X*o?gYAOj"U#X\2o\6k-Y4*j3]$J?@Wk3<=-9?nO.f6+&&qZT]JODE**,.Td$i7L47I1L%ZP14$7E@Qql_`SKJ`G,;`.sXZBse*eFqmLdUhVfdZh^rpe>(&]mnJ2C4seoQ$;;cW;;)S[1@Wjogem2Op24kCl6'/H)Y2Eb$Q-l/%@XgoaI#/:R>9I)KiCAOHkp#f";!?4IO#$/GFip^FFf+,EU(AUWl%_A_mF7+.p5#\L*-l1M),i2!B<Kg(J:CM]VZ-drmM`6(Sj;1t%O5M%,qa>=MHQ],5\'0VEb!#GS,6PtH]4pQe5(6;9`FKji+2-rI8]R6bb6GS-1N,:&_cPWod`2*$IR,2)Q!j$Y<!-^OXc:&u/m'Tl%ki2H`6)_F>HqH--YIL%:qQCqujJ_)&)t`(L(n&,X*Ba*SVp.`i^KI.<9I35^W'EaC%4j!/$]E0mi+!hd.7:"GB"4^k_eE!bir!pK%`:Xl8YH"mlI6f&q>^Z2RYme(l^ZY&jlg6Xe0usJt;?q\``'<T1"*J-sV^_T#=2[0WCmI8I*]4It>C4>oj4)2Y1L/fkhcLtXQF7s;%jb5?EPsYj6qc"K;2WVpG;]4]pp[uL)`\g8@V$KHu71[+R2f=b5r'GXO^=c_RI(C;-_c,Oa"4ui%CCDHo2Csj3=2[+/MT`a7rlrFs%oUeBq!aX4k,6]1^+GI<d*iqV]a&<)6`f($paOo1#dRA<e%/Fh)S,7Ps(_R=W@;hYh;S27l#!XMPJ@&$,:7"iUDZ7^l+D9[?fQH'O%Vpp?W^EJiFdb`WHYrc4dnEN"(^*0]_&lP,o*Y):_*5eAgONsQlWpNdRb83@8"@\[M!L;k\07<P_;u_8oE%7]5.P]j.Co;/T%nhG%%rMI_aI8Pu<:NL;QP6ViEb4tkP;2SCsD?'9]%Q;gFa;]9Kr47uJ-k5'U[R'=H%9mBOQJDt_YYC&%H&pEu:M06P2qqri144Z`UT=N4%e)St[\?1n%&2!/_.,?bO^%T5g1Xe7o3#]Q$[T7i#UeC3]#4]2=GL=kGi6Ok&7PE]RJdA&7jcDnNio!d^bp>%TX?mEo-t2qdUP>dY%=VP%D'r==O0'f#ke(i+O+*o1:2)iVigLYmX@4&?Zd]cpDHM!N6%iZT5nD73&1N(f`3)19&Zfgl3CVo"**0uKqM^#1[YZ\Nj:gaE!%i)7D=$(`P0P^5#E\X!e^nbO*Tq[;CbXDj&=(S``Kg<YJg-p"'&iohOWSrmf^phq-'_gsN>VA7dpq;G-^3OpYu08qEM"5O`/PmW_(%>B[u=n.%HnT\QloPM(K[=4Y/?Aj<\XnL?CW\4[k(YV:`9CRW"F(kTje'pqJ@;jZ^1Ra.5si)Rj,8NkH+\D%\UaAl#&qOOPK)dZJ8%pZFk0`\OII9j^GI9?J+spdFsmJ6:tk:78Oq:RT".fK>^r?>%mu29k"#"IV0I8)gW_?$.UF6dJhj*eI%9=*p4Lq`n$"m$[(73BW\Z%*b+;oFm-SgqA7#]&]8WIq>s,*;^AJ'q)G_-/>FG7!L`/@A]K]p2,?K!=I_pVAX=s\+Ze/uamW,)aW8))ZT^tX@2qHtL1uVXqg:td%@:\pA4VTE;-g43)0I^Z'.Q,CO!Q$d<M921UgUbHpa=gdp&:#qI*ZlTCV_;;o)m[gX46oPC`(F[_-#JAp.WEIs`UsLReHPg!dDRFf%q5-ZgGO9OE=RtsS_)"#+.(W`]O7dOQ"0oc,ML']P0b\J(041@uXulMpD](!@jB3Nh;9KBh:OD4,dgjZlVsMn#0D`oAoIWhd[$5I2%QVWNgqsP=69M4t[,t*42Fm!1;'pH/cK>JacGB"Bs<Ot9nnN/S=5aEfYPg&hO@\O"gpY/D.:5FC"XDa`Pn;!1h*fU)TQlQf&r'Yk2%=d!MJWW9W_2Tc"7kgm+tnst,)G%_hkATIa8e1n+qp-R$`9?c3SAhN%*V&U\'R&V?q%*slSZZc&r:kDo-2jr@dFltr-,dL(cU0rC6%"&L>rlPJ0lqDG'$;BX6Cg)ZfTR4_oCf+OrlMoGsU@h-s#U:Z^QVcR8@n8ujtT>Es9\5O&7mUp:Eh6s-ug%*WED2V('f<nOUHc^f7%`QunFT26M/nLU0G*Im:Djm`1gdT=XA$@l:Ll+Ft0-W2s%V-ld,laLCoPK#ih9&I$YjE/5fD"<>;g;237esna:r(U>uVam1&c):3g%bi+5ZkB"_`%(=.&LmUSHUYJ&rg)8!0F'>'YKZ]@J\9-U'R$<uY@S;mQ&/SLSUEI('==,6!,tAa\;XoTK6O(d#a+>j#Vpp67M.`bZ%[q;KV[Un3VAS1Pelk(&NCq=$_dg)DpPELkj\!a]qA3=["8HtT1].BJ?3D@Z`4:s?(R@l0'U"F%j*pZ>(C"=r+'DR[S\68@#g5H?]%4$S.7n&i1mL"3f7'52-L8'Oq5BY^dDpnMl&PO$TEVG7&@QKI6B$h%(e;NOn`BGi4Lf!ZOH<]e]q!:l=;ElaQB]fKSJ,$V5"Htt`*%SY\`FM1:?`m1@e<0ZO(4HJl.EEN+WDk7gF;Y-nk+hMgl?Ft<>L6FouTI>Gqq;dM49\.u]ki#ClUV3T9:m/%"?(6^u\JB[J\go$Uq%02VN7Zl/lN746ZA+&LLEdQ>Af'7ctKP`86W4#(+?8<0<@r5G2?fqkBiZ;TIPg]N^C*+_mObsU@RR@eZ6*u9[>4$3+%?qN:XZ8X&Y%h96V.H"J7*H=.-oH/(b$R;h7:L_609`<f!tc+@B05I86Z=XP%aRl@c\oSbQEAAtMqI#pQlG+Uob_\Ak9?T[F[%,5S7:u`hjP7c^0%TQmU?fd<WaH*X^X$(DihL6nQ&-]nH)WHgEi)aNZ2d`-3B%VBGhfTWG.!Ikk66-@ig2*K0i-Fj:Wc/*&6C,3:"pfo5nqURL=YdcDQ%0i&MJ1$RJGR?Vd=<]A.--*o[1dR;WVZB8m4ZY)Ceh7]K.@%$8bhI9;!10llnpkHl^"u)'JHNVViC#TSP0A8s7gV^\TA$DWZO:l3]%gS2m-iQW?O;5Te-I!Q"W)Ud>UE'Q%YD4@sm0AQu]5VU30D#:3?/N5&+23$6>E<'0Zr_aU.Ua0Gt%5FsSZkU_&%j\7HKSXQb']$5a%hF@m!S;aj'K:J/iP=<c7Cc@QJ*5!Yg*.V!+1Wi;cEjNp!Gg9icP6,C&b6_uD_]4d54tQ:/Kk\hCl"1e`R2"@)b;a-Yg<DZ+\]t.f%g0lcp3:o^f^LaC3UfL&&3pBj=dN:t9A2ZIkAnl<1I4[(XdQ\N*lZ5dt9MbPZ3tZ1:&*R9?)]^tuNU[W%:4"d_cYSf#;CEaK0%Fpu%EFTcuQ(l;N!Ut\-.n6=?7g8kcM]$i/Q9,o1/mN4@n+MQW.j<enGM3d-gUc(`;Cp?Co-ImmMGAZ6IOs\Zn!*>X[G1`gQc!DV3JDJ$%!Cmom"qJ>?lerDUC'^!2Fr$]AKhmk_>OZOVQ.^'fMW])U7+'OgSmL=gMoGUs7r7lbgd>Zg-9tdshfdZpJV_p=%+.OhWua=lHp9o$%37.m)8VJ%q_1`oZdk)rG?Bg-<<3"??pDZFUmQ<=oKI;S-Ui<@;mc'aG18^qdHq\BnY0J6q[fo7\UPMc%dqo's.ToUB[('<C:Q0q=%V(OXC3/G7&^W,QB023D5>.cTP-rJb@XGLV#Fj(.RW&6-K&)1N&Fs7!mTV_2H\r$A#EK01mW8E`Wq?T6<aV97(aK=/8Ur=WD)o-C$%e6EO($_mNDKKN">Vt%c\h.9BO291uAMb^ekDes^GC9?h.X02-H`P\4EMNKbp&JL6c5Yr19="SU*GdUL.Ap$n_3W0[kmk=+jS)D\]%%(NDA/)kY2/YQ\$c87Rh\0Lo.MuH`&n>.T)Ve)L,pAP8uLQVS"P3jI.^^:)u9Cni1>a``rK"qal'R9@gfrM_ZVuKg<R#.cBNS;,:%E/-UEg;B(oUBoPYVnS!C+bq>\/KOJ@"uD[QBo'cP6_&)R@/_2nKnD[I4[X/2^+GZe]cp-#mB0[T(E^(]SSMS9E@jY6RIka)8Rl:c%mb)JEYLtpr.+;3K@cnXqo10I0YID"D&qHI#h(s-\81a4+pDp#`#Ml1S[B1uH`16-B\%+)K(B,HRW/(?a@]u9L)eF-SHW;h+,rA=J%k\Xa;-1/Ehp;*j]lb6Yr?]eea9iAlBl8hgM*Kjfj@'MIdgNefo.BBjQ?0+a)FgZ=0iQSM]M`b$5Z`-OugQ('lc)/JJ'0P320#[!a%R."t?oAR%1fgR6&fo#@0,#-0TVENB4NdS0u=iN@(>KA('$';QVOO9&njrYj5Qsb#;)FE`X5C\%pIP[n)7X7;4;"3qEAn4-g:eGVO%QS$6-'+[.tcIgF5nsr#D!gR,8d'VGPOe4mdKLabcWn(6"otWfiKQ_^q2+(3Z:D'$N9^IHt*Ll-l6+1`^T@q(tbknQMS`ZiH%,h;f%(SWH[Np&R%UWnLke[(u*1r2ci[%#C,a=p##Yp(>9e#/kn4R%4Fp8F6dBj,L*f9R4-;2V%r$1D0q7[<gj%;!"MQEd+D)drqAUC++`%p06:iCc5CBq8'P)+K^tZdp>F1-(:<;:Kql(%fa`o."KQlW0Ff&\)Uj&M)T`F3V31aqkLI>nm,j;TV'G_W-hU%V]>8A=4Tq1%t=o?%2soseS_F!7R.h,Z8=;`'M<LF,?n*B3392'Fnoe.6`KKL.#fuDMpeEA=g57+a7P%B(VrTh-DGdE)cXK[YAKCcS4BZcPdSdd#$DohP%7#I/p1Q?m0+T=EA?ti5nh;2'/MCn,j$g:q?me-9b_N_n50VsZLLbdBCD<&<b9nHWQViarHB+L2,5-N31l>&!frOJr6;AS:fKK3UB%CQCV@Aa(VG%M^;$2-(RfepKq2jeZIT;Sfs%YXPQ&k`<kF`Um=6nWr[jN$6s3k4u-(A,;#s6'>-iAdB-@cVSH#(9,5@G^j4nSfUe5%HK-.]C?3DlH059;K#j+!%t,f3Zq:e`Tk7"q:_0QS]4X'O1%Q"7s+l++dEQAfF4%u0Tk@6[)3u%\4MUG-MacIhRbhDeinH)*q12q(%Vo"(AkFDC+Xh",mIY5(/J)6E8Ii/r1_K!4D]b_hknoqg/+u'GQ&)UZlE(o"@n0A1F6d4MnMMTnYo0u673k*X^8MXnXgnYU.$I?tM%4eS?;?d,>[m=2A-lO,4i\,a&BkF!as1LZVF_+2nlc^'ao)g90;dUt[.o*sG&4Tn?LJCrEC*ZA,K-6SFe:=ScgXO"2n0:+@jef@Kq%;=Ra5F]p"7U"3P73c1ehM.@7?c(8#,o*8of7=8(r?ILc[4s\&a8kAS00N_;0'"tOk86BaRd28fGS#;W0jhmAGk]Uc+0t=SZ"US3Y%-PJGND%BO=B!\Xmgt3mMAb'mS0+f/P[Wg'jT-7RTB2ZLY@D9H>3%b%aX&`b9iaJ)k7X;r_DJ$FWUV[RI4n+tN70Y[)B]kp#N4'nm%V<JMVSqD;-:!)rMp,5]*8UW'f.>u>iqj@q-H&jq5d`dHSa9<j?8=1*tW/(s,Nn"p+FH7<"NIkqaobl'qm:f\rqmKP<Lsm]Z(+5a_%6%(%'@nWaH1VqQYS.)p=o.bgbYLpu1K(Mp</O*/^:L71!1>78s6--^g*rA^PK);FKS*ua1!Q]?D7Y-fGdnZhoAJ0:+c8fdb,a4/R%^:q2Lh3e`fCTtDXP?)FBVFdWJ[LHg=oS\r*R64]@5Z4"FZbVn[R1\$s"&#'n1?]e6rYMe-qYjoJ#*a5ON(K@(riU#,@4Jl.%Jm/!%T%t%6\h8j3DP\[!J`Jq/RX??k<u%RKhCug*-$EO[ABHg:o0hTr"P4qUijrZ.R8Ul/hloPL&*T'J2oI50H(RO./!m-Lcc;r:77Nls%rXooPmW*f,`R:pVT72FDSfRe.L?0170h]",I<MK6X^"+lGcm/SN/QqT%:.t'[L3sU-N'nbqoG:])lqLiPC6Kn2d>\PUb\VnQ@'+K%/ITWl[BpfP6YtrQ3^]Y16<ZpSinj!5L<EW/nppr@*BGm0N!QFUOHLrHA\bh)1MSUBG0$QGku%9G9X,)STdS.TS17adIYM$EIKu!,%Y;rdAB<#U#giS'\$gaHFM=*d6m@i<,[bD9rOpbE>?H-NEYU5Q#;TI.Ue2Z4A?=EsSp*GlZe>F5*oLNQ..=8HS;pJ!<\q3lpcJ*4!%g'_8%%aZ_<39j8(kkL@>=.6PZCc0i8`oZl.Du>I;c+CTiY%dcbC2AKk.:nGT_jO<T"SVDKLX"^0bM^iA0!W?]l8WYW9F2Mh)tP#Y%ILD<_>Dp<8YrZ/'IuO(!'h^R'`q"k;-qIH>P4n)M/BQ]4>JXAljD]N^'FnriG'A5smC6ck?"o#^Q08V7OY\bR*E?fsW&RJR[[ABH%SniM`137'^:#AQs(nP+uI($GM"N*'>"^tS;Y$)b784DOUQPC4U*g`</[YTdeH?g@])0;4)cHAfO*K+i[pR$BHjsS/=P;mGag=r>i%X94>AO\9F)#0r/AH^J;`4h&\F2a]D\9C;7Inj;kd=%H03Z6j35fen%]3#BRdY4o)kmKTX4$>OW\r%DH_k<0X"G7;T-P$mqG61Ym6%'DjF6\:&f%"nH%ee$X`[_"u..[GRY,"97j(9$r9A4F4f!l7I>/lGFS5@\+05GN<a^FX`d5Z>h5eGQ\O\?2jFD'jJ-EEigr__U<)H%[F$IM^a!R&kWu7b>PI>ICMm%RkWrumUFLKgdWpehL=2C-B>FZiW'!`b;VPWhdtWjLIPrHXM6^"@>`2OsK6AjTgk,ho`])*aB(-q1%,_?7/=i#_$`dE9T^qt.]E"8=_JW'lW2dL(B:q'(79A`"cMTq[dl<3"\Y;]\F`QuCDe:@C-DS4nZ^9<Ea=8KY^?^-_;4a<g8]QU+[%hj)_d*oJ1#lD4.1KabRZEeES;,BC;"Z<IRNa%]'e\nN,N0VbQ7MsZHQDB+V>K)0*MJQfK-%Z#=4,arToc,->`>g>b`rh+6:\Mn@m%RSK2`LCQ><F"C`;!5'5aBdQMk0q<Tgi<OhbVl!))`:g6)Cho&*rbsD0r6XlZGOq6(]sdB&+,E6]kKK@:fjl@`07:rrLhYh.N3W'F%<+>mb1n,Y(WT<BWONF^^hh93,I"U3IIuL)T'c,mUIl<i0`%\A6k573`1JR2.LPJpq*XL\@9qQBYA%[KVL?7l5bJLqW,ecHG478t$%TmQ:!mLA+m8=LdCUgNk5WM>r[bj:h`ri,<,C%0?L1?SG#f(a.>Da$6sX)7Upn+:C[V!;jZW/Y6.'EFY=at-dTiq-G./f(U4e+K.!%3da-ch^4^,Pa45R,]!9"Ko4"7*[e.<GrVTF>B6g-UHPmjaX49(-W4-gh$d!&R@1(h'D636+Sn41N(n7?;tWL-^HU^8ATtUV)d3.'%a/9_a@A+pI:VT/tD=l<>r!TeoCF]b_!MquuQX?tmJh5,gOFF?8Pn)5<\)Web!\@Tugpqc[q@.aVU%m8Bl8h0AV'9Ge)bW%]/<g^A%oP*G%P7l=0o']*U!TIP9R/5qdO/7L0F+:$nOP\P0De!M)GN-hQ9d=g5UfSB(_2d&gQc-6sh^EW%&gTmK)32oIms<%YmEU0hD*,5.%h*-psLO=()q^],C`ZPf;DVg`OZ=q>-JP@0[6R?70BaHSnN+%)%c4j4F@3?o8kaFpV_iHL5L/;Hu^SMr-,BQ'6]>,-#l$_g&`WCQC%1MbE_TrlJRfuHuF3G+:h2g6%"(Io8MAu4X!$D"1`ef\TF5H``'d[V#pb;;,&pS<,jS7.;PTrimiq(lO(NZ-Ym5CLH)N`n#_a!da;%`@2ih5Pe'/GUOg6==\hRVpQpZ#Ml'=_qj"^mc+n@e"#($Ppce[Hao,,K7!>5TY%69\W3-%+fP^kF9-'o#FR$&`&\4RhU_UH`q1,T%kP\X)H+/Jg/b%<&+-N(9RpccXOOnpVpa(NN;1$Vk3%ff*W*b@oMYfI.?nXUoZMF&/-6$7")69(fX=R7qM8#3(?DHV8.(6lQJ/H"m%!&0hq4d<_O2L4bl-'&9'^3hiWhAP'22$'qn,DkfYAU/dP-U/s9f@g%?f:Qi\Q3&9[[_mM@8c>1jpCg-S/Y6jKD4F5N`(D\cW6e$R%(at[o7X&5pHn<q%QURG4g)tgoOgaPI$Slqt4!DlD*6F;2I+2'QQoBq=]nX8D]`(ibK.Dj^fVj[.GVh`NJa-F!V)MRHMXU1;@K;Hf%:f55@@ZuauPJufa2upLgZs?\DZ@`;<$78eZE5d%u3b-0VAKt[:$1O$!GlY%+86]bN:3a_QZ7=^2LJ1ZKM`gLbP2-[1\WGN:>&]J/%jQW=8.E`p0UXC:A#`h4YX^VmRR:/'!AC+#J(loek4q#GL/rk#R9UjKjrO@NO6l9XupYuU.42^b=m=jSF.O3t-1F1(Jj9Us^N`'HY%*`#o]B>)>nh98.XG!AK)TC"'Q7I,(>/(Th;D9u.Dqq.[SFO%i%'SfP[gTc-9E+tF>$$*"VdSdrBUkVAmS`4Y=->"Qaj2BHLE5@,m%%qc[>qe<)7/VWO?!oi:]@LtUpnFM[fRD@DlI+tUbD-3.-Sb&hI_d3)mN>?[;!n&3MAf7;(#3Jc`O^cVO3,&ua+M!A>NV]'&i?k1h%l:=/Oh'"j$Z51$D+BajTNgW:bG!ClD4l5S18doHq""ef#W6Ddd$_E4^!q,C<9MjCeXD8mT"AVEK3q4qWn#tC2T$H,W%cQq#,a@$]%[#Cu$)=u5E_E9Z6,Z=AsVt1$4)Fh`I39m3``X6_./E7DQfisF(`mU]ce6IQ-gC*074F:`Y:WN=*?t76f*-\^DnGmD^o?Hnj]U4*!%3=ZE+cRmBVSNdp"rXKGJa-4$VRRa8fKH7:8Np.q\6PPQ9#W4rjYoTZeWbI:IEV@1W_]qUejf;rrDO6]K%5/tYMM0[Ndse^_NCgKp%qbr@\UIVK0f[@$O<(R^_d&fW>cF]F)P>k8L=Zu0Q9j6LL^+@9XkN2p;:4Fs>`.e#?E/o\O'R#ouejqp*ZeObJ*09`rn?>Pk/#8*!%K(E)jE/`K#i*dLTU-OehWp%1E/2<d(@-q'E*ElYui<qFEn8kDoY8@GZhuC_=^\\QAV>efUrQ"s2pV6a;5Q(=qroV8iIeV`Ks//*Z%pHS]Ws1JC$k9#3MkMQ=*++F%a5Q9\-rQF[0jU_CcqTCOAqXYg.q-X-cc[Y`OTE"XMrBDFV-XQ^p^\cdcqO`98J#Y28h#~>%AI9_PrivateDataEnd